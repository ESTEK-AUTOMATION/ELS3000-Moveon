//////////////////////////////////////////////////////////////////
//
// RtxLibraryRTDLLExportFunction.cpp - cpp file
//
// This file was generated using the RTX64 RTDLL Template for Visual Studio.
//
// Created: 1/11/2018 6:02:20 PM
// User: Estek
//
//////////////////////////////////////////////////////////////////
    
#include "RtxLibrary.h"

// Stuff for shared memory
static	HANDLE hSharedMemorySetting = NULL;
static	HANDLE hSharedMemoryTeachPoint = NULL;
static	HANDLE hSharedMemoryProduction = NULL;
static	HANDLE hSharedMemoryCustomize = NULL;
static	HANDLE hSharedMemoryIO = NULL;
static	HANDLE hSharedMemoryModuleStatus = NULL;
static	HANDLE hSharedMemoryEvent = NULL;
static	HANDLE hSharedMemoryGeneral = NULL;

static    PVOID    location;
static    PVOID    location2;

LARGE_INTEGER  m_lnPeriod_1ms;

//static    SharedMemorySetting *smSetting = NULL;
//static    SharedMemoryTeachPoint *smTeachPoint = NULL;
//static    SharedMemoryProduction *smProduction = NULL;
//static    SharedMemoryCustomize *smCustomize = NULL;
//static    SharedMemoryIO *smIO = NULL;
//static    SharedMemoryModuleStatus *smModuleStatus = NULL;
//static    SharedMemoryEvent *smEvent = NULL;
//static    SharedMemoryGeneral *smGeneral = NULL;

map<string, bool*> m_mapSettingBool;
map<string, bool*> m_mapSettingArrayBool;
map<string, signed long*> m_mapSettingSignedLong;
map<string, signed long*> m_mapSettingArraySignedLong;
map<string, unsigned int*> m_mapSettingUnsignedInt;
map<string, double*> m_mapSettingDouble;
map<string, signed long*> m_mapTeachPointSignedLong;
map<string, int*> m_mapProductionStationResultInt;
map<string, int*> m_mapSettingVisionInfoInt;
map<string, int*> m_mapProductionInt;
map<string, char*> m_mapProductionString;
map<string, signed long*> m_mapProductionSignedLong;
map<string, int*> m_mapProductionArrayInt;
map<string, bool*> m_mapProductionArrayBool;
map<string, double*> m_mapProductionDouble;
map<string, bool*> m_mapCustomizeBool;
map<string, unsigned long*> m_mapIOArrayUnsignedLong;
map<string, sEvent*> m_mapEvent;
map<string, int*> m_mapGeneralInt;
map<string, signed long*> m_mapGeneralSignedlong;
map<string, double*> m_mapGeneralDouble;
map<string, char*> m_mapGeneralString;
map<string, double*> m_mapProductionArrayDouble;

map<string, LARGE_INTEGER*> m_mapGeneralLargeInteger;

map<string, StationResult*> m_mapProductionStationResult;
map<string, int*> m_mapProductionPatternRecognizationInt;
map<string, char*> m_mapProductionPatternRecognizationString;
map<string, bool*> m_mapProductionBool;
map<string, bool*> m_mapModuleStatusBool;


LONGLONG m_TimeCount = 10000; //10000000

// An exported variable.
RtxLibrary_API int nRtxLibrary = 0;

// Exported RTDLL function
RtxLibrary_API
int 
RTAPI
Toggle(int argc, TCHAR * argv[])
{
    return 0;
}


// This is the constructor of a class that has been exported.
// see RtxLibrary.h for the class definition
CRtxLibrary::CRtxLibrary()
{
	m_lnPeriod_1ms.QuadPart = 10000;
	return;
}

long RunUtility(PCHAR lpCmd)
{
	STARTUPINFO sinfo;
	PROCESS_INFORMATION pinfo;
	ULONG exitCode = 0;
#ifdef ONLINE
	//
	// Initialize startup info to all zeros.
	//
	ZeroMemory(&sinfo, sizeof(sinfo));
	sinfo.cb = sizeof(sinfo);

	//
	// Create the process to run the utility.
	//
	if (CreateProcess(NULL, lpCmd, NULL, NULL, FALSE, 0, NULL,
		NULL, &sinfo, &pinfo) == FALSE)
	{
		return (exitCode - 1);
	}
	char a[80] = "Testing";
	int b = sizeof(a);
	RtPrintf("Testing");
	HANDLE h_writeFile;
	//createhand
	//CreateFile("RTXDebug.txt", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_DELETE | FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, CREATE_ALWAYS, FILE_FLAG_WRITE_THROUGH, h_writeFile);
	////WriteFile(h_writeFile, &a, sizeof(a), 0, 
	//	WriteFileEx(h_writeFile, a, sizeof(a), 0, NULL);
	//	CloseHandle(h_writeFile);
	//
	// Wait for the utility to complete.
	//
	WaitForSingleObject(pinfo.hProcess, INFINITE);
	//
	// Get the exit code (RTSSrun returns the process slot) and close handles.
	//
	GetExitCodeProcess(pinfo.hProcess, &exitCode);
	CloseHandle(pinfo.hThread);
	CloseHandle(pinfo.hProcess);
#endif
	return exitCode;
}

int CreateShareMemory(CustomerSharedMemorySetting *customerSharedMemorySetting, CustomerSharedMemoryTeachPoint *customerSharedMemoryTeachPoint, CustomerSharedMemoryProduction *customerSharedMemoryProduction, CustomerSharedMemoryCustomize *customerSharedMemoryCustomize
, CustomerSharedMemoryIO *customerSharedMemoryIO, CustomerSharedMemoryModuleStatus *customerSharedMemoryModuleStatus, CustomerSharedMemoryEvent *customerSharedMemoryEvent, CustomerSharedMemoryGeneral *customerSharedMemoryGeneral
, HANDLE *hSetting, HANDLE *hTeachPoint, HANDLE *hProduction, HANDLE *hCustomize, HANDLE *hIO, HANDLE *hModuleStatus, HANDLE *hEvent, HANDLE *hGeneral)
{
	//HANDLE hSharedMemorySetting = NULL;
	int nError = 0;
	if (!hSharedMemorySetting)
	{
		if (!(hSharedMemorySetting = RtCreateSharedMemory(PAGE_READWRITE, FALSE, (sizeof(CustomerSharedMemorySetting)), "SharedMemorySetting", (LPVOID*)customerSharedMemorySetting)))
		{
			//AfxMessageBox("Can't open rtss shared memory");
			return -1;
		}

		//smSetting = (struct SharedMemorySetting *) location;
	}
	//if (!*hSetting)
	//{
	//	if (!(*hSetting = RtCreateSharedMemory(PAGE_READWRITE, FALSE, (sizeof(CustomerSharedMemorySetting)), "SharedMemorySetting", (LPVOID*)&customerSharedMemorySetting)))
	//	{
	//		//AfxMessageBox("Can't open rtss shared memory");
	//		return -1;
	//	}

	//	//smSetting = (struct SharedMemorySetting *) location;
	//}
	//if (!*hTeachPoint)
	//{
	//	if (!(*hTeachPoint = RtCreateSharedMemory(PAGE_READWRITE, FALSE, (sizeof(CustomerSharedMemoryTeachPoint)), "SharedMemoryTeachPoint", (LPVOID*)&customerSharedMemoryTeachPoint)))
	//	{
	//		//AfxMessageBox("Can't open rtss shared memory");
	//		return -1;
	//	}
	//}
	//if (!*hProduction)
	//{
	//	if (!(*hProduction = RtCreateSharedMemory(PAGE_READWRITE, FALSE, (sizeof(CustomerSharedMemoryProduction)), "SharedMemoryProduction", (LPVOID*)&customerSharedMemoryProduction)))
	//	{
	//		//AfxMessageBox("Can't open rtss shared memory");
	//		return -1;
	//	}
	//}
	//if (!*hCustomize)
	//{
	//	if (!(*hCustomize = RtCreateSharedMemory(PAGE_READWRITE, FALSE, (sizeof(CustomerSharedMemoryCustomize)), "SharedMemoryCustomize", (LPVOID*)&customerSharedMemoryCustomize)))
	//	{
	//		//AfxMessageBox("Can't open rtss shared memory");
	//		return -1;
	//	}
	//}
	//if (!*hIO)
	//{
	//	if (!(*hIO = RtCreateSharedMemory(PAGE_READWRITE, FALSE, (sizeof(CustomerSharedMemoryIO)), "SharedMemoryIO", (LPVOID*)&customerSharedMemoryIO)))
	//	{
	//		//AfxMessageBox("Can't open rtss shared memory");
	//		return -1;
	//	}
	//}
	//if (!*hModuleStatus)
	//{
	//	if (!(*hModuleStatus = RtCreateSharedMemory(PAGE_READWRITE, FALSE, (sizeof(CustomerSharedMemoryModuleStatus)), "SharedMemoryModuleStatus", (LPVOID*)&customerSharedMemoryModuleStatus)))
	//	{
	//		//AfxMessageBox("Can't open rtss shared memory");
	//		return -1;
	//	}
	//}
	//if (!*hEvent)
	//{
	//	if (!(*hEvent = RtCreateSharedMemory(PAGE_READWRITE, FALSE, (sizeof(CustomerSharedMemoryEvent)), "SharedMemoryEvent", (LPVOID*)&customerSharedMemoryEvent)))
	//	{
	//		//AfxMessageBox("Can't open rtss shared memory");
	//		return -1;
	//	}


	//	//return (int) &smEvent;
	//	//Rtprintf("Event created");
	//}
	//if (!*hGeneral)
	//{
	//	if (!(*hGeneral = RtCreateSharedMemory(PAGE_READWRITE, FALSE, (sizeof(CustomerSharedMemoryGeneral)), "SharedMemoryGeneral", (LPVOID*)&smCustomerGeneral)))
	//	{
	//		//AfxMessageBox("Can't open rtss shared memory");
	//		return -1;
	//	}
	//}
	return nError;
}
/*
int ReleaseHandle(HANDLE *hSetting, HANDLE *hTeachPoint, HANDLE *hProduction, HANDLE *hCustomize, HANDLE *hIO, HANDLE *hModuleStatus, HANDLE *hEvent, HANDLE *hGeneral)
{
	int nError = 0;

	 //close shared memory for RTSS
	if (*hSetting)
	{
		RtUnmapSharedMemory(smSetting);

		if (!(RtCloseHandle(*hSetting)))
		{
			AfxMessageBox("Can't close rtss shared memory");
			ExitProcess(2);
		}
		*hSetting = NULL;
	}
	if (*hTeachPoint)
	{
		RtUnmapSharedMemory(smTeachPoint);

		if (!(RtCloseHandle(*hTeachPoint)))
		{
			AfxMessageBox("Can't close rtss shared memory");
			ExitProcess(2);
		}
		*hTeachPoint = NULL;
	}
	if (*hProduction)
	{
		RtUnmapSharedMemory(smProduction);

		if (!(RtCloseHandle(*hProduction)))
		{
			AfxMessageBox("Can't close rtss shared memory");
			ExitProcess(2);
		}
		*hProduction = NULL;
	}
	if (*hCustomize)
	{
		RtUnmapSharedMemory(smCustomize);

		if (!(RtCloseHandle(*hCustomize)))
		{
			AfxMessageBox("Can't close rtss shared memory");
			ExitProcess(2);
		}
		*hCustomize = NULL;
	}
	if (*hIO)
	{
		RtUnmapSharedMemory(smIO);

		if (!(RtCloseHandle(*hIO)))
		{
			AfxMessageBox("Can't close rtss shared memory");
			ExitProcess(2);
		}
		*hIO = NULL;
	}
	if (*hModuleStatus)
	{
		RtUnmapSharedMemory(smModuleStatus);

		if (!(RtCloseHandle(*hModuleStatus)))
		{
			AfxMessageBox("Can't close rtss shared memory");
			ExitProcess(2);
		}
		*hModuleStatus = NULL;
	}
	if (*hEvent)
	{
		RtUnmapSharedMemory(smEvent);

		if (!(RtCloseHandle(*hEvent)))
		{
			AfxMessageBox("Can't close rtss shared memory");
			ExitProcess(2);
		}
		*hEvent = NULL;
	}
	if (*hGeneral)
	{
		RtUnmapSharedMemory(smGeneral);

		if (!(RtCloseHandle(*hGeneral)))
		{
			AfxMessageBox("Can't close rtss shared memory");
			ExitProcess(2);
		}
		*hGeneral = NULL;
	}
	return nError;
}
*/
int InitializeSharedMemory(void)
{	
	//create shared memory for RTSS process
	if (!hSharedMemorySetting)
	{
#if UNDER_WIN
		if (!(hSharedMemorySetting = RtCreateSharedMemory(PAGE_READWRITE, FALSE, (sizeof(CustomerSharedMemorySetting)), "SharedMemorySetting", (LPVOID*)&smCustomerSetting)))
#else
		if (!(hSharedMemorySetting = RtCreateSharedMemory(SHM_MAP_ALL_ACCESS, (DWORD)0, (DWORD)(sizeof(CustomerSharedMemorySetting)), "SharedMemorySetting", (LPVOID*)&smCustomerSetting)))
#endif
		{
			//AfxMessageBox("Can't open rtss shared memory");
			return -1;
		}

		//smSetting = (struct SharedMemorySetting *) location;
	}
	if (!hSharedMemoryTeachPoint)
	{
#if UNDER_WIN
		if (!(hSharedMemoryTeachPoint = RtCreateSharedMemory(PAGE_READWRITE, FALSE, (sizeof(CustomerSharedMemoryTeachPoint)), "SharedMemoryTeachPoint", (LPVOID*)&smCustomerTeachPoint)))
#else
		if (!(hSharedMemoryTeachPoint = RtCreateSharedMemory(SHM_MAP_ALL_ACCESS, (DWORD)0, (DWORD)(sizeof(CustomerSharedMemoryTeachPoint)), "SharedMemoryTeachPoint", (LPVOID*)&smCustomerTeachPoint)))
#endif
		{
			//AfxMessageBox("Can't open rtss shared memory");
			return -1;
		}
	}
	if (!hSharedMemoryProduction)
	{
#if UNDER_WIN
		if (!(hSharedMemoryProduction = RtCreateSharedMemory(PAGE_READWRITE, FALSE, (sizeof(CustomerSharedMemoryProduction)), "SharedMemoryProduction", (LPVOID*)&smCustomerProduction)))
#else
		if (!(hSharedMemoryProduction = RtCreateSharedMemory(SHM_MAP_ALL_ACCESS, (DWORD)0, (DWORD)(sizeof(CustomerSharedMemoryProduction)), "SharedMemoryProduction", (LPVOID*)&smCustomerProduction)))
#endif
		{
			//AfxMessageBox("Can't open rtss shared memory");
			return -1;
		}
	}
	if (!hSharedMemoryCustomize)
	{
#if UNDER_WIN
		if (!(hSharedMemoryCustomize = RtCreateSharedMemory(PAGE_READWRITE, FALSE, (sizeof(CustomerSharedMemoryCustomize)), "SharedMemoryCustomize", (LPVOID*)&smCustomerCustomize)))
#else
		if (!(hSharedMemoryCustomize = RtCreateSharedMemory(SHM_MAP_ALL_ACCESS, (DWORD)0, (DWORD)(sizeof(CustomerSharedMemoryCustomize)), "SharedMemoryCustomize", (LPVOID*)&smCustomerCustomize)))
#endif
		{
			//AfxMessageBox("Can't open rtss shared memory");
			return -1;
		}
	}
	if (!hSharedMemoryIO)
	{
#if UNDER_WIN
		if (!(hSharedMemoryIO = RtCreateSharedMemory(PAGE_READWRITE, FALSE, (sizeof(CustomerSharedMemoryIO)), "SharedMemoryIO", (LPVOID*)&smCustomerIO)))
#else
		if (!(hSharedMemoryIO = RtCreateSharedMemory(SHM_MAP_ALL_ACCESS, (DWORD)0, (DWORD)(sizeof(CustomerSharedMemoryIO)), "SharedMemoryIO", (LPVOID*)&smCustomerIO)))
#endif
		{
			//AfxMessageBox("Can't open rtss shared memory");
			return -1;
		}
	}
	if (!hSharedMemoryModuleStatus)
	{
#if UNDER_WIN
		if (!(hSharedMemoryModuleStatus = RtCreateSharedMemory(PAGE_READWRITE, FALSE, (sizeof(CustomerSharedMemoryModuleStatus)), "SharedMemoryModuleStatus", (LPVOID*)&smCustomerModuleStatus)))
#else
		if (!(hSharedMemoryModuleStatus = RtCreateSharedMemory(SHM_MAP_ALL_ACCESS, (DWORD)0, (DWORD)(sizeof(CustomerSharedMemoryModuleStatus)), "SharedMemoryModuleStatus", (LPVOID*)&smCustomerModuleStatus)))
#endif
		{
			//AfxMessageBox("Can't open rtss shared memory");
			return -1;
		}
	}
	if (!hSharedMemoryEvent)
	{
#if UNDER_WIN
		if (!(hSharedMemoryEvent = RtCreateSharedMemory(PAGE_READWRITE, FALSE, (sizeof(CustomerSharedMemoryEvent)), "SharedMemoryEvent", (LPVOID*)&smCustomerEvent)))
#else
		if (!(hSharedMemoryEvent = RtCreateSharedMemory(SHM_MAP_ALL_ACCESS, (DWORD)0, (DWORD)(sizeof(CustomerSharedMemoryEvent)), "SharedMemoryEvent", (LPVOID*)&smCustomerEvent)))
#endif
		{
			//AfxMessageBox("Can't open rtss shared memory");
			return -1;
		}


		//return (int) &smEvent;
		//Rtprintf("Event created");
	}
	if (!hSharedMemoryGeneral)
	{
#if UNDER_WIN
		if (!(hSharedMemoryGeneral = RtCreateSharedMemory(PAGE_READWRITE, FALSE, (sizeof(CustomerSharedMemoryGeneral)), "SharedMemoryGeneral", (LPVOID*)&smCustomerGeneral)))
#else
		if (!(hSharedMemoryGeneral = RtCreateSharedMemory(SHM_MAP_ALL_ACCESS, (DWORD)0, (DWORD)(sizeof(CustomerSharedMemoryGeneral)), "SharedMemoryGeneral", (LPVOID*)&smCustomerGeneral)))
#endif
		{
			//AfxMessageBox("Can't open rtss shared memory");
			return -1;
		}
	}
	//CreateShareMemory(smCustomerSetting, smCustomerTeachPoint, smCustomerProduction, smCustomerCustomize, smCustomerIO, smCustomerModuleStatus, smCustomerEvent, smCustomerGeneral
	//	, &hSharedMemorySetting, &hSharedMemoryTeachPoint, &hSharedMemoryProduction, &hSharedMemoryCustomize, &hSharedMemoryIO, &hSharedMemoryModuleStatus, &hSharedMemoryEvent, &hSharedMemoryGeneral);

	ResetShareMemoryEvent();
	MapShareMemory();
	//MessageBoxA(0, "Can't open rtss shared memory", "A", 0);
	return 0;
}

int MapShareMemory()
{
	int nError = 0;

	nError = MapSettingBoolPlatform(&m_mapSettingBool, smCustomerSetting);
	MapSettingBoolProduct(&m_mapSettingBool, smCustomerSetting);
	MapSettingBoolCustomer(&m_mapSettingBool, smCustomerSetting);
	MapSettingArrayBoolPlatform(&m_mapSettingArrayBool, smCustomerSetting);
	MapSettingArrayBoolProduct(&m_mapSettingArrayBool, smCustomerSetting);
	MapSettingArrayBoolCustomer(&m_mapSettingArrayBool, smCustomerSetting);
	MapSettingSignedLongPlatform(&m_mapSettingSignedLong, smCustomerSetting);
	MapSettingSignedLongProduct(&m_mapSettingSignedLong, smCustomerSetting);
	MapSettingSignedLongCustomer(&m_mapSettingSignedLong, smCustomerSetting);
	MapSettingArraySignedLongPlatform(&m_mapSettingArraySignedLong, smCustomerSetting);
	MapSettingArraySignedLongProduct(&m_mapSettingArraySignedLong, smCustomerSetting);
	MapSettingArraySignedLongCustomer(&m_mapSettingArraySignedLong, smCustomerSetting);
	MapSettingUnsignedIntPlatform(&m_mapSettingUnsignedInt, smCustomerSetting);
	MapSettingUnsignedIntProduct(&m_mapSettingUnsignedInt, smCustomerSetting);
	MapSettingUnsignedIntCustomer(&m_mapSettingUnsignedInt, smCustomerSetting);
	MapSettingDoublePlatform(&m_mapSettingDouble, smCustomerSetting);
	MapSettingDoubleProduct(&m_mapSettingDouble, smCustomerSetting);
	MapSettingDoubleCustomer(&m_mapSettingDouble, smCustomerSetting);

	MapSettingVisionInfoIntProduct(&m_mapSettingVisionInfoInt, smCustomerSetting);

	MapTeachPointSignedLongPlatform(&m_mapTeachPointSignedLong, smCustomerTeachPoint);
	MapTeachPointSignedLongProduct(&m_mapTeachPointSignedLong, smCustomerTeachPoint);
	
	MapTeachPointSignedLongCustomer(&m_mapTeachPointSignedLong, smCustomerTeachPoint);
	MapProductionStationResultIntPlatform(&m_mapProductionStationResultInt, smCustomerProduction);

	MapProductionStationResultIntProduct(&m_mapProductionStationResultInt, smCustomerProduction);
	MapProductionStationResultIntCustomer(&m_mapProductionStationResultInt, smCustomerProduction);

	

	MapProductionIntPlatform(&m_mapProductionInt, smCustomerProduction);
	MapProductionIntProduct(&m_mapProductionInt, smCustomerProduction);
	MapProductionIntCustomer(&m_mapProductionInt, smCustomerProduction);
	MapProductionStringProduct(&m_mapProductionString, smCustomerProduction);
	MapProductionSignedLongPlatform(&m_mapProductionSignedLong, smCustomerProduction);
	MapProductionSignedLongProduct(&m_mapProductionSignedLong, smCustomerProduction);
	MapProductionSignedLongCustomer(&m_mapProductionSignedLong, smCustomerProduction);
	MapProductionArrayIntPlatform(&m_mapProductionArrayInt, smCustomerProduction);
	MapProductionArrayIntProduct(&m_mapProductionArrayInt, smCustomerProduction);
	MapProductionArrayIntCustomer(&m_mapProductionArrayInt, smCustomerProduction);
	MapProductionArrayBoolProduct(&m_mapProductionArrayBool, smCustomerProduction);
	MapProductionDoubleProduct(&m_mapProductionDouble, smCustomerProduction);
	MapCustomizeBoolPlatform(&m_mapCustomizeBool, smCustomerCustomize);
	MapCustomizeBoolProduct(&m_mapCustomizeBool, smCustomerCustomize);
	MapCustomizeBoolCustomer(&m_mapCustomizeBool, smCustomerCustomize);

	MapIOArrayUnsignedLongPlatform(&m_mapIOArrayUnsignedLong, smCustomerIO);
	MapIOArrayUnsignedLongProduct(&m_mapIOArrayUnsignedLong, smCustomerIO);
	MapIOArrayUnsignedLongCustomer(&m_mapIOArrayUnsignedLong, smCustomerIO);
	MapEventPlatform(&m_mapEvent, smCustomerEvent);
	MapEventProduct(&m_mapEvent, smCustomerEvent);
	MapEventCustomer(&m_mapEvent, smCustomerEvent);
	MapGeneralIntPlatform(&m_mapGeneralInt, smCustomerGeneral);
	MapGeneralIntProduct(&m_mapGeneralInt, smCustomerGeneral);
	MapGeneralIntCustomer(&m_mapGeneralInt, smCustomerGeneral);
	MapGeneralSignedLongPlatform(&m_mapGeneralSignedlong, smCustomerGeneral);
	MapGeneralSignedLongProduct(&m_mapGeneralSignedlong, smCustomerGeneral);
	MapGeneralSignedLongCustomer(&m_mapGeneralSignedlong, smCustomerGeneral);
	MapGeneralDoublePlatform(&m_mapGeneralDouble, smCustomerGeneral);
	MapGeneralDoubleProduct(&m_mapGeneralDouble, smCustomerGeneral);
	MapGeneralDoubleCustomer(&m_mapGeneralDouble, smCustomerGeneral);
	MapGeneralStringPlatform(&m_mapGeneralString, smCustomerGeneral);
	MapGeneraStringProduct(&m_mapGeneralString, smCustomerGeneral);
	MapGeneralStringCustomer(&m_mapGeneralString, smCustomerGeneral);
	MapGeneralLargeIntegerPlatform(&m_mapGeneralLargeInteger, smCustomerGeneral);
	MapGeneraLargeIntegerProduct(&m_mapGeneralLargeInteger, smCustomerGeneral);
	MapGeneralLargeIntegerCustomer(&m_mapGeneralLargeInteger, smCustomerGeneral);
	MapProductionBoolProduct(&m_mapProductionBool, smCustomerProduction);
	
	MapModuleStatusBoolProduct(&m_mapModuleStatusBool, smCustomerModuleStatus);
	MapProductionArrayDoubleProduct(&m_mapProductionArrayDouble, smCustomerProduction);
	return 0;
}

int MapSettingBoolPlatform(map<string, bool*> *mapSettingBool, CustomerSharedMemorySetting *customerSharedMemorySetting)
{
	(*mapSettingBool).insert(pair< string, bool*>("EnableOnlineMode", &customerSharedMemorySetting->EnableOnlineMode));
	return 0;
}

int MapSettingBoolProduct(map<string, bool*> *mapSettingBool, CustomerSharedMemorySetting *customerSharedMemorySetting)
{
	(*mapSettingBool).insert(pair<string, bool*>("EnableCheckEmptyUnit", &customerSharedMemorySetting->EnableCheckEmptyUnit));
	(*mapSettingBool).insert(pair<string, bool*>("EnablePurging", &customerSharedMemorySetting->EnablePurging));

	(*mapSettingBool).insert(pair<string, bool*>("EnableVisionWaitResult", &customerSharedMemorySetting->EnableVisionWaitResult));
	
	(*mapSettingBool).insert(pair<string, bool*>("EnablePickSoftlanding", &customerSharedMemorySetting->EnablePickSoftlanding));
	(*mapSettingBool).insert(pair<string, bool*>("EnablePlaceSoftlanding", &customerSharedMemorySetting->EnablePlaceSoftlanding));

	(*mapSettingBool).insert(pair<string, bool*>("EnableVision", &customerSharedMemorySetting->EnableVision));

	(*mapSettingBool).insert(pair<string, bool*>("EnableTeachUnitAtVision", &customerSharedMemorySetting->EnableTeachUnitAtVision));

	(*mapSettingBool).insert(pair<string, bool*>("EnableInputVision", &customerSharedMemorySetting->EnableInputVision));
	(*mapSettingBool).insert(pair<string, bool*>("EnableS2Vision", &customerSharedMemorySetting->EnableS2Vision));
	(*mapSettingBool).insert(pair<string, bool*>("EnableS1Vision", &customerSharedMemorySetting->EnableS1Vision));
	(*mapSettingBool).insert(pair<string, bool*>("EnableSetupVision", &customerSharedMemorySetting->EnableSetupVision));
	(*mapSettingBool).insert(pair<string, bool*>("EnableBottomVision", &customerSharedMemorySetting->EnableBottomVision));
	(*mapSettingBool).insert(pair<string, bool*>("EnableS3Vision", &customerSharedMemorySetting->EnableS3Vision));
	(*mapSettingBool).insert(pair<string, bool*>("EnableOutputVision", &customerSharedMemorySetting->EnableOutputVision));
	(*mapSettingBool).insert(pair<string, bool*>("EnableOutputVision2ndPostAlign", &customerSharedMemorySetting->EnableOutputVision2ndPostAlign));

	(*mapSettingBool).insert(pair<string, bool*>("EnablePickupHeadRetryPickingNo", &customerSharedMemorySetting->EnablePickupHeadRetryPickingNo));
	(*mapSettingBool).insert(pair<string, bool*>("EnablePickupHeadRetryPlacingNo", &customerSharedMemorySetting->EnablePickupHeadRetryPlacingNo));
	(*mapSettingBool).insert(pair<string, bool*>("EnableBarcodePrinter", &customerSharedMemorySetting->EnableBarcodePrinter));

	(*mapSettingBool).insert(pair<string, bool*>("EnableInputTableVacuum", &customerSharedMemorySetting->EnableInputTableVacuum));
	(*mapSettingBool).insert(pair<string, bool*>("EnableCountDownByInputQuantity", &customerSharedMemorySetting->EnableCountDownByInputQuantity));
	(*mapSettingBool).insert(pair<string, bool*>("EnableCountDownByInputTrayNo", &customerSharedMemorySetting->EnableCountDownByInputTrayNo));

	(*mapSettingBool).insert(pair<string, bool*>("EnableS2S3BothSnapping", &customerSharedMemorySetting->EnableS2S3BothSnapping));
	(*mapSettingBool).insert(pair<string, bool*>("EnableSafetyPnPMovePickStation", &customerSharedMemorySetting->EnableSafetyPnPMovePickStation));
	return 0;
}

int MapSettingBoolCustomer(map<string, bool*> *mapSettingBool, CustomerSharedMemorySetting *customerSharedMemorySetting)
{
	return 0;
}

int MapSettingArrayBoolPlatform(map<string, bool*> *mapSettingArrayBool, CustomerSharedMemorySetting *customerSharedMemorySetting)
{
	return 0;
}

int MapSettingArrayBoolProduct(map<string, bool*> *mapSettingArrayBool, CustomerSharedMemorySetting *customerSharedMemorySetting)
{
	char chVariable[256];
	memset(chVariable, 0, sizeof(chVariable));

	for (int i = 0; i < 2; i++)
	{
		sprintf_s(chVariable, sizeof(chVariable), "EnablePH%u", i);
		(*mapSettingArrayBool).insert(pair<string, bool*>(chVariable, &customerSharedMemorySetting->EnablePH[i]));
	}
	memset(chVariable, 0, sizeof(chVariable));

	return 0;
}

int MapSettingArrayBoolCustomer(map<string, bool*> *mapSettingArrayBool, CustomerSharedMemorySetting *customerSharedMemorySetting)
{
	return 0;
}

int MapSettingSignedLongPlatform(map<string, signed long*> *mapSettingSignedLong, CustomerSharedMemorySetting *customerSharedMemorySetting)
{
	return 0;
}

int MapSettingSignedLongProduct(map<string, signed long*> *mapSettingSignedLong, CustomerSharedMemorySetting *customerSharedMemorySetting)
{
	(*mapSettingSignedLong).insert(pair<string, signed long*>("PickingCenterXOffsetInput", &customerSharedMemorySetting->PickingCenterXOffsetInput));
	(*mapSettingSignedLong).insert(pair<string, signed long*>("PickingCenterYOffsetInput", &customerSharedMemorySetting->PickingCenterYOffsetInput));
	(*mapSettingSignedLong).insert(pair<string, signed long*>("BottomVisionXOffset", &customerSharedMemorySetting->BottomVisionXOffset));
	(*mapSettingSignedLong).insert(pair<string, signed long*>("BottomVisionYOffset", &customerSharedMemorySetting->BottomVisionYOffset));
	(*mapSettingSignedLong).insert(pair<string, signed long*>("UnitPlacementRotationOffsetInput", &customerSharedMemorySetting->UnitPlacementRotationOffsetInput));
	
	(*mapSettingSignedLong).insert(pair<string, signed long*>("TableXOffsetOutput", &customerSharedMemorySetting->TableXOffsetOutput));
	(*mapSettingSignedLong).insert(pair<string, signed long*>("TableYOffsetOutput", &customerSharedMemorySetting->TableYOffsetOutput));
	(*mapSettingSignedLong).insert(pair<string, signed long*>("UnitPlacementRotationOffsetOutput", &customerSharedMemorySetting->UnitPlacementRotationOffsetOutput));

	
	(*mapSettingSignedLong).insert(pair<string, signed long*>("PickingGap_um", &customerSharedMemorySetting->PickingGap_um));
	(*mapSettingSignedLong).insert(pair<string, signed long*>("PickingGapOutput_um", &customerSharedMemorySetting->PickingGap_um_Output));
	(*mapSettingSignedLong).insert(pair<string, signed long*>("PlacementGap_um", &customerSharedMemorySetting->PlacementGap_um));
	(*mapSettingSignedLong).insert(pair<string, signed long*>("Picking1SoftlandingDistance_um", &customerSharedMemorySetting->Picking1SoftlandingDistance_um));
	(*mapSettingSignedLong).insert(pair<string, signed long*>("Picking2SoftlandingDistance_um", &customerSharedMemorySetting->Picking2SoftlandingDistance_um));
	(*mapSettingSignedLong).insert(pair<string, signed long*>("PickingSoftlandingDistanceOutput_um", &customerSharedMemorySetting->PickingSoftlandingDistance_um_Output));
	(*mapSettingSignedLong).insert(pair<string, signed long*>("PickingSoftlandingSpeed_percent", &customerSharedMemorySetting->PickingSoftlandingSpeed_percent));
	(*mapSettingSignedLong).insert(pair<string, signed long*>("PickingSoftlandingSpeedOutput_percent", &customerSharedMemorySetting->PickingSoftlandingSpeed_percent_Output));
	(*mapSettingSignedLong).insert(pair<string, signed long*>("PlacementSoftlandingDistance_um", &customerSharedMemorySetting->PlacementSoftlandingDistance_um));
	(*mapSettingSignedLong).insert(pair<string, signed long*>("PlacementSoftlandingSpeed_percent", &customerSharedMemorySetting->PlacementSoftlandingSpeed_percent));
	(*mapSettingSignedLong).insert(pair<string, signed long*>("PickAndPlaceXAxisOnTheFlyOffsetForSetupVision_um", &customerSharedMemorySetting->PickAndPlaceXAxisOnTheFlyOffsetForSetupVision_um));
	
	(*mapSettingSignedLong).insert(pair<string, signed long*>("InputVisionUnitThetaOffset", &customerSharedMemorySetting->InputVisionUnitThetaOffset));
	(*mapSettingSignedLong).insert(pair<string, signed long*>("S2VisionUnitThetaOffset", &customerSharedMemorySetting->S2VisionUnitThetaOffset));
	(*mapSettingSignedLong).insert(pair<string, signed long*>("S2FacetVisionUnitThetaOffset", &customerSharedMemorySetting->S2FacetVisionUnitThetaOffset));
	(*mapSettingSignedLong).insert(pair<string, signed long*>("S1VisionUnitThetaOffset", &customerSharedMemorySetting->S1VisionUnitThetaOffset));
	(*mapSettingSignedLong).insert(pair<string, signed long*>("BottomVisionUnitThetaOffset", &customerSharedMemorySetting->BottomVisionUnitThetaOffset));
	(*mapSettingSignedLong).insert(pair<string, signed long*>("S3VisionUnitThetaOffset", &customerSharedMemorySetting->S3VisionUnitThetaOffset));
	(*mapSettingSignedLong).insert(pair<string, signed long*>("S3FacetVisionUnitThetaOffset", &customerSharedMemorySetting->S3FacetVisionUnitThetaOffset));
	(*mapSettingSignedLong).insert(pair<string, signed long*>("OutputVisionUnitThetaOffset", &customerSharedMemorySetting->OutputVisionUnitThetaOffset));

	(*mapSettingSignedLong).insert(pair<string, signed long*>("UnitCenterToBottomVisionFocusOffset", &customerSharedMemorySetting->UnitCenterToBottomVisionFocusOffset));
	(*mapSettingSignedLong).insert(pair<string, signed long*>("UnitCenterToSidewallLeftFocusOffset", &customerSharedMemorySetting->UnitCenterToSidewallLeftFocusOffset));
	(*mapSettingSignedLong).insert(pair<string, signed long*>("UnitCenterToSidewallRightFocusOffset", &customerSharedMemorySetting->UnitCenterToSidewallRightFocusOffset));
	(*mapSettingSignedLong).insert(pair<string, signed long*>("UnitCenterToSidewallFrontFocusOffset", &customerSharedMemorySetting->UnitCenterToSidewallFrontFocusOffset));
	(*mapSettingSignedLong).insert(pair<string, signed long*>("UnitCenterToSidewallRearFocusOffset", &customerSharedMemorySetting->UnitCenterToSidewallRearFocusOffset));
	(*mapSettingSignedLong).insert(pair<string, signed long*>("UnitCenterToS3FocusOffset", &customerSharedMemorySetting->UnitCenterToS3FocusOffset));

	(*mapSettingSignedLong).insert(pair<string, signed long*>("SetupVisionUnitThetaOffset", &customerSharedMemorySetting->SetupVisionUnitThetaOffset));
	return 0;
}

int MapSettingSignedLongCustomer(map<string, signed long*> *mapSettingSignedLong, CustomerSharedMemorySetting *customerSharedMemorySetting)
{
	return 0;
}

int MapSettingArraySignedLongPlatform(map<string, signed long*> *mapSettingArraySignedLong, CustomerSharedMemorySetting *customerSharedMemorySetting)
{
	return 0;
}

int MapSettingArraySignedLongProduct(map<string, signed long*> *mapSettingArraySignedLong, CustomerSharedMemorySetting *customerSharedMemorySetting)
{
	char chVariable[256];
	memset(chVariable, 0, sizeof(chVariable));

	for (int i = 0; i < 2; i++)
	{
		sprintf_s(chVariable, sizeof(chVariable), "PickUpHeadCompensationXOffset%u", i);
		(*mapSettingArraySignedLong).insert(pair<string, signed long*>(chVariable, &customerSharedMemorySetting->PickUpHeadCompensationXOffset[i]));
		sprintf_s(chVariable, sizeof(chVariable), "PickUpHeadCompensationYOffset%u", i);
		(*mapSettingArraySignedLong).insert(pair<string, signed long*>(chVariable, &customerSharedMemorySetting->PickUpHeadCompensationYOffset[i]));

		sprintf_s(chVariable, sizeof(chVariable), "PickUpHeadHeadCompensationXOffset%u", i);
		(*mapSettingArraySignedLong).insert(pair<string, signed long*>(chVariable, &customerSharedMemorySetting->PickUpHeadHeadCompensationXOffset[i]));
		sprintf_s(chVariable, sizeof(chVariable), "PickUpHeadHeadCompensationYOffset%u", i);
		(*mapSettingArraySignedLong).insert(pair<string, signed long*>(chVariable, &customerSharedMemorySetting->PickUpHeadHeadCompensationYOffset[i]));

		sprintf_s(chVariable, sizeof(chVariable), "PickUpHeadOutputCompensationXOffset%u", i);
		(*mapSettingArraySignedLong).insert(pair<string, signed long*>(chVariable, &customerSharedMemorySetting->PickUpHeadOutputCompensationXOffset[i]));
		sprintf_s(chVariable, sizeof(chVariable), "PickUpHeadOutputCompensationYOffset%u", i);
		(*mapSettingArraySignedLong).insert(pair<string, signed long*>(chVariable, &customerSharedMemorySetting->PickUpHeadOutputCompensationYOffset[i]));
		sprintf_s(chVariable, sizeof(chVariable), "PickUpHeadOutputCompensationThetaOffset%u", i);
		(*mapSettingArraySignedLong).insert(pair<string, signed long*>(chVariable, &customerSharedMemorySetting->PickUpHeadOutputCompensationThetaOffset[i]));

		sprintf_s(chVariable, sizeof(chVariable), "PickUpHeadRotationXOffset%u", i);
		(*mapSettingArraySignedLong).insert(pair<string, signed long*>(chVariable, &customerSharedMemorySetting->PickUpHeadRotationXOffset[i]));
		sprintf_s(chVariable, sizeof(chVariable), "PickUpHeadRotationYOffset%u", i);
		(*mapSettingArraySignedLong).insert(pair<string, signed long*>(chVariable, &customerSharedMemorySetting->PickUpHeadRotationYOffset[i]));
	}

	return 0;
}

int MapSettingArraySignedLongCustomer(map<string, signed long*> *mapSettingArraySignedLong, CustomerSharedMemorySetting *customerSharedMemorySetting)
{
	return 0;
}

int MapSettingUnsignedIntPlatform(map<string, unsigned int*> *mapSettingUnsignedInt, CustomerSharedMemorySetting *customerSharedMemorySetting)
{
	return 0;
}

int MapSettingUnsignedIntProduct(map<string, unsigned int*> *mapSettingUnsignedInt, CustomerSharedMemorySetting *customerSharedMemorySetting)
{
	(*mapSettingUnsignedInt).insert(pair<string, unsigned int*>("NoOfDeviceInColInput", &smCustomerSetting->NoOfDeviceInColInput));
	(*mapSettingUnsignedInt).insert(pair<string, unsigned int*>("NoOfDeviceInRowInput", &smCustomerSetting->NoOfDeviceInRowInput));
	(*mapSettingUnsignedInt).insert(pair<string, unsigned int*>("DeviceXPitchInput", &smCustomerSetting->DeviceXPitchInput));
	(*mapSettingUnsignedInt).insert(pair<string, unsigned int*>("DeviceYPitchInput", &smCustomerSetting->DeviceYPitchInput));
	(*mapSettingUnsignedInt).insert(pair<string, unsigned int*>("UnitThickness_um", &smCustomerSetting->UnitThickness_um));
	(*mapSettingUnsignedInt).insert(pair<string, unsigned int*>("InputPocketDepth_um", &smCustomerSetting->InputPocketDepth_um));
	(*mapSettingUnsignedInt).insert(pair<string, unsigned int*>("InputTrayThickness", &smCustomerSetting->InputTrayThickness));
	(*mapSettingUnsignedInt).insert(pair<string, unsigned int*>("EmptyUnit", &smCustomerSetting->EmptyUnit));
	
	(*mapSettingUnsignedInt).insert(pair<string, unsigned int*>("NoOfDeviceInColOutput", &smCustomerSetting->NoOfDeviceInColOutput));
	(*mapSettingUnsignedInt).insert(pair<string, unsigned int*>("NoOfDeviceInRowOutput", &smCustomerSetting->NoOfDeviceInRowOutput));
	(*mapSettingUnsignedInt).insert(pair<string, unsigned int*>("DeviceXPitchOutput", &smCustomerSetting->DeviceXPitchOutput));
	(*mapSettingUnsignedInt).insert(pair<string, unsigned int*>("DeviceYPitchOutput", &smCustomerSetting->DeviceYPitchOutput));
	(*mapSettingUnsignedInt).insert(pair<string, unsigned int*>("OutputPocketDepth_um", &smCustomerSetting->OutputPocketDepth_um));
	(*mapSettingUnsignedInt).insert(pair<string, unsigned int*>("OutputTrayThickness", &smCustomerSetting->OutputTrayThickness));
	
	(*mapSettingUnsignedInt).insert(pair<string, unsigned int*>("TotalOutputUnitQuantity", &smCustomerSetting->TotalOutputUnitQuantity));
	
	(*mapSettingUnsignedInt).insert(pair<string, unsigned int*>("InputOutputDefectRejectTray", &smCustomerSetting->InputOutputDefectRejectTray));
	(*mapSettingUnsignedInt).insert(pair<string, unsigned int*>("S2DefectRejectTray", &smCustomerSetting->S2DefectRejectTray));
	(*mapSettingUnsignedInt).insert(pair<string, unsigned int*>("SetupDefectRejectTray", &smCustomerSetting->SetupDefectRejectTray));
	(*mapSettingUnsignedInt).insert(pair<string, unsigned int*>("S1DefectRejectTray", &smCustomerSetting->S1DefectRejectTray));
	(*mapSettingUnsignedInt).insert(pair<string, unsigned int*>("SidewallLeftDefectRejectTray", &smCustomerSetting->SidewallLeftDefectRejectTray));
	(*mapSettingUnsignedInt).insert(pair<string, unsigned int*>("SidewallRightDefectRejectTray", &smCustomerSetting->SidewallRightDefectRejectTray));
	(*mapSettingUnsignedInt).insert(pair<string, unsigned int*>("S3DefectRejectTray", &smCustomerSetting->S3DefectRejectTray));
	(*mapSettingUnsignedInt).insert(pair<string, unsigned int*>("SidewallFrontDefectRejectTray", &smCustomerSetting->SidewallFrontDefectRejectTray));
	(*mapSettingUnsignedInt).insert(pair<string, unsigned int*>("SidewallRearDefectRejectTray", &smCustomerSetting->SidewallRearDefectRejectTray));


	(*mapSettingUnsignedInt).insert(pair<string, unsigned int*>("DelayBeforePickupHeadGoingDownForPicking_ms", &smCustomerSetting->DelayBeforePickupHeadGoingDownForPicking_ms));
	(*mapSettingUnsignedInt).insert(pair<string, unsigned int*>("DelayForPickupHeadAtDownPositionBeforeVacuumOn_ms", &smCustomerSetting->DelayForPickupHeadAtDownPositionBeforeVacuumOn_ms));
	(*mapSettingUnsignedInt).insert(pair<string, unsigned int*>("DelayForPickupHeadAtDownPositionWithVacuumOn_ms", &smCustomerSetting->DelayForPickupHeadAtDownPositionWithVacuumOn_ms));
	(*mapSettingUnsignedInt).insert(pair<string, unsigned int*>("DelayForPickupHeadAtSoftlandingPositionForPicking_ms", &smCustomerSetting->DelayForPickupHeadAtSoftlandingPositionForPicking_ms));

	(*mapSettingUnsignedInt).insert(pair<string, unsigned int*>("DelayBeforePickupHeadGoingDownForPickingOutput_ms", &smCustomerSetting->DelayBeforePickupHeadGoingDownForPicking_ms_Output));
	(*mapSettingUnsignedInt).insert(pair<string, unsigned int*>("DelayForPickupHeadAtDownPositionBeforeVacuumOnOutput_ms", &smCustomerSetting->DelayForPickupHeadAtDownPositionBeforeVacuumOn_ms_Output));
	(*mapSettingUnsignedInt).insert(pair<string, unsigned int*>("DelayForPickupHeadAtDownPositionWithVacuumOnOutput_ms", &smCustomerSetting->DelayForPickupHeadAtDownPositionWithVacuumOn_ms_Output));
	(*mapSettingUnsignedInt).insert(pair<string, unsigned int*>("DelayForPickupHeadAtSoftlandingPositionForPickingOutput_ms", &smCustomerSetting->DelayForPickupHeadAtSoftlandingPositionForPicking_ms_Output));

	(*mapSettingUnsignedInt).insert(pair<string, unsigned int*>("DelayBeforePickupHeadGoingDownForPlacement_ms", &smCustomerSetting->DelayBeforePickupHeadGoingDownForPlacement_ms));
	(*mapSettingUnsignedInt).insert(pair<string, unsigned int*>("DelayForPickupHeadAtDownPositionBeforePurging_ms", &smCustomerSetting->DelayForPickupHeadAtDownPositionBeforePurging_ms));
	(*mapSettingUnsignedInt).insert(pair<string, unsigned int*>("DelayForPickupHeadAtDownPositionWithPurging_ms", &smCustomerSetting->DelayForPickupHeadAtDownPositionWithPurging_ms));
	(*mapSettingUnsignedInt).insert(pair<string, unsigned int*>("DelayForPickupHeadAtDownPositionAfterPurging_ms", &smCustomerSetting->DelayForPickupHeadAtDownPositionAfterPurging_ms));
	(*mapSettingUnsignedInt).insert(pair<string, unsigned int*>("DelayForPickupHeadMoveUpAfterPicking_ms", &smCustomerSetting->DelayForPickupHeadMoveUpAfterPicking_ms));

	(*mapSettingUnsignedInt).insert(pair<string, unsigned int*>("DelayForPickupHeadAtSoftlandingPositionForPlacement_ms", &smCustomerSetting->DelayForPickupHeadAtSoftlandingPositionForPlacement_ms));

	(*mapSettingUnsignedInt).insert(pair<string, unsigned int*>("DelayBeforeInputVisionSnap_ms", &smCustomerSetting->DelayBeforeInputVisionSnap_ms));
	(*mapSettingUnsignedInt).insert(pair<string, unsigned int*>("DelayBeforeS2VisionSnap_ms", &smCustomerSetting->DelayBeforeS2VisionSnap_ms));
	(*mapSettingUnsignedInt).insert(pair<string, unsigned int*>("DelayBeforeSetupVisionSnap_ms", &smCustomerSetting->DelayBeforeSetupVisionSnap_ms));
	(*mapSettingUnsignedInt).insert(pair<string, unsigned int*>("DelayBeforeBottomVisionSnap_ms", &smCustomerSetting->DelayBeforeBottomVisionSnap_ms));
	(*mapSettingUnsignedInt).insert(pair<string, unsigned int*>("DelayBeforeS3VisionSnap_ms", &smCustomerSetting->DelayBeforeS3VisionSnap_ms));
	(*mapSettingUnsignedInt).insert(pair<string, unsigned int*>("DelayAfterS2S3VisionGrabDone_ms", &smCustomerSetting->DelayAfterS2S3VisionGrabDone_ms));
	(*mapSettingUnsignedInt).insert(pair<string, unsigned int*>("DelayBeforeS1VisionSnap_ms", &smCustomerSetting->DelayBeforeS1VisionSnap_ms));
	(*mapSettingUnsignedInt).insert(pair<string, unsigned int*>("DelayAfterS1VisionGrabDone_ms", &smCustomerSetting->DelayAfterS1VisionGrabDone_ms));
	(*mapSettingUnsignedInt).insert(pair<string, unsigned int*>("DelayBeforeOutputVisionSnap_ms", &smCustomerSetting->DelayBeforeOutputVisionSnap_ms));
	(*mapSettingUnsignedInt).insert(pair<string, unsigned int*>("DelayAfterOutputVisionSnap_ms", &smCustomerSetting->DelayAfterOutputVisionSnap_ms));

	(*mapSettingUnsignedInt).insert(pair<string, unsigned int*>("DelayForCheckingDiffuserActuatorOnOffCompletelyBeforeNextStep_ms", &smCustomerSetting->DelayForCheckingDiffuserActuatorOnOffCompletelyBeforeNextStep_ms));

	(*mapSettingUnsignedInt).insert(pair<string, unsigned int*>("DelayForCheckingInputTableVacuumOnOffCompletelyBeforeNextStep_ms", &smCustomerSetting->DelayForCheckingInputTableVacuumOnOffCompletelyBeforeNextStep_ms));
	(*mapSettingUnsignedInt).insert(pair<string, unsigned int*>("DelayForCheckingOutputTableVacuumOnOffCompletelyBeforeNextStep_ms", &smCustomerSetting->DelayForCheckingOutputTableVacuumOnOffCompletelyBeforeNextStep_ms));
	
	(*mapSettingUnsignedInt).insert(pair<string, unsigned int*>("InputVisionRetryCountAfterFail", &smCustomerSetting->InputVisionRetryCountAfterFail));
	(*mapSettingUnsignedInt).insert(pair<string, unsigned int*>("InputVisionContinuousFailCountToTriggerAlarm", &smCustomerSetting->InputVisionContinuousFailCountToTriggerAlarm));
	
	(*mapSettingUnsignedInt).insert(pair<string, unsigned int*>("SetupVisionRetryCountAfterFail", &smCustomerSetting->SetupVisionRetryCountAfterFail));
	(*mapSettingUnsignedInt).insert(pair<string, unsigned int*>("SetupVisionContinuousFailCountToTriggerAlarm", &smCustomerSetting->SetupVisionContinuousFailCountToTriggerAlarm));

	(*mapSettingUnsignedInt).insert(pair<string, unsigned int*>("S2VisionRetryCountAfterFail", &smCustomerSetting->S2VisionRetryCountAfterFail));
	(*mapSettingUnsignedInt).insert(pair<string, unsigned int*>("S2VisionContinuousFailCountToTriggerAlarm", &smCustomerSetting->S2VisionContinuousFailCountToTriggerAlarm));
	
	(*mapSettingUnsignedInt).insert(pair<string, unsigned int*>("S2FacetVisionRetryCountAfterFail", &smCustomerSetting->S2FacetVisionRetryCountAfterFail));
	(*mapSettingUnsignedInt).insert(pair<string, unsigned int*>("S2FacetVisionContinuousFailCountToTriggerAlarm", &smCustomerSetting->S2FacetVisionContinuousFailCountToTriggerAlarm));

	(*mapSettingUnsignedInt).insert(pair<string, unsigned int*>("BottomVisionRetryCountAfterFail", &smCustomerSetting->BottomVisionRetryCountAfterFail));
	(*mapSettingUnsignedInt).insert(pair<string, unsigned int*>("BottomVisionContinuousFailCountToTriggerAlarm", &smCustomerSetting->BottomVisionContinuousFailCountToTriggerAlarm));
	
	(*mapSettingUnsignedInt).insert(pair<string, unsigned int*>("S3VisionRetryCountAfterFail", &smCustomerSetting->S3VisionRetryCountAfterFail));
	(*mapSettingUnsignedInt).insert(pair<string, unsigned int*>("S3VisionContinuousFailCountToTriggerAlarm", &smCustomerSetting->S3VisionContinuousFailCountToTriggerAlarm));

	(*mapSettingUnsignedInt).insert(pair<string, unsigned int*>("S3FacetVisionRetryCountAfterFail", &smCustomerSetting->S3FacetVisionRetryCountAfterFail));
	(*mapSettingUnsignedInt).insert(pair<string, unsigned int*>("S3FacetVisionContinuousFailCountToTriggerAlarm", &smCustomerSetting->S3FacetVisionContinuousFailCountToTriggerAlarm));

	(*mapSettingUnsignedInt).insert(pair<string, unsigned int*>("OutputVisionRetryCountAfterFail", &smCustomerSetting->OutputVisionRetryCountAfterFail));
	(*mapSettingUnsignedInt).insert(pair<string, unsigned int*>("OutputVisionContinuousFailCountToTriggerAlarm", &smCustomerSetting->OutputVisionContinuousFailCountToTriggerAlarm));

	(*mapSettingUnsignedInt).insert(pair<string, unsigned int*>("PickupHeadRetryPickingNo", &smCustomerSetting->PickupHeadRetryPickingNo));
	(*mapSettingUnsignedInt).insert(pair<string, unsigned int*>("PickupHeadRetryPlacingNo", &smCustomerSetting->PickupHeadRetryPlacingNo));

	(*mapSettingUnsignedInt).insert(pair<string, unsigned int*>("DelayForPickupHeadAtDownPositionWithPurgingAtInput_ms", &smCustomerSetting->DelayForPickupHeadAtDownPositionWithPurgingAtInput_ms));
	(*mapSettingUnsignedInt).insert(pair<string, unsigned int*>("DelayForPickupHeadPurgeAtDownPositionWhenPickFail", &smCustomerSetting->DelayForPickupHeadPurgeAtDownPositionWhenPickFail));
	
	
	return 0;
}

int MapSettingUnsignedIntCustomer(map<string, unsigned int*> *mapSettingUnsignedInt, CustomerSharedMemorySetting *customerSharedMemorySetting)
{
	return 0;
}

int MapSettingDoublePlatform(map<string, double*> *mapSettingDouble, CustomerSharedMemorySetting *customerSharedMemorySetting)
{
	return 0;
}

int MapSettingDoubleProduct(map<string, double*> *mapSettingDouble, CustomerSharedMemorySetting *customerSharedMemorySetting)
{
	(*mapSettingDouble).insert(pair<string, double*>("PickUpHead1FlowRate", &smCustomerSetting->PickUpHead1FlowRate));
	(*mapSettingDouble).insert(pair<string, double*>("PickUpHead1Force", &smCustomerSetting->PickUpHead1Force));
	(*mapSettingDouble).insert(pair<string, double*>("PickUpHead1Pressure", &smCustomerSetting->PickUpHead1Pressure));
	(*mapSettingDouble).insert(pair<string, double*>("PickUpHead2FlowRate", &smCustomerSetting->PickUpHead2FlowRate));
	(*mapSettingDouble).insert(pair<string, double*>("PickUpHead2Force", &smCustomerSetting->PickUpHead2Force));
	(*mapSettingDouble).insert(pair<string, double*>("PickUpHead2Pressure", &smCustomerSetting->PickUpHead2Pressure));

	(*mapSettingDouble).insert(pair<string, double*>("PickUpHead1PlaceFlowRate", &smCustomerSetting->PickUpHead1PlaceFlowRate));
	(*mapSettingDouble).insert(pair<string, double*>("PickUpHead1PlaceForce", &smCustomerSetting->PickUpHead1PlaceForce));
	(*mapSettingDouble).insert(pair<string, double*>("PickUpHead1PlacePressure", &smCustomerSetting->PickUpHead1PlacePressure));
	(*mapSettingDouble).insert(pair<string, double*>("PickUpHead2PlaceFlowRate", &smCustomerSetting->PickUpHead2PlaceFlowRate));
	(*mapSettingDouble).insert(pair<string, double*>("PickUpHead2PlaceForce", &smCustomerSetting->PickUpHead2PlaceForce));
	(*mapSettingDouble).insert(pair<string, double*>("PickUpHead2PlacePressure", &smCustomerSetting->PickUpHead2PlacePressure));
	return 0;
}

int MapSettingDoubleCustomer(map<string, double*> *mapSettingDouble, CustomerSharedMemorySetting *customerSharedMemorySetting)
{
	return 0;
}

int MapSettingVisionInfoIntProduct(map<string, int*> *mapSettingVisionInfoInt, CustomerSharedMemorySetting *customerSharedMemorySetting)
{
	char chVariable[256];
	memset(chVariable, 0, sizeof(chVariable));
	for (int i = 0; i < 10; i++)
	{
		sprintf_s(chVariable, sizeof(chVariable), "InputVision%uNo", i);
		(*mapSettingVisionInfoInt).insert(pair<string, int*>(chVariable, &smCustomerSetting->InputVision[i].No));
		sprintf_s(chVariable, sizeof(chVariable), "InputVision%uEnable", i);
		(*mapSettingVisionInfoInt).insert(pair<string, int*>(chVariable, &smCustomerSetting->InputVision[i].Enable));
		sprintf_s(chVariable, sizeof(chVariable), "InputVision%uFocusOffset_um", i);
		(*mapSettingVisionInfoInt).insert(pair<string, int*>(chVariable, &smCustomerSetting->InputVision[i].FocusOffset_um));
		sprintf_s(chVariable, sizeof(chVariable), "InputVision%uThetaOffset_mDegree", i);
		(*mapSettingVisionInfoInt).insert(pair<string, int*>(chVariable, &smCustomerSetting->InputVision[i].ThetaOffset_mDegree));
		sprintf_s(chVariable, sizeof(chVariable), "InputVision%uXOffset_um", i);
		(*mapSettingVisionInfoInt).insert(pair<string, int*>(chVariable, &smCustomerSetting->InputVision[i].XOffset_um));
		sprintf_s(chVariable, sizeof(chVariable), "InputVision%uYOffset_um", i);
		(*mapSettingVisionInfoInt).insert(pair<string, int*>(chVariable, &smCustomerSetting->InputVision[i].YOffset_um));
		sprintf_s(chVariable, sizeof(chVariable), "InputVision%uResult", i);
		(*mapSettingVisionInfoInt).insert(pair<string, int*>(chVariable, &smCustomerSetting->InputVision[i].Result));
	}
	memset(chVariable, 0, sizeof(chVariable));
	for (int i = 0; i < 10; i++)
	{
		sprintf_s(chVariable, sizeof(chVariable), "S2Vision%uNo", i);
		(*mapSettingVisionInfoInt).insert(pair<string, int*>(chVariable, &smCustomerSetting->S2Vision[i].No));
		sprintf_s(chVariable, sizeof(chVariable), "S2Vision%uEnable", i);
		(*mapSettingVisionInfoInt).insert(pair<string, int*>(chVariable, &smCustomerSetting->S2Vision[i].Enable));
		sprintf_s(chVariable, sizeof(chVariable), "S2Vision%uFocusOffset_um", i);
		(*mapSettingVisionInfoInt).insert(pair<string, int*>(chVariable, &smCustomerSetting->S2Vision[i].FocusOffset_um));
		sprintf_s(chVariable, sizeof(chVariable), "S2Vision%uThetaOffset_mDegree", i);
		(*mapSettingVisionInfoInt).insert(pair<string, int*>(chVariable, &smCustomerSetting->S2Vision[i].ThetaOffset_mDegree));
		sprintf_s(chVariable, sizeof(chVariable), "S2Vision%uXOffset_um", i);
		(*mapSettingVisionInfoInt).insert(pair<string, int*>(chVariable, &smCustomerSetting->S2Vision[i].XOffset_um));
		sprintf_s(chVariable, sizeof(chVariable), "S2Vision%uYOffset_um", i);
		(*mapSettingVisionInfoInt).insert(pair<string, int*>(chVariable, &smCustomerSetting->S2Vision[i].YOffset_um));
		sprintf_s(chVariable, sizeof(chVariable), "S2Vision%uResult", i);
		(*mapSettingVisionInfoInt).insert(pair<string, int*>(chVariable, &smCustomerSetting->S2Vision[i].Result));

	}
	memset(chVariable, 0, sizeof(chVariable));
	for (int i = 0; i < 10; i++)
	{
		sprintf_s(chVariable, sizeof(chVariable), "S2FacetVision%uNo", i);
		(*mapSettingVisionInfoInt).insert(pair<string, int*>(chVariable, &smCustomerSetting->S2FacetVision[i].No));
		sprintf_s(chVariable, sizeof(chVariable), "S2FacetVision%uEnable", i);
		(*mapSettingVisionInfoInt).insert(pair<string, int*>(chVariable, &smCustomerSetting->S2FacetVision[i].Enable));
		sprintf_s(chVariable, sizeof(chVariable), "S2FacetVision%uFocusOffset_um", i);
		(*mapSettingVisionInfoInt).insert(pair<string, int*>(chVariable, &smCustomerSetting->S2FacetVision[i].FocusOffset_um));
		sprintf_s(chVariable, sizeof(chVariable), "S2FacetVision%uThetaOffset_mDegree", i);
		(*mapSettingVisionInfoInt).insert(pair<string, int*>(chVariable, &smCustomerSetting->S2FacetVision[i].ThetaOffset_mDegree));
		sprintf_s(chVariable, sizeof(chVariable), "S2FacetVision%uXOffset_um", i);
		(*mapSettingVisionInfoInt).insert(pair<string, int*>(chVariable, &smCustomerSetting->S2FacetVision[i].XOffset_um));
		sprintf_s(chVariable, sizeof(chVariable), "S2FacetVision%uYOffset_um", i);
		(*mapSettingVisionInfoInt).insert(pair<string, int*>(chVariable, &smCustomerSetting->S2FacetVision[i].YOffset_um));
		sprintf_s(chVariable, sizeof(chVariable), "S2FacetVision%uResult", i);
		(*mapSettingVisionInfoInt).insert(pair<string, int*>(chVariable, &smCustomerSetting->S2FacetVision[i].Result));

	}
	memset(chVariable, 0, sizeof(chVariable));
	for (int i = 0; i < 10; i++)
	{
		sprintf_s(chVariable, sizeof(chVariable), "BottomVision%uNo", i);
		(*mapSettingVisionInfoInt).insert(pair<string, int*>(chVariable, &smCustomerSetting->BottomVision[i].No));
		sprintf_s(chVariable, sizeof(chVariable), "BottomVision%uEnable", i);
		(*mapSettingVisionInfoInt).insert(pair<string, int*>(chVariable, &smCustomerSetting->BottomVision[i].Enable));
		sprintf_s(chVariable, sizeof(chVariable), "BottomVision%uFocusOffset_um", i);
		(*mapSettingVisionInfoInt).insert(pair<string, int*>(chVariable, &smCustomerSetting->BottomVision[i].FocusOffset_um));
		sprintf_s(chVariable, sizeof(chVariable), "BottomVision%uThetaOffset_mDegree", i);
		(*mapSettingVisionInfoInt).insert(pair<string, int*>(chVariable, &smCustomerSetting->BottomVision[i].ThetaOffset_mDegree));
		sprintf_s(chVariable, sizeof(chVariable), "BottomVision%uXOffset_um", i);
		(*mapSettingVisionInfoInt).insert(pair<string, int*>(chVariable, &smCustomerSetting->BottomVision[i].XOffset_um));
		sprintf_s(chVariable, sizeof(chVariable), "BottomVision%uYOffset_um", i);
		(*mapSettingVisionInfoInt).insert(pair<string, int*>(chVariable, &smCustomerSetting->BottomVision[i].YOffset_um));
		sprintf_s(chVariable, sizeof(chVariable), "BottomVision%uResult", i);
		(*mapSettingVisionInfoInt).insert(pair<string, int*>(chVariable, &smCustomerSetting->BottomVision[i].Result));
		sprintf_s(chVariable, sizeof(chVariable), "BottomVision%uEnableDiffuser", i);
		(*mapSettingVisionInfoInt).insert(pair<string, int*>(chVariable, &smCustomerSetting->BottomVision[i].EnableDiffuser));

	}
	memset(chVariable, 0, sizeof(chVariable));
	for (int i = 0; i < 10; i++)
	{
		sprintf_s(chVariable, sizeof(chVariable), "S1Vision%uNo", i);
		(*mapSettingVisionInfoInt).insert(pair<string, int*>(chVariable, &smCustomerSetting->S1Vision[i].No));
		sprintf_s(chVariable, sizeof(chVariable), "S1Vision%uEnable", i);
		(*mapSettingVisionInfoInt).insert(pair<string, int*>(chVariable, &smCustomerSetting->S1Vision[i].Enable));
		sprintf_s(chVariable, sizeof(chVariable), "S1Vision%uFocusOffset_um", i);
		(*mapSettingVisionInfoInt).insert(pair<string, int*>(chVariable, &smCustomerSetting->S1Vision[i].FocusOffset_um));
		sprintf_s(chVariable, sizeof(chVariable), "S1Vision%uThetaOffset_mDegree", i);
		(*mapSettingVisionInfoInt).insert(pair<string, int*>(chVariable, &smCustomerSetting->S1Vision[i].ThetaOffset_mDegree));
		sprintf_s(chVariable, sizeof(chVariable), "S1Vision%uXOffset_um", i);
		(*mapSettingVisionInfoInt).insert(pair<string, int*>(chVariable, &smCustomerSetting->S1Vision[i].XOffset_um));
		sprintf_s(chVariable, sizeof(chVariable), "S1Vision%uYOffset_um", i);
		(*mapSettingVisionInfoInt).insert(pair<string, int*>(chVariable, &smCustomerSetting->S1Vision[i].YOffset_um));
		sprintf_s(chVariable, sizeof(chVariable), "S1Vision%uResult", i);
		(*mapSettingVisionInfoInt).insert(pair<string, int*>(chVariable, &smCustomerSetting->S1Vision[i].Result));

	}
	memset(chVariable, 0, sizeof(chVariable));
	for (int i = 0; i < 10; i++)
	{
		sprintf_s(chVariable, sizeof(chVariable), "S3Vision%uNo", i);
		(*mapSettingVisionInfoInt).insert(pair<string, int*>(chVariable, &smCustomerSetting->S3Vision[i].No));
		sprintf_s(chVariable, sizeof(chVariable), "S3Vision%uEnable", i);
		(*mapSettingVisionInfoInt).insert(pair<string, int*>(chVariable, &smCustomerSetting->S3Vision[i].Enable));
		sprintf_s(chVariable, sizeof(chVariable), "S3Vision%uFocusOffset_um", i);
		(*mapSettingVisionInfoInt).insert(pair<string, int*>(chVariable, &smCustomerSetting->S3Vision[i].FocusOffset_um));
		sprintf_s(chVariable, sizeof(chVariable), "S3Vision%uThetaOffset_mDegree", i);
		(*mapSettingVisionInfoInt).insert(pair<string, int*>(chVariable, &smCustomerSetting->S3Vision[i].ThetaOffset_mDegree));
		sprintf_s(chVariable, sizeof(chVariable), "S3Vision%uXOffset_um", i);
		(*mapSettingVisionInfoInt).insert(pair<string, int*>(chVariable, &smCustomerSetting->S3Vision[i].XOffset_um));
		sprintf_s(chVariable, sizeof(chVariable), "S3Vision%uYOffset_um", i);
		(*mapSettingVisionInfoInt).insert(pair<string, int*>(chVariable, &smCustomerSetting->S3Vision[i].YOffset_um));
		sprintf_s(chVariable, sizeof(chVariable), "S3Vision%uResult", i);
		(*mapSettingVisionInfoInt).insert(pair<string, int*>(chVariable, &smCustomerSetting->S3Vision[i].Result));

	}
	memset(chVariable, 0, sizeof(chVariable));
	for (int i = 0; i < 10; i++)
	{
		sprintf_s(chVariable, sizeof(chVariable), "S3FacetVision%uNo", i);
		(*mapSettingVisionInfoInt).insert(pair<string, int*>(chVariable, &smCustomerSetting->S3FacetVision[i].No));
		sprintf_s(chVariable, sizeof(chVariable), "S3FacetVision%uEnable", i);
		(*mapSettingVisionInfoInt).insert(pair<string, int*>(chVariable, &smCustomerSetting->S3FacetVision[i].Enable));
		sprintf_s(chVariable, sizeof(chVariable), "S3FacetVision%uFocusOffset_um", i);
		(*mapSettingVisionInfoInt).insert(pair<string, int*>(chVariable, &smCustomerSetting->S3FacetVision[i].FocusOffset_um));
		sprintf_s(chVariable, sizeof(chVariable), "S3FacetVision%uThetaOffset_mDegree", i);
		(*mapSettingVisionInfoInt).insert(pair<string, int*>(chVariable, &smCustomerSetting->S3FacetVision[i].ThetaOffset_mDegree));
		sprintf_s(chVariable, sizeof(chVariable), "S3FacetVision%uXOffset_um", i);
		(*mapSettingVisionInfoInt).insert(pair<string, int*>(chVariable, &smCustomerSetting->S3FacetVision[i].XOffset_um));
		sprintf_s(chVariable, sizeof(chVariable), "S3FacetVision%uYOffset_um", i);
		(*mapSettingVisionInfoInt).insert(pair<string, int*>(chVariable, &smCustomerSetting->S3FacetVision[i].YOffset_um));
		sprintf_s(chVariable, sizeof(chVariable), "S3FacetVision%uResult", i);
		(*mapSettingVisionInfoInt).insert(pair<string, int*>(chVariable, &smCustomerSetting->S3FacetVision[i].Result));

	}
	memset(chVariable, 0, sizeof(chVariable));
	for (int i = 0; i < 10; i++)
	{
		sprintf_s(chVariable, sizeof(chVariable), "OutputVision%uNo", i);
		(*mapSettingVisionInfoInt).insert(pair<string, int*>(chVariable, &smCustomerSetting->OutputVision[i].No));
		sprintf_s(chVariable, sizeof(chVariable), "OutputVision%uEnable", i);
		(*mapSettingVisionInfoInt).insert(pair<string, int*>(chVariable, &smCustomerSetting->OutputVision[i].Enable));
		sprintf_s(chVariable, sizeof(chVariable), "OutputVision%uFocusOffset_um", i);
		(*mapSettingVisionInfoInt).insert(pair<string, int*>(chVariable, &smCustomerSetting->OutputVision[i].FocusOffset_um));
		sprintf_s(chVariable, sizeof(chVariable), "OutputVision%uThetaOffset_mDegree", i);
		(*mapSettingVisionInfoInt).insert(pair<string, int*>(chVariable, &smCustomerSetting->OutputVision[i].ThetaOffset_mDegree));
		sprintf_s(chVariable, sizeof(chVariable), "OutputVision%uXOffset_um", i);
		(*mapSettingVisionInfoInt).insert(pair<string, int*>(chVariable, &smCustomerSetting->OutputVision[i].XOffset_um));
		sprintf_s(chVariable, sizeof(chVariable), "OutputVision%uYOffset_um", i);
		(*mapSettingVisionInfoInt).insert(pair<string, int*>(chVariable, &smCustomerSetting->OutputVision[i].YOffset_um));
		sprintf_s(chVariable, sizeof(chVariable), "OutputVision%uResult", i);
		(*mapSettingVisionInfoInt).insert(pair<string, int*>(chVariable, &smCustomerSetting->OutputVision[i].Result));
	}
	memset(chVariable, 0, sizeof(chVariable));
	return 0;
}

int MapTeachPointSignedLongPlatform(map<string, signed long*> *mapTeachPointSignedLong, CustomerSharedMemoryTeachPoint *customerTeachPoint)
{
	return 0;
}
int MapTeachPointSignedLongProduct(map<string, signed long*> *mapTeachPointSignedLong, CustomerSharedMemoryTeachPoint *customerTeachPoint)
{
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("InputTrayTableXAxisForwardLimitPosition", &smCustomerTeachPoint->InputTrayTableXAxisForwardLimitPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("InputTrayTableXAxisReverseLimitPosition", &smCustomerTeachPoint->InputTrayTableXAxisReverseLimitPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("InputTrayTableXAxisAtInputTrayStackerLoadPosition", &smCustomerTeachPoint->InputTrayTableXAxisAtInputTrayStackerLoadPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("InputTrayTableXAxisAtInputTrayStackerUnloadPosition", &smCustomerTeachPoint->InputTrayTableXAxisAtInputTrayStackerUnloadPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("InputTrayTableXAxisAtInputTrayTableCenterPosition", &smCustomerTeachPoint->InputTrayTableXAxisAtInputTrayTableCenterPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("InputTrayTableXAxisAtInputSideWallVisionDotGridPosition", &smCustomerTeachPoint->InputTrayTableXAxisAtInputSideWallVisionDotGridPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("InputTrayTableXAxisAtInputBottomAndVisionDotGridPosition", &smCustomerTeachPoint->InputTrayTableXAxisAtInputBottomAndVisionDotGridPosition));

	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("InputTrayTableYAxisForwardLimitPosition", &smCustomerTeachPoint->InputTrayTableYAxisForwardLimitPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("InputTrayTableYAxisReverseLimitPosition", &smCustomerTeachPoint->InputTrayTableYAxisReverseLimitPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("InputTrayTableYAxisAtInputTrayStackerLoadPosition", &smCustomerTeachPoint->InputTrayTableYAxisAtInputTrayStackerLoadPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("InputTrayTableYAxisAtInputTrayStackerUnloadPosition", &smCustomerTeachPoint->InputTrayTableYAxisAtInputTrayStackerUnloadPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("InputTrayTableYAxisAtInputTrayTableCenterPosition", &smCustomerTeachPoint->InputTrayTableYAxisAtInputTrayTableCenterPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("InputTrayTableYAxisAtInputBottomDotGridPosition", &smCustomerTeachPoint->InputTrayTableYAxisAtInputBottomDotGridPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("InputTrayTableYAxisAtInputVisionCalibrationPosition", &smCustomerTeachPoint->InputTrayTableYAxisAtInputVisionCalibrationPosition));

	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("InputTrayTableZAxisForwardLimitPosition", &smCustomerTeachPoint->InputTrayTableZAxisForwardLimitPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("InputTrayTableZAxisReverseLimitPosition", &smCustomerTeachPoint->InputTrayTableZAxisReverseLimitPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("InputTrayTableZAxisDownPosition", &smCustomerTeachPoint->InputTrayTableZAxisDownPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("InputTrayTableZAxisAtInputTrayStackerLoadingPosition", &smCustomerTeachPoint->InputTrayTableZAxisAtInputTrayStackerLoadingPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("InputTrayTableZAxisAtInputTrayStackerSingulationPosition", &smCustomerTeachPoint->InputTrayTableZAxisAtInputTrayStackerSingulationPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("InputTrayTableZAxisAtInputTrayStackerUnloadingPosition", &smCustomerTeachPoint->InputTrayTableZAxisAtInputTrayStackerUnloadingPosition));

	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("OutputTrayTableXAxisForwardLimitPosition", &smCustomerTeachPoint->OutputTrayTableXAxisForwardLimitPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("OutputTrayTableXAxisReverseLimitPosition", &smCustomerTeachPoint->OutputTrayTableXAxisReverseLimitPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("OutputTrayTableXAxisAtOutputTrayStackerLoadPosition", &smCustomerTeachPoint->OutputTrayTableXAxisAtOutputTrayStackerLoadPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("OutputTrayTableXAxisAtOutputTrayStackerUnloadPosition", &smCustomerTeachPoint->OutputTrayTableXAxisAtOutputTrayStackerUnloadPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("OutputTrayTableXAxisAtOutputTrayTableCenterPosition", &smCustomerTeachPoint->OutputTrayTableXAxisAtOutputTrayTableCenterPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("OutputTrayTableXAxisAtRejectTrayCenterPosition", &smCustomerTeachPoint->OutputTrayTableXAxisAtRejectTrayCenterPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("OutputTrayTableXAxisAtOutputTrayTableManualLoadUnloadPosition", &smCustomerTeachPoint->OutputTrayTableXAxisAtOutputTrayTableManualLoadUnloadPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("OutputTrayTableXAxisAtOutputVisionCalibrationPosition", &smCustomerTeachPoint->OutputTrayTableXAxisAtOutputVisionCalibrationPosition));

	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("OutputTrayTableYAxisForwardLimitPosition", &smCustomerTeachPoint->OutputTrayTableYAxisForwardLimitPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("OutputTrayTableYAxisReverseLimitPosition", &smCustomerTeachPoint->OutputTrayTableYAxisReverseLimitPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("OutputTrayTableYAxisAtOutputTrayStackerLoadPosition", &smCustomerTeachPoint->OutputTrayTableYAxisAtOutputTrayStackerLoadPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("OutputTrayTableYAxisAtOutputTrayStackerUnloadPosition", &smCustomerTeachPoint->OutputTrayTableYAxisAtOutputTrayStackerUnloadPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("OutputTrayTableYAxisAtOutputTrayTableCenterPosition", &smCustomerTeachPoint->OutputTrayTableYAxisAtOutputTrayTableCenterPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("OutputTrayTableYAxisAtRejectTrayCenterPosition", &smCustomerTeachPoint->OutputTrayTableYAxisAtRejectTrayCenterPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("OutputTrayTableYAxisAtOutputTrayTableManualLoadUnloadPosition", &smCustomerTeachPoint->OutputTrayTableYAxisAtOutputTrayTableManualLoadUnloadPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("OutputTrayTableYAxisAtOutputVisionCalibrationPosition", &smCustomerTeachPoint->OutputTrayTableYAxisAtOutputVisionCalibrationPosition));

	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("OutputTrayTableZAxisForwardLimitPosition", &smCustomerTeachPoint->OutputTrayTableZAxisForwardLimitPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("OutputTrayTableZAxisReverseLimitPosition", &smCustomerTeachPoint->OutputTrayTableZAxisReverseLimitPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("OutputTrayTableZAxisDownPosition", &smCustomerTeachPoint->OutputTrayTableZAxisDownPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("OutputTrayTableZAxisAtOutputTrayStackerLoadingPosition", &smCustomerTeachPoint->OutputTrayTableZAxisAtOutputTrayStackerLoadingPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("OutputTrayTableZAxisAtOutputTrayStackerSingulationPosition", &smCustomerTeachPoint->OutputTrayTableZAxisAtOutputTrayStackerSingulationPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("OutputTrayTableZAxisAtOutputTrayStackerUnloadingPosition", &smCustomerTeachPoint->OutputTrayTableZAxisAtOutputTrayStackerUnloadingPosition));

	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("PickAndPlace1XAxisForwardLimitPosition", &smCustomerTeachPoint->PickAndPlace1XAxisForwardLimitPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("PickAndPlace1XAxisReverseLimitPosition", &smCustomerTeachPoint->PickAndPlace1XAxisReverseLimitPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("PickAndPlace1XAxisInputPosition", &smCustomerTeachPoint->PickAndPlace1XAxisInputPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("PickAndPlace1XAxisAtS1AndBottomVisionPosition", &smCustomerTeachPoint->PickAndPlace1XAxisAtS1AndBottomVisionPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("PickAndPlace1XAxisAtS2AndS3VisionPosition", &smCustomerTeachPoint->PickAndPlace1XAxisAtS2AndS3VisionPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("PickAndPlace1XAxisOutputPosition", &smCustomerTeachPoint->PickAndPlace1XAxisOutputPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("PickAndPlace1XAxisParkingPosition", &smCustomerTeachPoint->PickAndPlace1XAxisParkingPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("PickAndPlace1XAxisAwayOutputPosition", &smCustomerTeachPoint->PickAndPlace1XAxisAwayOutputPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("PickAndPlace1XAxisAwayInputPosition", &smCustomerTeachPoint->PickAndPlace1XAxisAwayInputPosition));

	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("PickAndPlace1YAxisForwardLimitPosition", &smCustomerTeachPoint->PickAndPlace1YAxisForwardLimitPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("PickAndPlace1YAxisReverseLimitPosition", &smCustomerTeachPoint->PickAndPlace1YAxisReverseLimitPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("PickAndPlace1YAxisInputPosition", &smCustomerTeachPoint->PickAndPlace1YAxisInputPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("PickAndPlace1YAxisAtS1AndBottomVisionPosition", &smCustomerTeachPoint->PickAndPlace1YAxisAtS1AndBottomVisionPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("PickAndPlace1YAxisAtS2AndS3VisionPosition", &smCustomerTeachPoint->PickAndPlace1YAxisAtS2AndS3VisionPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("PickAndPlace1YAxisOutputPosition", &smCustomerTeachPoint->PickAndPlace1YAxisOutputPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("PickAndPlace1YAxisStandbyPosition", &smCustomerTeachPoint->PickAndPlace1YAxisStandbyPosition));

	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("PickAndPlace1ZAxisForwardLimitPosition", &smCustomerTeachPoint->PickAndPlace1ZAxisForwardLimitPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("PickAndPlace1ZAxisReverseLimitPosition", &smCustomerTeachPoint->PickAndPlace1ZAxisReverseLimitPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("PickAndPlace1ZAxisUpPosition", &smCustomerTeachPoint->PickAndPlace1ZAxisUpPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("PickAndPlace1ZAxisUpPosition1", &smCustomerTeachPoint->PickAndPlace1ZAxisUpPosition1));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("PickAndPlace1ZAxisUpPosition2", &smCustomerTeachPoint->PickAndPlace1ZAxisUpPosition2));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("PickAndPlace1ZAxisAtInputTrayTouchingPosition", &smCustomerTeachPoint->PickAndPlace1ZAxisAtInputTrayTouchingPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("PickAndPlace1ZAxisAtInputTrayDownPosition", &smCustomerTeachPoint->PickAndPlace1ZAxisAtInputTrayDownPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("PickAndPlace1ZAxisAtInputTraySoftlandingPosition", &smCustomerTeachPoint->PickAndPlace1ZAxisAtInputTraySoftlandingPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("PickAndPlace1ZAxisAtOutputTrayTouchingPosition", &smCustomerTeachPoint->PickAndPlace1ZAxisAtOutputTrayTouchingPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("PickAndPlace1ZAxisAtOutputTrayDownPosition", &smCustomerTeachPoint->PickAndPlace1ZAxisAtOutputTrayDownPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("PickAndPlace1ZAxisAtOutputTraySoftlandingPosition", &smCustomerTeachPoint->PickAndPlace1ZAxisAtOutputTraySoftlandingPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("PickAndPlace1ZAxisAtVisionFocusPosition", &smCustomerTeachPoint->PickAndPlace1ZAxisAtVisionFocusPosition));

	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("PickAndPlace1ThetaAxisForwardLimitPosition", &smCustomerTeachPoint->PickAndPlace1ThetaAxisForwardLimitPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("PickAndPlace1ThetaAxisReverseLimitPosition", &smCustomerTeachPoint->PickAndPlace1ThetaAxisReverseLimitPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("PickAndPlace1ThetaAxisStandbyPosition", &smCustomerTeachPoint->PickAndPlace1ThetaAxisStandbyPosition));

	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("PickAndPlace2XAxisForwardLimitPosition", &smCustomerTeachPoint->PickAndPlace2XAxisForwardLimitPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("PickAndPlace2XAxisReverseLimitPosition", &smCustomerTeachPoint->PickAndPlace2XAxisReverseLimitPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("PickAndPlace2XAxisInputPosition", &smCustomerTeachPoint->PickAndPlace2XAxisInputPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("PickAndPlace2XAxisAtS1AndBottomVisionPosition", &smCustomerTeachPoint->PickAndPlace2XAxisAtS1AndBottomVisionPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("PickAndPlace2XAxisAtS2AndS3VisionPosition", &smCustomerTeachPoint->PickAndPlace2XAxisAtS2AndS3VisionPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("PickAndPlace2XAxisOutputPosition", &smCustomerTeachPoint->PickAndPlace2XAxisOutputPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("PickAndPlace2XAxisParkingPosition", &smCustomerTeachPoint->PickAndPlace2XAxisParkingPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("PickAndPlace2XAxisAwayOutputPosition", &smCustomerTeachPoint->PickAndPlace2XAxisAwayOutputPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("PickAndPlace2XAxisAwayInputPosition", &smCustomerTeachPoint->PickAndPlace2XAxisAwayInputPosition));

	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("PickAndPlace2YAxisForwardLimitPosition", &smCustomerTeachPoint->PickAndPlace2YAxisForwardLimitPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("PickAndPlace2YAxisReverseLimitPosition", &smCustomerTeachPoint->PickAndPlace2YAxisReverseLimitPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("PickAndPlace2YAxisInputPosition", &smCustomerTeachPoint->PickAndPlace2YAxisInputPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("PickAndPlace2YAxisAtS1AndBottomVisionPosition", &smCustomerTeachPoint->PickAndPlace2YAxisAtS1AndBottomVisionPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("PickAndPlace2YAxisAtS2AndS3VisionPosition", &smCustomerTeachPoint->PickAndPlace2YAxisAtS2AndS3VisionPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("PickAndPlace2YAxisOutputPosition", &smCustomerTeachPoint->PickAndPlace2YAxisOutputPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("PickAndPlace2YAxisStandbyPosition", &smCustomerTeachPoint->PickAndPlace2YAxisStandbyPosition));

	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("PickAndPlace2ZAxisForwardLimitPosition", &smCustomerTeachPoint->PickAndPlace2ZAxisForwardLimitPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("PickAndPlace2ZAxisReverseLimitPosition", &smCustomerTeachPoint->PickAndPlace2ZAxisReverseLimitPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("PickAndPlace2ZAxisUpPosition", &smCustomerTeachPoint->PickAndPlace2ZAxisUpPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("PickAndPlace2ZAxisUpPosition1", &smCustomerTeachPoint->PickAndPlace2ZAxisUpPosition1));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("PickAndPlace2ZAxisUpPosition2", &smCustomerTeachPoint->PickAndPlace2ZAxisUpPosition2));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("PickAndPlace2ZAxisAtInputTrayTouchingPosition", &smCustomerTeachPoint->PickAndPlace2ZAxisAtInputTrayTouchingPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("PickAndPlace2ZAxisAtInputTrayDownPosition", &smCustomerTeachPoint->PickAndPlace2ZAxisAtInputTrayDownPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("PickAndPlace2ZAxisAtInputTraySoftlandingPosition", &smCustomerTeachPoint->PickAndPlace2ZAxisAtInputTraySoftlandingPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("PickAndPlace2ZAxisAtOutputTrayTouchingPosition", &smCustomerTeachPoint->PickAndPlace2ZAxisAtOutputTrayTouchingPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("PickAndPlace2ZAxisAtOutputTrayDownPosition", &smCustomerTeachPoint->PickAndPlace2ZAxisAtOutputTrayDownPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("PickAndPlace2ZAxisAtOutputTraySoftlandingPosition", &smCustomerTeachPoint->PickAndPlace2ZAxisAtOutputTraySoftlandingPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("PickAndPlace2ZAxisAtVisionFocusPosition", &smCustomerTeachPoint->PickAndPlace2ZAxisAtVisionFocusPosition));

	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("PickAndPlace2ThetaAxisForwardLimitPosition", &smCustomerTeachPoint->PickAndPlace2ThetaAxisForwardLimitPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("PickAndPlace2ThetaAxisReverseLimitPosition", &smCustomerTeachPoint->PickAndPlace2ThetaAxisReverseLimitPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("PickAndPlace2ThetaAxisStandbyPosition", &smCustomerTeachPoint->PickAndPlace2ThetaAxisStandbyPosition));

	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("InputVisionZAxisForwardLimitPosition", &smCustomerTeachPoint->InputVisionZAxisForwardLimitPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("InputVisionZAxisReverseLimitPosition", &smCustomerTeachPoint->InputVisionZAxisReverseLimitPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("InputVisionZAxisAtInputVisionFocusPosition", &smCustomerTeachPoint->InputVisionZAxisAtInputVisionFocusPosition));

	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("S2VisionForwardLimitPosition", &smCustomerTeachPoint->S2VisionForwardLimitPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("S2VisionReverseLimitPosition", &smCustomerTeachPoint->S2VisionReverseLimitPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("S2VisionFocusPosition", &smCustomerTeachPoint->S2VisionFocusPosition));

	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("S1VisionForwardLimitPosition", &smCustomerTeachPoint->S1VisionForwardLimitPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("S1VisionReverseLimitPosition", &smCustomerTeachPoint->S1VisionReverseLimitPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("S1VisionFocusPosition", &smCustomerTeachPoint->S1VisionFocusPosition));

	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("S3VisionForwardLimitPosition", &smCustomerTeachPoint->S3VisionForwardLimitPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("S3VisionReverseLimitPosition", &smCustomerTeachPoint->S3VisionReverseLimitPosition));
	(*mapTeachPointSignedLong).insert(pair<string, signed long*>("S3VisionFocusPosition", &smCustomerTeachPoint->S3VisionFocusPosition));
	return 0;
}

int MapTeachPointSignedLongCustomer(map<string, signed long*> *mapTeachPointSignedLong, CustomerSharedMemoryTeachPoint *customerTeachPoint)
{
	return 0;
}

int MapProductionStationResultIntPlatform(map<string, int*> *mapProductionStationResultInt, CustomerSharedMemoryProduction *customerProduction)
{
	return 0;
}

int MapProductionStationResultIntProduct(map<string, int*> *mapProductionStationResultInt, CustomerSharedMemoryProduction *customerProduction)
{
	char chVariable[256];
	memset(chVariable, 0, sizeof(chVariable));
	for (int i = 0; i < 2; i++)
	{
		sprintf_s(chVariable, sizeof(chVariable), "PickAndPlacePickUpHeadStationResult%uUnitNo", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->PickAndPlacePickUpHeadStationResult[i].UnitNo));

		sprintf_s(chVariable, sizeof(chVariable), "PickAndPlacePickUpHeadStationResult%uUnitPresent", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->PickAndPlacePickUpHeadStationResult[i].UnitPresent));

		sprintf_s(chVariable, sizeof(chVariable), "PickAndPlacePickUpHeadStationResult%uPlacementResult", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->PickAndPlacePickUpHeadStationResult[i].PlacementResult));

		sprintf_s(chVariable, sizeof(chVariable), "PickAndPlacePickUpHeadStationResult%uInputResult", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->PickAndPlacePickUpHeadStationResult[i].InputResult));

		sprintf_s(chVariable, sizeof(chVariable), "PickAndPlacePickUpHeadStationResult%uInputXOffset_um", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->PickAndPlacePickUpHeadStationResult[i].InputXOffset_um));

		sprintf_s(chVariable, sizeof(chVariable), "PickAndPlacePickUpHeadStationResult%uInputYOffset_um", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->PickAndPlacePickUpHeadStationResult[i].InputYOffset_um));

		sprintf_s(chVariable, sizeof(chVariable), "PickAndPlacePickUpHeadStationResult%uInputThetaOffset_mDegree", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->PickAndPlacePickUpHeadStationResult[i].InputThetaOffset_mDegree));

		sprintf_s(chVariable, sizeof(chVariable), "PickAndPlacePickUpHeadStationResult%uInputSleeveXOffset_um", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->PickAndPlacePickUpHeadStationResult[i].InputSleeveXOffset_um));

		sprintf_s(chVariable, sizeof(chVariable), "PickAndPlacePickUpHeadStationResult%uInputSleeveYOffset_um", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->PickAndPlacePickUpHeadStationResult[i].InputSleeveYOffset_um));

		sprintf_s(chVariable, sizeof(chVariable), "PickAndPlacePickUpHeadStationResult%uInputSleeveThetaOffset_mDegree", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->PickAndPlacePickUpHeadStationResult[i].InputSleeveThetaOffset_mDegree));

		sprintf_s(chVariable, sizeof(chVariable), "PickAndPlacePickUpHeadStationResult%uS2Result", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->PickAndPlacePickUpHeadStationResult[i].S2Result));

		sprintf_s(chVariable, sizeof(chVariable), "PickAndPlacePickUpHeadStationResult%uS2PartingResult", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->PickAndPlacePickUpHeadStationResult[i].S2PartingResult));

		sprintf_s(chVariable, sizeof(chVariable), "PickAndPlacePickUpHeadStationResult%uS1Result", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->PickAndPlacePickUpHeadStationResult[i].S1Result));

		sprintf_s(chVariable, sizeof(chVariable), "PickAndPlacePickUpHeadStationResult%uS1XOffset_um", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->PickAndPlacePickUpHeadStationResult[i].S1XOffset_um));
		sprintf_s(chVariable, sizeof(chVariable), "PickAndPlacePickUpHeadStationResult%uS1YOffset_um", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->PickAndPlacePickUpHeadStationResult[i].S1YOffset_um));
		sprintf_s(chVariable, sizeof(chVariable), "PickAndPlacePickUpHeadStationResult%uS1ThetaOffset_mDegree", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->PickAndPlacePickUpHeadStationResult[i].S1ThetaOffset_mDegree));
		sprintf_s(chVariable, sizeof(chVariable), "PickAndPlacePickUpHeadStationResult%uS1ZOffset_um", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->PickAndPlacePickUpHeadStationResult[i].S1ZOffset_um));

		sprintf_s(chVariable, sizeof(chVariable), "PickAndPlacePickUpHeadStationResult%uSetupThetaOffset_mDegree", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->PickAndPlacePickUpHeadStationResult[i].SetupThetaOffset_mDegree));
		sprintf_s(chVariable, sizeof(chVariable), "PickAndPlacePickUpHeadStationResult%uSetupZOffset_um", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->PickAndPlacePickUpHeadStationResult[i].SetupZOffset_um));

		sprintf_s(chVariable, sizeof(chVariable), "PickAndPlacePickUpHeadStationResult%uSetupResult", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->PickAndPlacePickUpHeadStationResult[i].SetupResult));

		sprintf_s(chVariable, sizeof(chVariable), "PickAndPlacePickUpHeadStationResult%uSetupThicknessResult", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->PickAndPlacePickUpHeadStationResult[i].SetupThicknessResult));

		sprintf_s(chVariable, sizeof(chVariable), "PickAndPlacePickUpHeadStationResult%uBottomResult", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->PickAndPlacePickUpHeadStationResult[i].BottomResult));

		sprintf_s(chVariable, sizeof(chVariable), "PickAndPlacePickUpHeadStationResult%uBottomXOffset_um", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->PickAndPlacePickUpHeadStationResult[i].BottomXOffset_um));
		sprintf_s(chVariable, sizeof(chVariable), "PickAndPlacePickUpHeadStationResult%uBottomYOffset_um", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->PickAndPlacePickUpHeadStationResult[i].BottomYOffset_um));
		sprintf_s(chVariable, sizeof(chVariable), "PickAndPlacePickUpHeadStationResult%uBottomThetaOffset_mDegree", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->PickAndPlacePickUpHeadStationResult[i].BottomThetaOffset_mDegree));
		sprintf_s(chVariable, sizeof(chVariable), "PickAndPlacePickUpHeadStationResult%uBottomZOffset_um", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->PickAndPlacePickUpHeadStationResult[i].BottomZOffset_um));

		sprintf_s(chVariable, sizeof(chVariable), "PickAndPlacePickUpHeadStationResult%uS3Result", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->PickAndPlacePickUpHeadStationResult[i].S3Result));

		sprintf_s(chVariable, sizeof(chVariable), "PickAndPlacePickUpHeadStationResult%uS3PartingResult", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->PickAndPlacePickUpHeadStationResult[i].S3PartingResult));

		sprintf_s(chVariable, sizeof(chVariable), "PickAndPlacePickUpHeadStationResult%uOutputResult", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->PickAndPlacePickUpHeadStationResult[i].OutputResult));
		
		sprintf_s(chVariable, sizeof(chVariable), "PickAndPlacePickUpHeadStationResult%uOutputXOffset_um", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->PickAndPlacePickUpHeadStationResult[i].OutputXOffset_um));

		sprintf_s(chVariable, sizeof(chVariable), "PickAndPlacePickUpHeadStationResult%uOutputYOffset_um", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->PickAndPlacePickUpHeadStationResult[i].OutputYOffset_um));

		sprintf_s(chVariable, sizeof(chVariable), "PickAndPlacePickUpHeadStationResult%uOutputThetaOffset_mDegree", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->PickAndPlacePickUpHeadStationResult[i].OutputThetaOffset_mDegree));

		sprintf_s(chVariable, sizeof(chVariable), "PickAndPlacePickUpHeadStationResult%uOutputResult_Post", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->PickAndPlacePickUpHeadStationResult[i].OutputResult_Post));
		
		sprintf_s(chVariable, sizeof(chVariable), "PickAndPlacePickUpHeadStationResult%uOutputXOffset_um_Post", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->PickAndPlacePickUpHeadStationResult[i].OutputXOffset_um_Post));

		sprintf_s(chVariable, sizeof(chVariable), "PickAndPlacePickUpHeadStationResult%uOutputYOffset_um_Post", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->PickAndPlacePickUpHeadStationResult[i].OutputYOffset_um_Post));

		sprintf_s(chVariable, sizeof(chVariable), "PickAndPlacePickUpHeadStationResult%uOutputThetaOffset_mDegree_Post", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->PickAndPlacePickUpHeadStationResult[i].OutputThetaOffset_mDegree_Post));

		sprintf_s(chVariable, sizeof(chVariable), "PickAndPlacePickUpHeadStationResult%uRejectResult", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->PickAndPlacePickUpHeadStationResult[i].RejectResult));

		sprintf_s(chVariable, sizeof(chVariable), "PickAndPlacePickUpHeadStationResult%uRejectXOffset_um", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->PickAndPlacePickUpHeadStationResult[i].RejectXOffset_um));

		sprintf_s(chVariable, sizeof(chVariable), "PickAndPlacePickUpHeadStationResult%uRejectYOffset_um", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->PickAndPlacePickUpHeadStationResult[i].RejectYOffset_um));

		sprintf_s(chVariable, sizeof(chVariable), "PickAndPlacePickUpHeadStationResult%uRejectThetaOffset_mDegree", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->PickAndPlacePickUpHeadStationResult[i].RejectThetaOffset_mDegree));

		sprintf_s(chVariable, sizeof(chVariable), "PickAndPlacePickUpHeadStationResult%uRejectResult_Post", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->PickAndPlacePickUpHeadStationResult[i].RejectResult_Post));

		sprintf_s(chVariable, sizeof(chVariable), "PickAndPlacePickUpHeadStationResult%uRejectXOffset_um_Post", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->PickAndPlacePickUpHeadStationResult[i].RejectXOffset_um_Post));

		sprintf_s(chVariable, sizeof(chVariable), "PickAndPlacePickUpHeadStationResult%uRejectYOffset_um_Post", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->PickAndPlacePickUpHeadStationResult[i].RejectYOffset_um_Post));

		sprintf_s(chVariable, sizeof(chVariable), "PickAndPlacePickUpHeadStationResult%uRejectThetaOffset_mDegree_Post", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->PickAndPlacePickUpHeadStationResult[i].RejectThetaOffset_mDegree_Post));

		sprintf_s(chVariable, sizeof(chVariable), "PickAndPlacePickUpHeadStationResult%uInputRow", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->PickAndPlacePickUpHeadStationResult[i].InputRow));

		sprintf_s(chVariable, sizeof(chVariable), "PickAndPlacePickUpHeadStationResult%uInputColumn", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->PickAndPlacePickUpHeadStationResult[i].InputColumn));

		sprintf_s(chVariable, sizeof(chVariable), "PickAndPlacePickUpHeadStationResult%uOutputRow", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->PickAndPlacePickUpHeadStationResult[i].OutputRow));

		sprintf_s(chVariable, sizeof(chVariable), "PickAndPlacePickUpHeadStationResult%uOutputColumn", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->PickAndPlacePickUpHeadStationResult[i].OutputColumn));

		sprintf_s(chVariable, sizeof(chVariable), "PickAndPlacePickUpHeadStationResult%uRejectRow", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->PickAndPlacePickUpHeadStationResult[i].RejectRow));

		sprintf_s(chVariable, sizeof(chVariable), "PickAndPlacePickUpHeadStationResult%uRejectColumn", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->PickAndPlacePickUpHeadStationResult[i].RejectColumn));

		sprintf_s(chVariable, sizeof(chVariable), "PickAndPlacePickUpHeadStationResult%uInputTrayNo", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->PickAndPlacePickUpHeadStationResult[i].InputTrayNo));

		sprintf_s(chVariable, sizeof(chVariable), "PickAndPlacePickUpHeadStationResult%uOutputTrayNo", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->PickAndPlacePickUpHeadStationResult[i].OutputTrayNo));

		sprintf_s(chVariable, sizeof(chVariable), "PickAndPlacePickUpHeadStationResult%uRejectTrayNo", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->PickAndPlacePickUpHeadStationResult[i].RejectTrayNo));

		sprintf_s(chVariable, sizeof(chVariable), "PickAndPlacePickUpHeadStationResult%uInputLotID", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->PickAndPlacePickUpHeadStationResult[i].InputLotID));

		sprintf_s(chVariable, sizeof(chVariable), "PickAndPlacePickUpHeadStationResult%uOutputLotID", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->PickAndPlacePickUpHeadStationResult[i].OutputLotID));

		sprintf_s(chVariable, sizeof(chVariable), "PickAndPlacePickUpHeadStationResult%uCurrentOutputTableNo", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->PickAndPlacePickUpHeadStationResult[i].CurrentOutputTableNo));
		
		sprintf_s(chVariable, sizeof(chVariable), "PickAndPlacePickUpHeadStationResult%uInputUnitPresent", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->PickAndPlacePickUpHeadStationResult[i].InputUnitPresent));
		
		sprintf_s(chVariable, sizeof(chVariable), "PickAndPlacePickUpHeadStationResult%uOutputUnitPresent", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->PickAndPlacePickUpHeadStationResult[i].OutputUnitPresent));

		sprintf_s(chVariable, sizeof(chVariable), "PickAndPlacePickUpHeadStationResult%uRejectUnitPresent", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->PickAndPlacePickUpHeadStationResult[i].RejectUnitPresent));

	}

	for (int i = 0; i < 1; i++)
	{
		sprintf_s(chVariable, sizeof(chVariable), "InputTableResult%uUnitNo", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->InputTableResult[i].UnitNo));

		sprintf_s(chVariable, sizeof(chVariable), "InputTableResult%uUnitPresent", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->InputTableResult[i].UnitPresent));

		sprintf_s(chVariable, sizeof(chVariable), "InputTableResult%uPlacementResult", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->InputTableResult[i].PlacementResult));

		sprintf_s(chVariable, sizeof(chVariable), "InputTableResult%uInputResult", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->InputTableResult[i].InputResult));

		sprintf_s(chVariable, sizeof(chVariable), "InputTableResult%uInputXOffset_um", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->InputTableResult[i].InputXOffset_um));

		sprintf_s(chVariable, sizeof(chVariable), "InputTableResult%uInputYOffset_um", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->InputTableResult[i].InputYOffset_um));

		sprintf_s(chVariable, sizeof(chVariable), "InputTableResult%uInputThetaOffset_mDegree", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->InputTableResult[i].InputThetaOffset_mDegree));

		sprintf_s(chVariable, sizeof(chVariable), "InputTableResult%uInputSleeveXOffset_um", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->InputTableResult[i].InputSleeveXOffset_um));

		sprintf_s(chVariable, sizeof(chVariable), "InputTableResult%uInputSleeveYOffset_um", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->InputTableResult[i].InputSleeveYOffset_um));

		sprintf_s(chVariable, sizeof(chVariable), "InputTableResult%uInputSleeveThetaOffset_mDegree", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->InputTableResult[i].InputSleeveThetaOffset_mDegree));

		sprintf_s(chVariable, sizeof(chVariable), "InputTableResult%uS2Result", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->InputTableResult[i].S2Result));

		sprintf_s(chVariable, sizeof(chVariable), "InputTableResult%uS2PartingResult", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->InputTableResult[i].S2PartingResult));

		sprintf_s(chVariable, sizeof(chVariable), "InputTableResult%uS1Result", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->InputTableResult[i].S1Result));

		sprintf_s(chVariable, sizeof(chVariable), "InputTableResult%uS1XOffset_um", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->InputTableResult[i].S1XOffset_um));
		sprintf_s(chVariable, sizeof(chVariable), "InputTableResult%uS1YOffset_um", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->InputTableResult[i].S1YOffset_um));
		sprintf_s(chVariable, sizeof(chVariable), "InputTableResult%uS1ThetaOffset_mDegree", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->InputTableResult[i].S1ThetaOffset_mDegree));
		sprintf_s(chVariable, sizeof(chVariable), "InputTableResult%uS1ZOffset_um", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->InputTableResult[i].S1ZOffset_um));

		sprintf_s(chVariable, sizeof(chVariable), "InputTableResult%uSetupThetaOffset_mDegree", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->InputTableResult[i].SetupThetaOffset_mDegree));
		sprintf_s(chVariable, sizeof(chVariable), "InputTableResult%uSetupZOffset_um", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->InputTableResult[i].SetupZOffset_um));

		sprintf_s(chVariable, sizeof(chVariable), "InputTableResult%uSetupResult", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->InputTableResult[i].SetupResult));

		sprintf_s(chVariable, sizeof(chVariable), "InputTableResult%uSetupThicknessResult", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->InputTableResult[i].SetupThicknessResult));

		sprintf_s(chVariable, sizeof(chVariable), "InputTableResult%uBottomResult", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->InputTableResult[i].BottomResult));

		sprintf_s(chVariable, sizeof(chVariable), "InputTableResult%uBottomXOffset_um", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->InputTableResult[i].BottomXOffset_um));
		sprintf_s(chVariable, sizeof(chVariable), "InputTableResult%uBottomYOffset_um", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->InputTableResult[i].BottomYOffset_um));
		sprintf_s(chVariable, sizeof(chVariable), "InputTableResult%uBottomThetaOffset_mDegree", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->InputTableResult[i].BottomThetaOffset_mDegree));
		sprintf_s(chVariable, sizeof(chVariable), "InputTableResult%uBottomZOffset_um", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->InputTableResult[i].BottomZOffset_um));

		sprintf_s(chVariable, sizeof(chVariable), "InputTableResult%uS3Result", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->InputTableResult[i].S3Result));

		sprintf_s(chVariable, sizeof(chVariable), "InputTableResult%uS3PartingResult", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->InputTableResult[i].S3PartingResult));

		sprintf_s(chVariable, sizeof(chVariable), "InputTableResult%uOutputResult", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->InputTableResult[i].OutputResult));

		sprintf_s(chVariable, sizeof(chVariable), "InputTableResult%uOutputXOffset_um", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->InputTableResult[i].OutputXOffset_um));

		sprintf_s(chVariable, sizeof(chVariable), "InputTableResult%uOutputYOffset_um", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->InputTableResult[i].OutputYOffset_um));

		sprintf_s(chVariable, sizeof(chVariable), "InputTableResult%uOutputThetaOffset_mDegree", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->InputTableResult[i].OutputThetaOffset_mDegree));

		sprintf_s(chVariable, sizeof(chVariable), "InputTableResult%uOutputResult_Post", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->InputTableResult[i].OutputResult_Post));

		sprintf_s(chVariable, sizeof(chVariable), "InputTableResult%uOutputXOffset_um_Post", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->InputTableResult[i].OutputXOffset_um_Post));

		sprintf_s(chVariable, sizeof(chVariable), "InputTableResult%uOutputYOffset_um_Post", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->InputTableResult[i].OutputYOffset_um_Post));

		sprintf_s(chVariable, sizeof(chVariable), "InputTableResult%uOutputThetaOffset_mDegree_Post", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->InputTableResult[i].OutputThetaOffset_mDegree_Post));

		sprintf_s(chVariable, sizeof(chVariable), "InputTableResult%uRejectResult", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->InputTableResult[i].RejectResult));

		sprintf_s(chVariable, sizeof(chVariable), "InputTableResult%uRejectXOffset_um", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->InputTableResult[i].RejectXOffset_um));

		sprintf_s(chVariable, sizeof(chVariable), "InputTableResult%uRejectYOffset_um", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->InputTableResult[i].RejectYOffset_um));

		sprintf_s(chVariable, sizeof(chVariable), "InputTableResult%uRejectThetaOffset_mDegree", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->InputTableResult[i].RejectThetaOffset_mDegree));

		sprintf_s(chVariable, sizeof(chVariable), "InputTableResult%uRejectResult_Post", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->InputTableResult[i].RejectResult_Post));

		sprintf_s(chVariable, sizeof(chVariable), "InputTableResult%uRejectXOffset_um_Post", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->InputTableResult[i].RejectXOffset_um_Post));

		sprintf_s(chVariable, sizeof(chVariable), "InputTableResult%uRejectYOffset_um_Post", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->InputTableResult[i].RejectYOffset_um_Post));

		sprintf_s(chVariable, sizeof(chVariable), "InputTableResult%uRejectThetaOffset_mDegree_Post", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->InputTableResult[i].RejectThetaOffset_mDegree_Post));

		sprintf_s(chVariable, sizeof(chVariable), "InputTableResult%uInputRow", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->InputTableResult[i].InputRow));

		sprintf_s(chVariable, sizeof(chVariable), "InputTableResult%uInputColumn", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->InputTableResult[i].InputColumn));

		sprintf_s(chVariable, sizeof(chVariable), "InputTableResult%uOutputRow", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->InputTableResult[i].OutputRow));

		sprintf_s(chVariable, sizeof(chVariable), "InputTableResult%uOutputColumn", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->InputTableResult[i].OutputColumn));

		sprintf_s(chVariable, sizeof(chVariable), "InputTableResult%uRejectRow", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->InputTableResult[i].RejectRow));

		sprintf_s(chVariable, sizeof(chVariable), "InputTableResult%uRejectColumn", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->InputTableResult[i].RejectColumn));

		sprintf_s(chVariable, sizeof(chVariable), "InputTableResult%uInputTrayNo", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->InputTableResult[i].InputTrayNo));

		sprintf_s(chVariable, sizeof(chVariable), "InputTableResult%uOutputTrayNo", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->InputTableResult[i].OutputTrayNo));

		sprintf_s(chVariable, sizeof(chVariable), "InputTableResult%uRejectTrayNo", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->InputTableResult[i].RejectTrayNo));

		sprintf_s(chVariable, sizeof(chVariable), "InputTableResult%uInputLotID", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->InputTableResult[i].InputLotID));

		sprintf_s(chVariable, sizeof(chVariable), "InputTableResult%uOutputLotID", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->InputTableResult[i].OutputLotID));

		sprintf_s(chVariable, sizeof(chVariable), "InputTableResult%uCurrentOutputTableNo", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->InputTableResult[i].CurrentOutputTableNo));

		sprintf_s(chVariable, sizeof(chVariable), "InputTableResult%uInputUnitPresent", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->InputTableResult[i].InputUnitPresent));

		sprintf_s(chVariable, sizeof(chVariable), "InputTableResult%uOutputUnitPresent", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->InputTableResult[i].OutputUnitPresent));

		sprintf_s(chVariable, sizeof(chVariable), "InputTableResult%uRejectUnitPresent", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->InputTableResult[i].RejectUnitPresent));

	}

	for (int i = 0; i < 1; i++)
	{
		sprintf_s(chVariable, sizeof(chVariable), "OutputTableResult%uUnitNo", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->OutputTableResult[i].UnitNo));

		sprintf_s(chVariable, sizeof(chVariable), "OutputTableResult%uUnitPresent", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->OutputTableResult[i].UnitPresent));

		sprintf_s(chVariable, sizeof(chVariable), "OutputTableResult%uPlacementResult", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->OutputTableResult[i].PlacementResult));

		sprintf_s(chVariable, sizeof(chVariable), "OutputTableResult%uInputResult", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->OutputTableResult[i].InputResult));

		sprintf_s(chVariable, sizeof(chVariable), "OutputTableResult%uInputXOffset_um", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->OutputTableResult[i].InputXOffset_um));

		sprintf_s(chVariable, sizeof(chVariable), "OutputTableResult%uInputYOffset_um", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->OutputTableResult[i].InputYOffset_um));

		sprintf_s(chVariable, sizeof(chVariable), "OutputTableResult%uInputThetaOffset_mDegree", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->OutputTableResult[i].InputThetaOffset_mDegree));

		sprintf_s(chVariable, sizeof(chVariable), "OutputTableResult%uInputSleeveXOffset_um", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->OutputTableResult[i].InputSleeveXOffset_um));

		sprintf_s(chVariable, sizeof(chVariable), "OutputTableResult%uInputSleeveYOffset_um", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->OutputTableResult[i].InputSleeveYOffset_um));

		sprintf_s(chVariable, sizeof(chVariable), "OutputTableResult%uInputSleeveThetaOffset_mDegree", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->OutputTableResult[i].InputSleeveThetaOffset_mDegree));

		sprintf_s(chVariable, sizeof(chVariable), "OutputTableResult%uS2Result", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->OutputTableResult[i].S2Result));

		sprintf_s(chVariable, sizeof(chVariable), "OutputTableResult%uS2PartingResult", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->OutputTableResult[i].S2PartingResult));

		sprintf_s(chVariable, sizeof(chVariable), "OutputTableResult%uS1Result", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->OutputTableResult[i].S1Result));

		sprintf_s(chVariable, sizeof(chVariable), "OutputTableResult%uS1XOffset_um", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->OutputTableResult[i].S1XOffset_um));
		sprintf_s(chVariable, sizeof(chVariable), "OutputTableResult%uS1YOffset_um", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->OutputTableResult[i].S1YOffset_um));
		sprintf_s(chVariable, sizeof(chVariable), "OutputTableResult%uS1ThetaOffset_mDegree", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->OutputTableResult[i].S1ThetaOffset_mDegree));
		sprintf_s(chVariable, sizeof(chVariable), "OutputTableResult%uS1ZOffset_um", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->OutputTableResult[i].S1ZOffset_um));

		sprintf_s(chVariable, sizeof(chVariable), "OutputTableResult%uSetupThetaOffset_mDegree", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->OutputTableResult[i].SetupThetaOffset_mDegree));
		sprintf_s(chVariable, sizeof(chVariable), "OutputTableResult%uSetupZOffset_um", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->OutputTableResult[i].SetupZOffset_um));

		sprintf_s(chVariable, sizeof(chVariable), "OutputTableResult%uSetupResult", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->OutputTableResult[i].SetupResult));

		sprintf_s(chVariable, sizeof(chVariable), "OutputTableResult%uSetupThicknessResult", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->OutputTableResult[i].SetupThicknessResult));

		sprintf_s(chVariable, sizeof(chVariable), "OutputTableResult%uBottomResult", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->OutputTableResult[i].BottomResult));

		sprintf_s(chVariable, sizeof(chVariable), "OutputTableResult%uBottomXOffset_um", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->OutputTableResult[i].BottomXOffset_um));
		sprintf_s(chVariable, sizeof(chVariable), "OutputTableResult%uBottomYOffset_um", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->OutputTableResult[i].BottomYOffset_um));
		sprintf_s(chVariable, sizeof(chVariable), "OutputTableResult%uBottomThetaOffset_mDegree", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->OutputTableResult[i].BottomThetaOffset_mDegree));
		sprintf_s(chVariable, sizeof(chVariable), "OutputTableResult%uBottomZOffset_um", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->OutputTableResult[i].BottomZOffset_um));

		sprintf_s(chVariable, sizeof(chVariable), "OutputTableResult%uS3Result", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->OutputTableResult[i].S3Result));

		sprintf_s(chVariable, sizeof(chVariable), "OutputTableResult%uS3PartingResult", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->OutputTableResult[i].S3PartingResult));

		sprintf_s(chVariable, sizeof(chVariable), "OutputTableResult%uOutputResult", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->OutputTableResult[i].OutputResult));

		sprintf_s(chVariable, sizeof(chVariable), "OutputTableResult%uOutputXOffset_um", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->OutputTableResult[i].OutputXOffset_um));

		sprintf_s(chVariable, sizeof(chVariable), "OutputTableResult%uOutputYOffset_um", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->OutputTableResult[i].OutputYOffset_um));

		sprintf_s(chVariable, sizeof(chVariable), "OutputTableResult%uOutputThetaOffset_mDegree", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->OutputTableResult[i].OutputThetaOffset_mDegree));

		sprintf_s(chVariable, sizeof(chVariable), "OutputTableResult%uOutputResult_Post", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->OutputTableResult[i].OutputResult_Post));

		sprintf_s(chVariable, sizeof(chVariable), "OutputTableResult%uOutputXOffset_um_Post", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->OutputTableResult[i].OutputXOffset_um_Post));

		sprintf_s(chVariable, sizeof(chVariable), "OutputTableResult%uOutputYOffset_um_Post", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->OutputTableResult[i].OutputYOffset_um_Post));

		sprintf_s(chVariable, sizeof(chVariable), "OutputTableResult%uOutputThetaOffset_mDegree_Post", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->OutputTableResult[i].OutputThetaOffset_mDegree_Post));

		sprintf_s(chVariable, sizeof(chVariable), "OutputTableResult%uRejectResult", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->OutputTableResult[i].RejectResult));

		sprintf_s(chVariable, sizeof(chVariable), "OutputTableResult%uRejectXOffset_um", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->OutputTableResult[i].RejectXOffset_um));

		sprintf_s(chVariable, sizeof(chVariable), "OutputTableResult%uRejectYOffset_um", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->OutputTableResult[i].RejectYOffset_um));

		sprintf_s(chVariable, sizeof(chVariable), "OutputTableResult%uRejectThetaOffset_mDegree", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->OutputTableResult[i].RejectThetaOffset_mDegree));

		sprintf_s(chVariable, sizeof(chVariable), "OutputTableResult%uRejectResult_Post", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->OutputTableResult[i].RejectResult_Post));

		sprintf_s(chVariable, sizeof(chVariable), "OutputTableResult%uRejectXOffset_um_Post", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->OutputTableResult[i].RejectXOffset_um_Post));

		sprintf_s(chVariable, sizeof(chVariable), "OutputTableResult%uRejectYOffset_um_Post", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->OutputTableResult[i].RejectYOffset_um_Post));

		sprintf_s(chVariable, sizeof(chVariable), "OutputTableResult%uRejectThetaOffset_mDegree_Post", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->OutputTableResult[i].RejectThetaOffset_mDegree_Post));

		sprintf_s(chVariable, sizeof(chVariable), "OutputTableResult%uInputRow", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->OutputTableResult[i].InputRow));

		sprintf_s(chVariable, sizeof(chVariable), "OutputTableResult%uInputColumn", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->OutputTableResult[i].InputColumn));

		sprintf_s(chVariable, sizeof(chVariable), "OutputTableResult%uOutputRow", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->OutputTableResult[i].OutputRow));

		sprintf_s(chVariable, sizeof(chVariable), "OutputTableResult%uOutputColumn", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->OutputTableResult[i].OutputColumn));

		sprintf_s(chVariable, sizeof(chVariable), "OutputTableResult%uRejectRow", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->OutputTableResult[i].RejectRow));

		sprintf_s(chVariable, sizeof(chVariable), "OutputTableResult%uRejectColumn", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->OutputTableResult[i].RejectColumn));

		sprintf_s(chVariable, sizeof(chVariable), "OutputTableResult%uInputTrayNo", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->OutputTableResult[i].InputTrayNo));

		sprintf_s(chVariable, sizeof(chVariable), "OutputTableResult%uOutputTrayNo", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->OutputTableResult[i].OutputTrayNo));

		sprintf_s(chVariable, sizeof(chVariable), "OutputTableResult%uRejectTrayNo", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->OutputTableResult[i].RejectTrayNo));

		sprintf_s(chVariable, sizeof(chVariable), "OutputTableResult%uInputLotID", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->OutputTableResult[i].InputLotID));

		sprintf_s(chVariable, sizeof(chVariable), "OutputTableResult%uOutputLotID", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->OutputTableResult[i].OutputLotID));

		sprintf_s(chVariable, sizeof(chVariable), "OutputTableResult%uCurrentOutputTableNo", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->OutputTableResult[i].CurrentOutputTableNo));

		sprintf_s(chVariable, sizeof(chVariable), "OutputTableResult%uInputUnitPresent", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->OutputTableResult[i].InputUnitPresent));

		sprintf_s(chVariable, sizeof(chVariable), "OutputTableResult%uOutputUnitPresent", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->OutputTableResult[i].OutputUnitPresent));

		sprintf_s(chVariable, sizeof(chVariable), "OutputTableResult%uRejectUnitPresent", i);
		(*mapProductionStationResultInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->OutputTableResult[i].RejectUnitPresent));
	}

	memset(chVariable, 0, sizeof(chVariable));
	return 0;
}

int MapProductionStationResultIntCustomer(map<string, int*> *mapProductionStationResultInt, CustomerSharedMemoryProduction *customerProduction)
{
	return 0;
}



int MapProductionPatternRecognizationStringProduct(map<string, char*> *mapProductionPatternRecognizationString, CustomerSharedMemoryProduction *smCustomerProduction)
{
	char chVariable[256];

	
	memset(chVariable, 0, sizeof(chVariable));

	return 0;
}

int MapProductionPatternRecognizationIntProduct(map<string, int*> *mapProductionPatternRecognizationInt, CustomerSharedMemoryProduction * smCustomerProduction)
{
	char chVariable[256];
	memset(chVariable, 0, sizeof(chVariable));

	
	return 0;
}

int MapProductionIntPlatform(map<string, int*> *mapProductionInt, CustomerSharedMemoryProduction *customerProduction)
{
	(*mapProductionInt).insert(pair<string, int*>("OutputQuantity", &smCustomerProduction->OutputQuantity));
	return 0;
}

int MapProductionIntProduct(map<string, int*> *mapProductionInt, CustomerSharedMemoryProduction *customerProduction)
{
	(*mapProductionInt).insert(pair<string, int*>("PickAndPlace1CurrentStation", &smCustomerProduction->PickAndPlace1CurrentStation));
	(*mapProductionInt).insert(pair<string, int*>("PickAndPlace2CurrentStation", &smCustomerProduction->PickAndPlace2CurrentStation));
	(*mapProductionInt).insert(pair<string, int*>("PickAndPlace1StationToMove", &smCustomerProduction->PickAndPlace1StationToMove));
	(*mapProductionInt).insert(pair<string, int*>("PickAndPlace2StationToMove", &smCustomerProduction->PickAndPlace2StationToMove));

	(*mapProductionInt).insert(pair<string, int*>("nCurrentPickupHeadAtInput", &smCustomerProduction->nCurrentPickupHeadAtInput));
	(*mapProductionInt).insert(pair<string, int*>("nCurrentPickupHeadAtS1", &smCustomerProduction->nCurrentPickupHeadAtS1));
	(*mapProductionInt).insert(pair<string, int*>("nCurrentPickupHeadAtS3", &smCustomerProduction->nCurrentPickupHeadAtS3));
	(*mapProductionInt).insert(pair<string, int*>("nCurrentPickupHeadAtOutput", &smCustomerProduction->nCurrentPickupHeadAtOutput));

	(*mapProductionInt).insert(pair<string, int*>("OutputTableCheckSequence", &smCustomerProduction->OutputTableCheckSequence));

	(*mapProductionInt).insert(pair<string, int*>("nCurrentInputTrayNo", &smCustomerProduction->nCurrentInputTrayNo));
	(*mapProductionInt).insert(pair<string, int*>("nPreviousInputTrayNo", &smCustomerProduction->nPreviousInputTrayNo));
	(*mapProductionInt).insert(pair<string, int*>("nCurrentOutputTrayNo", &smCustomerProduction->nCurrentOutputTrayNo));

	(*mapProductionInt).insert(pair<string, int*>("nCurrentBottomStationTrayNo", &smCustomerProduction->nCurrentBottomStationTrayNo));
	(*mapProductionInt).insert(pair<string, int*>("nCurrentS3StationTrayNo", &smCustomerProduction->nCurrentS3StationTrayNo));

	(*mapProductionInt).insert(pair<string, int*>("nCurrentRejectTrayNo", &smCustomerProduction->nCurrentRejectTrayNo));

	(*mapProductionInt).insert(pair<string, int*>("nCurrentProcessRejectTrayNo", &smCustomerProduction->nCurrentProcessRejectTrayNo));
	
	(*mapProductionInt).insert(pair<string, int*>("InputTrayUnloadingNo", &smCustomerProduction->InputTrayUnloadingNo));
	(*mapProductionInt).insert(pair<string, int*>("OutputTrayUnloadingNo", &smCustomerProduction->OutputTrayUnloadingNo));

	(*mapProductionInt).insert(pair<string, int*>("CurrentInputVisionRetryCount", &smCustomerProduction->CurrentInputVisionRetryCount));
	(*mapProductionInt).insert(pair<string, int*>("CurrentInputVisionContinuousFailCount", &smCustomerProduction->CurrentInputVisionContinuousFailCount));
	(*mapProductionInt).insert(pair<string, int*>("CurrentInputVisionRCRetryCount", &smCustomerProduction->CurrentInputVisionRCRetryCount));

	(*mapProductionInt).insert(pair<string, int*>("CurrentS2VisionRetryCount", &smCustomerProduction->CurrentS2VisionRetryCount));
	(*mapProductionInt).insert(pair<string, int*>("CurrentS2VisionContinuousFailCount", &smCustomerProduction->CurrentS2VisionContinuousFailCount));
	(*mapProductionInt).insert(pair<string, int*>("CurrentS2VisionRCRetryCount", &smCustomerProduction->CurrentS2VisionRCRetryCount));

	(*mapProductionInt).insert(pair<string, int*>("CurrentBottomVisionRetryCount", &smCustomerProduction->CurrentBottomVisionRetryCount));
	(*mapProductionInt).insert(pair<string, int*>("CurrentBottomVisionContinuousFailCount", &smCustomerProduction->CurrentBottomVisionContinuousFailCount));
	(*mapProductionInt).insert(pair<string, int*>("CurrentBottomVisionRCRetryCount", &smCustomerProduction->CurrentBottomVisionRCRetryCount));

	(*mapProductionInt).insert(pair<string, int*>("CurrentS3VisionRetryCount", &smCustomerProduction->CurrentS3VisionRetryCount));
	(*mapProductionInt).insert(pair<string, int*>("CurrentS3VisionContinuousFailCount", &smCustomerProduction->CurrentS3VisionContinuousFailCount));
	(*mapProductionInt).insert(pair<string, int*>("CurrentS3VisionRCRetryCount", &smCustomerProduction->CurrentS3VisionRCRetryCount));

	(*mapProductionInt).insert(pair<string, int*>("CurrentS1VisionRetryCount", &smCustomerProduction->CurrentS1VisionRetryCount));
	(*mapProductionInt).insert(pair<string, int*>("CurrentS1VisionContinuousFailCount", &smCustomerProduction->CurrentS1VisionContinuousFailCount));
	(*mapProductionInt).insert(pair<string, int*>("CurrentS1VisionRCRetryCount", &smCustomerProduction->CurrentS1VisionRCRetryCount));

	(*mapProductionInt).insert(pair<string, int*>("CurrentOutputVisionRetryCount", &smCustomerProduction->CurrentOutputVisionRetryCount));
	(*mapProductionInt).insert(pair<string, int*>("CurrentOutputVisionContinuousFailCount", &smCustomerProduction->CurrentOutputVisionContinuousFailCount));
	(*mapProductionInt).insert(pair<string, int*>("CurrentOutputVisionRCRetryCount", &smCustomerProduction->CurrentOutputVisionRCRetryCount));

	(*mapProductionInt).insert(pair<string, int*>("CurrentOutputVisionNotMatchUnitRetryCount", &smProductProduction->CurrentOutputVisionNotMatchUnitRetryCount));

	(*mapProductionInt).insert(pair<string, int*>("nEdgeCoordinateX", &smCustomerProduction->nEdgeCoordinateX));
	(*mapProductionInt).insert(pair<string, int*>("nEdgeCoordinateY", &smCustomerProduction->nEdgeCoordinateY));

	(*mapProductionInt).insert(pair<string, int*>("nOutputEdgeCoordinateX", &smCustomerProduction->nOutputEdgeCoordinateX));
	(*mapProductionInt).insert(pair<string, int*>("nOutputEdgeCoordinateY", &smCustomerProduction->nOutputEdgeCoordinateY));

	(*mapProductionInt).insert(pair<string, int*>("nRejectEdgeCoordinateX", &smCustomerProduction->nRejectEdgeCoordinateX));
	(*mapProductionInt).insert(pair<string, int*>("nRejectEdgeCoordinateY", &smCustomerProduction->nRejectEdgeCoordinateY));

	(*mapProductionInt).insert(pair<string, int*>("nCurrentTotalUnitDone", &smCustomerProduction->nCurrentTotalUnitDone));
	(*mapProductionInt).insert(pair<string, int*>("nCurrrentTotalUnitDoneByLot", &smCustomerProduction->nCurrrentTotalUnitDoneByLot));
	
	(*mapProductionInt).insert(pair<string, int*>("nCurrentOutputUnitOnTray", &smCustomerProduction->nCurrentOutputUnitOnTray));
	(*mapProductionInt).insert(pair<string, int*>("nCurrentRejectUnitOnTray", &smCustomerProduction->nCurrentRejectUnitOnTray));
	(*mapProductionInt).insert(pair<string, int*>("nCurrentInputUnitOnTray", &smCustomerProduction->nCurrentInputUnitOnTray));
	(*mapProductionInt).insert(pair<string, int*>("nCurrentTotalRejectUnit", &smCustomerProduction->nCurrentTotalRejectUnit));
	(*mapProductionInt).insert(pair<string, int*>("nCurrentTotalInputUnitDone", &smCustomerProduction->nCurrentTotalInputUnitDone));
	

	(*mapProductionInt).insert(pair<string, int*>("BypassCheckPostVisionResultForFirstTime", &smCustomerProduction->BypassCheckPostVisionResultForFirstTime));

	(*mapProductionInt).insert(pair<string, int*>("CurrentBottomVisionLoopNo", &smCustomerProduction->CurrentBottomVisionLoopNo));
	(*mapProductionInt).insert(pair<string, int*>("CurrentS1VisionLoopNo", &smCustomerProduction->CurrentS1VisionLoopNo));
	(*mapProductionInt).insert(pair<string, int*>("CurrentS2VisionLoopNo", &smCustomerProduction->CurrentS2VisionLoopNo));
	(*mapProductionInt).insert(pair<string, int*>("CurrentS3VisionLoopNo", &smCustomerProduction->CurrentS3VisionLoopNo));
	(*mapProductionInt).insert(pair<string, int*>("CurrentInputVisionLoopNo", &smCustomerProduction->CurrentInputVisionLoopNo));
	(*mapProductionInt).insert(pair<string, int*>("CurrentS2S3FacetTotalSnap", &smCustomerProduction->CurrentS2S3FacetTotalSnap));
	(*mapProductionInt).insert(pair<string, int*>("CurrentS2FacetSnapTimes", &smCustomerProduction->CurrentS2FacetSnapTimes));
	(*mapProductionInt).insert(pair<string, int*>("CurrentS3FacetSnapTimes", &smCustomerProduction->CurrentS3FacetSnapTimes));

	(*mapProductionInt).insert(pair<string, int*>("PickupHeadNoAtInputVision", &smCustomerProduction->PickupHeadNoAtInputVision));
	(*mapProductionInt).insert(pair<string, int*>("PickupHeadNoAtS2Vision", &smCustomerProduction->PickupHeadNoAtS2Vision));
	(*mapProductionInt).insert(pair<string, int*>("PickupHeadNoAtSetupVision", &smCustomerProduction->PickupHeadNoAtSetupVision));
	(*mapProductionInt).insert(pair<string, int*>("PickupHeadNoAtBottomVision", &smCustomerProduction->PickupHeadNoAtBottomVision));
	(*mapProductionInt).insert(pair<string, int*>("PickupHeadNoAtS3Vision", &smCustomerProduction->PickupHeadNoAtS3Vision));
	(*mapProductionInt).insert(pair<string, int*>("PickupHeadNoAtSidewallLeftVision", &smCustomerProduction->PickupHeadNoAtSidewallLeftVision));
	(*mapProductionInt).insert(pair<string, int*>("PickupHeadNoAtSidewallRightVision", &smCustomerProduction->PickupHeadNoAtSidewallRightVision));
	(*mapProductionInt).insert(pair<string, int*>("PickupHeadNoAtSidewallFrontVision", &smCustomerProduction->PickupHeadNoAtSidewallFrontVision));
	(*mapProductionInt).insert(pair<string, int*>("PickupHeadNoAtSidewallRearVision", &smCustomerProduction->PickupHeadNoAtSidewallRearVision));

	(*mapProductionInt).insert(pair<string, int*>("TeachVisionStation", &smCustomerProduction->TeachVisionStation));
	(*mapProductionInt).insert(pair<string, int*>("TeachVisionPickAndPlace", &smCustomerProduction->TeachVisionPickAndPlace));

	(*mapProductionInt).insert(pair<string, int*>("TrayPresentSensorOffTimeBeforeAlarm_ms", &smCustomerProduction->TrayPresentSensorOffTimeBeforeAlarm_ms));
	
	(*mapProductionInt).insert(pair<string, int*>("nInputVisionAdditionalSnapNo", &smCustomerProduction->nInputVisionAdditionalSnapNo));
	(*mapProductionInt).insert(pair<string, int*>("nS2VisionAdditionalSnapNo", &smCustomerProduction->nS2VisionAdditionalSnapNo));
	(*mapProductionInt).insert(pair<string, int*>("nS1VisionAdditionalSnapNo", &smCustomerProduction->nS1VisionAdditionalSnapNo));
	(*mapProductionInt).insert(pair<string, int*>("nS3VisionAdditionalSnapNo", &smCustomerProduction->nS3VisionAdditionalSnapNo)); 
	(*mapProductionInt).insert(pair<string, int*>("nOutputVisionAdditionalSnapNo", &smCustomerProduction->nOutputVisionAdditionalSnapNo));

	(*mapProductionInt).insert(pair<string, int*>("nCurrentPickAndPlace1PickingRetry", &smCustomerProduction->nCurrentPickAndPlace1PickingRetry));
	(*mapProductionInt).insert(pair<string, int*>("nCurrentPickAndPlace2PickingRetry", &smCustomerProduction->nCurrentPickAndPlace2PickingRetry));
	//(*mapProductionInt).insert(pair<string, int*>("PreviousTotalQuantityDone", &smCustomerProduction->PreviousTotalQuantityDone));
	//(*mapProductionInt).insert(pair<string, int*>("PreviousInputTrayNo", &smCustomerProduction->PreviousInputTrayNo));
	//(*mapProductionInt).insert(pair<string, int*>("PreviousOutputTrayNo", &smCustomerProduction->PreviousOutputTrayNo));
	//(*mapProductionInt).insert(pair<string, int*>("PreviousReject1TrayNo", &smCustomerProduction->PreviousReject1TrayNo));
	//(*mapProductionInt).insert(pair<string, int*>("PreviousReject2TrayNo", &smCustomerProduction->PreviousReject2TrayNo));
	//(*mapProductionInt).insert(pair<string, int*>("PreviousReject3TrayNo", &smCustomerProduction->PreviousReject3TrayNo));
	//(*mapProductionInt).insert(pair<string, int*>("PreviousReject4TrayNo", &smCustomerProduction->PreviousReject4TrayNo));
	//(*mapProductionInt).insert(pair<string, int*>("PreviousReject5TrayNo", &smCustomerProduction->PreviousReject5TrayNo));

	(*mapProductionInt).insert(pair<string, int*>("WriteReportTrayNo", &smCustomerProduction->WriteReportTrayNo));
	(*mapProductionInt).insert(pair<string, int*>("WriteReportTrayNoOnOutput", &smCustomerProduction->WriteReportTrayNoOnOutput));
	(*mapProductionInt).insert(pair<string, int*>("PreviousInputEdgeCoordinateX", &smCustomerProduction->PreviousInputEdgeCoordinateX));
	(*mapProductionInt).insert(pair<string, int*>("PreviousInputEdgeCoordinateY", &smCustomerProduction->PreviousInputEdgeCoordinateY));
	(*mapProductionInt).insert(pair<string, int*>("PreviousRejectEdgeCoordinateX", &smCustomerProduction->PreviousRejectEdgeCoordinateX));
	(*mapProductionInt).insert(pair<string, int*>("PreviousRejectEdgeCoordinateY", &smCustomerProduction->PreviousRejectEdgeCoordinateY));

	(*mapProductionInt).insert(pair<string, int*>("UpdateMappingProgressHead", &smCustomerProduction->UpdateMappingProgressHead));
	(*mapProductionInt).insert(pair<string, int*>("StationSelectedForCalibration", &smCustomerProduction->StationSelectedForCalibration));
	(*mapProductionInt).insert(pair<string, int*>("nInputRunningState", &smCustomerProduction->nInputRunningState));
	(*mapProductionInt).insert(pair<string, int*>("nPNPRunningState", &smCustomerProduction->nPNPRunningState));
	(*mapProductionInt).insert(pair<string, int*>("nOutputRunningState", &smCustomerProduction->nOutputRunningState));

	(*mapProductionInt).insert(pair<string, int*>("nInputLotQuantity", &smCustomerProduction->nInputLotQuantity));
	(*mapProductionInt).insert(pair<string, int*>("nCurrentInputLotQuantityRun", &smCustomerProduction->nCurrentInputLotQuantityRun));

	(*mapProductionInt).insert(pair<string, int*>("nLotIDNumber", &smCustomerProduction->nLotIDNumber));

	(*mapProductionInt).insert(pair<string, int*>("nCurrentLotGoodQuantity", &smCustomerProduction->nCurrentLotGoodQuantity));
	(*mapProductionInt).insert(pair<string, int*>("nCurrentLotNotGoodQuantity", &smCustomerProduction->nCurrentLotNotGoodQuantity));
	(*mapProductionInt).insert(pair<string, int*>("nTotalInputUnitDone", &smCustomerProduction->nTotalInputUnitDone));

	(*mapProductionInt).insert(pair<string, int*>("nTotalSamplingQty", &smCustomerProduction->nTotalSamplingQty));

	(*mapProductionInt).insert(pair<string, int*>("nInputLotTrayNo", &smCustomerProduction->nInputLotTrayNo));
	(*mapProductionInt).insert(pair<string, int*>("nCurrentInputLotTrayNoRun", &smCustomerProduction->nCurrentInputLotTrayNoRun));
	(*mapProductionInt).insert(pair<string, int*>("PickUpHeadNoForCalibration", &smCustomerProduction->PickUpHeadNoForCalibration));

	return 0;
}

int MapProductionIntCustomer(map<string, int*> *mapProductionInt, CustomerSharedMemoryProduction *customerProduction)
{
	return 0;
}
int MapProductionStringProduct(map<string, char*> *mapProductionString, CustomerSharedMemoryProduction *customerProduction)
{
	(*mapProductionString).insert(pair<string, char*>("InputLotID", &smCustomerProduction->InputLotID[0]));
	(*mapProductionString).insert(pair<string, char*>("OutputLotID", &smCustomerProduction->OutputLotID[0]));
	(*mapProductionString).insert(pair<string, char*>("CurrentInputLotID", &smCustomerProduction->CurrentInputLotID[0]));
	(*mapProductionString).insert(pair<string, char*>("CurrentS1LotID", &smCustomerProduction->CurrentS1LotID[0]));
	(*mapProductionString).insert(pair<string, char*>("CurrentS3LotID", &smCustomerProduction->CurrentS3LotID[0]));
	(*mapProductionString).insert(pair<string, char*>("CurrentOutputLotID", &smCustomerProduction->CurrentOutputLotID[0]));
	return 0;
}
int MapProductionSignedLongPlatform(map<string, signed long*> *mapProductionSignedLong, CustomerSharedMemoryProduction *customerProduction)
{
	return 0;
}
int MapProductionSignedLongProduct(map<string, signed long*> *mapProductionSignedLong, CustomerSharedMemoryProduction *customerProduction)
{
	(*mapProductionSignedLong).insert(pair<string, signed long*>("InputTrayTableCurrentXPosition", &smCustomerProduction->InputTrayTableCurrentXPosition));
	(*mapProductionSignedLong).insert(pair<string, signed long*>("InputTrayTableCurrentYPosition", &smCustomerProduction->InputTrayTableCurrentYPosition));

	(*mapProductionSignedLong).insert(pair<string, signed long*>("OutputTrayTableCurrentXPosition", &smCustomerProduction->OutputTrayTableCurrentXPosition));
	(*mapProductionSignedLong).insert(pair<string, signed long*>("OutputTrayTableCurrentYPosition", &smCustomerProduction->OutputTrayTableCurrentYPosition));
	
	(*mapProductionSignedLong).insert(pair<string, signed long*>("RejectTrayTableCurrentXPosition", &smCustomerProduction->RejectTrayTableCurrentXPosition));
	(*mapProductionSignedLong).insert(pair<string, signed long*>("RejectTrayTableCurrentYPosition", &smCustomerProduction->RejectTrayTableCurrentYPosition));
	
	(*mapProductionSignedLong).insert(pair<string, signed long*>("PickAndPlace1XAxisMovePosition", &smCustomerProduction->PickAndPlace1XAxisMovePosition));
	(*mapProductionSignedLong).insert(pair<string, signed long*>("PickAndPlace2XAxisMovePosition", &smCustomerProduction->PickAndPlace2XAxisMovePosition));
	
	(*mapProductionSignedLong).insert(pair<string, signed long*>("PickAndPlace1YAxisMovePosition", &smCustomerProduction->PickAndPlace1YAxisMovePosition));
	
	(*mapProductionSignedLong).insert(pair<string, signed long*>("InputTrayTableXAxisMovePosition", &smCustomerProduction->InputTrayTableXAxisMovePosition));
	(*mapProductionSignedLong).insert(pair<string, signed long*>("InputTrayTableYAxisMovePosition", &smCustomerProduction->InputTrayTableYAxisMovePosition));
	(*mapProductionSignedLong).insert(pair<string, signed long*>("InputTrayTableZAxisMovePosition", &smCustomerProduction->InputTrayTableZAxisMovePosition));

	(*mapProductionSignedLong).insert(pair<string, signed long*>("PickAndPlace2YAxisMovePosition", &smCustomerProduction->PickAndPlace2YAxisMovePosition));

	(*mapProductionSignedLong).insert(pair<string, signed long*>("OutputTrayTableXAxisMovePosition", &smCustomerProduction->OutputTrayTableXAxisMovePosition));
	(*mapProductionSignedLong).insert(pair<string, signed long*>("OutputTrayTableYAxisMovePosition", &smCustomerProduction->OutputTrayTableYAxisMovePosition));
	(*mapProductionSignedLong).insert(pair<string, signed long*>("OutputTrayTableZAxisMovePosition", &smCustomerProduction->OutputTrayTableZAxisMovePosition));

	(*mapProductionSignedLong).insert(pair<string, signed long*>("InputVisionModuleMovePosition", &smCustomerProduction->InputVisionModuleMovePosition));
	(*mapProductionSignedLong).insert(pair<string, signed long*>("S2VisionModuleMovePosition", &smCustomerProduction->S2VisionModuleMovePosition));
	(*mapProductionSignedLong).insert(pair<string, signed long*>("SidewallVisionLeftModuleMovePosition", &smCustomerProduction->S1VisionModuleMovePosition));
	(*mapProductionSignedLong).insert(pair<string, signed long*>("S3VisionModuleMovePosition", &smCustomerProduction->S3VisionModuleMovePosition));

	(*mapProductionSignedLong).insert(pair<string, signed long*>("PickAndPlace1ZAxisMovePosition", &smCustomerProduction->PickAndPlace1ZAxisMovePosition));
	(*mapProductionSignedLong).insert(pair<string, signed long*>("PickAndPlace1ThetaAxisMovePosition", &smCustomerProduction->PickAndPlace1ThetaAxisMovePosition));
	(*mapProductionSignedLong).insert(pair<string, signed long*>("PickAndPlace2ZAxisMovePosition", &smCustomerProduction->PickAndPlace2ZAxisMovePosition));
	(*mapProductionSignedLong).insert(pair<string, signed long*>("PickAndPlace2ThetaAxisMovePosition", &smCustomerProduction->PickAndPlace2ThetaAxisMovePosition));

	(*mapProductionSignedLong).insert(pair<string, signed long*>("PickAndPlace1XAxisEncoderPosition", &smCustomerProduction->PickAndPlace1XAxisEncoderPosition));
	(*mapProductionSignedLong).insert(pair<string, signed long*>("PickAndPlace1YAxisEncoderPosition", &smCustomerProduction->PickAndPlace1YAxisEncoderPosition));
	(*mapProductionSignedLong).insert(pair<string, signed long*>("PickAndPlace1ThetaAxisEncoderPosition", &smCustomerProduction->PickAndPlace1ThetaAxisEncoderPosition));
	(*mapProductionSignedLong).insert(pair<string, signed long*>("PickAndPlace1ZAxisEncoderPosition", &smCustomerProduction->PickAndPlace1ZAxisEncoderPosition));

	(*mapProductionSignedLong).insert(pair<string, signed long*>("PickAndPlace2XAxisEncoderPosition", &smCustomerProduction->PickAndPlace2XAxisEncoderPosition));
	(*mapProductionSignedLong).insert(pair<string, signed long*>("PickAndPlace2YAxisEncoderPosition", &smCustomerProduction->PickAndPlace2YAxisEncoderPosition));
	(*mapProductionSignedLong).insert(pair<string, signed long*>("PickAndPlace2ThetaAxisEncoderPosition", &smCustomerProduction->PickAndPlace2ThetaAxisEncoderPosition));
	(*mapProductionSignedLong).insert(pair<string, signed long*>("PickAndPlace2ZAxisEncoderPosition", &smCustomerProduction->PickAndPlace2ZAxisEncoderPosition));

	(*mapProductionSignedLong).insert(pair<string, signed long*>("InputVisionZAxisEncoderPosition", &smCustomerProduction->InputVisionZAxisEncoderPosition));
	(*mapProductionSignedLong).insert(pair<string, signed long*>("S2VisionZAxisEncoderPosition", &smCustomerProduction->S2VisionZAxisEncoderPosition));
	(*mapProductionSignedLong).insert(pair<string, signed long*>("S3VisionZAxisEncoderPosition", &smCustomerProduction->S3VisionZAxisEncoderPosition));

	(*mapProductionSignedLong).insert(pair<string, signed long*>("S1VisionZAxisEncoderPosition", &smCustomerProduction->S1VisionZAxisEncoderPosition));

	(*mapProductionSignedLong).insert(pair<string, signed long*>("OutputThetaOffset", &smCustomerProduction->OutputThetaOffset));
	return 0;
}

int MapProductionSignedLongCustomer(map<string, signed long*> *mapProductionSignedLong, CustomerSharedMemoryProduction *customerProduction)
{
	return 0;
}

int MapProductionArrayIntPlatform(map<string, int*> *mapProductionArrayInt, CustomerSharedMemoryProduction *customerProduction)
{
	char chVariable[256];
	memset(chVariable, 0, sizeof(chVariable));	
	for (int i = 0; i < 100; i++)
	{
		sprintf_s(chVariable, sizeof(chVariable), "nTime%u", i);
		(*mapProductionArrayInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->nTime[i]));
	}
	return 0;
}

int MapProductionArrayDoubleProduct(map<string, double*> *mapProductionArrayDouble, CustomerSharedMemoryProduction *customerProduction)
{
	char chVariable[256];
	memset(chVariable, 0, sizeof(chVariable));
	for (int i = 0; i < 360; i++)
	{
		sprintf_s(chVariable, sizeof(chVariable), "PickAndPlaceLookUpTableData1%uAngle", i);
		(*mapProductionArrayDouble).insert(pair<string, double*>(chVariable, &smCustomerProduction->PickAndPlaceLookUpTableData1[i].Angle));
		sprintf_s(chVariable, sizeof(chVariable), "PickAndPlaceLookUpTableData1%uXOffset", i);
		(*mapProductionArrayDouble).insert(pair<string, double*>(chVariable, &smCustomerProduction->PickAndPlaceLookUpTableData1[i].XOffset));
		sprintf_s(chVariable, sizeof(chVariable), "PickAndPlaceLookUpTableData1%uYOffset", i);
		(*mapProductionArrayDouble).insert(pair<string, double*>(chVariable, &smCustomerProduction->PickAndPlaceLookUpTableData1[i].YOffset));
	}
	memset(chVariable, 0, sizeof(chVariable));
	for (int i = 0; i < 360; i++)
	{
		sprintf_s(chVariable, sizeof(chVariable), "PickAndPlaceLookUpTableData2%uAngle", i);
		(*mapProductionArrayDouble).insert(pair<string, double*>(chVariable, &smCustomerProduction->PickAndPlaceLookUpTableData2[i].Angle));
		sprintf_s(chVariable, sizeof(chVariable), "PickAndPlaceLookUpTableData2%uXOffset", i);
		(*mapProductionArrayDouble).insert(pair<string, double*>(chVariable, &smCustomerProduction->PickAndPlaceLookUpTableData2[i].XOffset));
		sprintf_s(chVariable, sizeof(chVariable), "PickAndPlaceLookUpTableData2%uYOffset", i);
		(*mapProductionArrayDouble).insert(pair<string, double*>(chVariable, &smCustomerProduction->PickAndPlaceLookUpTableData2[i].YOffset));
	}
	memset(chVariable, 0, sizeof(chVariable));
	return 0;
}

int MapProductionArrayIntProduct(map<string, int*> *mapProductionArrayInt, CustomerSharedMemoryProduction *customerProduction)
{
	char chVariable[256];
	memset(chVariable, 0, sizeof(chVariable));
	for (int i = 0; i < 2; i++)
	{
		sprintf_s(chVariable, sizeof(chVariable), "PickUpHeadCount%u", i);
		(*mapProductionArrayInt).insert(pair<string, int*>(chVariable, &smCustomerProduction->PickUpHeadCount[i]));
	}
	return 0;
}

int MapProductionArrayIntCustomer(map<string, int*> *mapProductionArrayInt, CustomerSharedMemoryProduction *customerProduction)
{
	return 0;
}

int MapProductionBoolProduct(map<string, bool*> *mapProductionBool, CustomerSharedMemoryProduction *customerProduction)
{
	(*mapProductionBool).insert(pair<string, bool*>("IsInputVisionSendRC", &customerProduction->IsInputVisionSendRC));
	(*mapProductionBool).insert(pair<string, bool*>("IsOutputVisionSendRC", &customerProduction->IsOutputVisionSendRC));
	(*mapProductionBool).insert(pair<string, bool*>("IsInputVisionRetryXYT", &customerProduction->IsInputVisionRetryXYT));
	(*mapProductionBool).insert(pair<string, bool*>("IsOutputVisionRetryXYT", &customerProduction->IsOutputVisionRetryXYT));

	(*mapProductionBool).insert(pair<string, bool*>("IsS1VisionFistSnap", &customerProduction->IsS1VisionFistSnap));
	(*mapProductionBool).insert(pair<string, bool*>("IsUpdateMESAgain", &customerProduction->IsUpdateMESAgain));
	
	return 0;
}
int MapProductionArrayBoolProduct(map<string, bool*> *mapProductionArrayBool, CustomerSharedMemoryProduction *customerProduction)
{
	char chVariable[256];
	memset(chVariable, 0, sizeof(chVariable));
	return 0;
}
int MapProductionDoubleProduct(map<string, double*> *mapProductionDouble, CustomerSharedMemoryProduction *customerProduction)
{
	(*mapProductionDouble).insert(pair<string, double*>("THK1CurrentPressureValue", &smCustomerProduction->THK1CurrentPressureValue));
	(*mapProductionDouble).insert(pair<string, double*>("THK1CurrentForceValue", &smCustomerProduction->THK1CurrentForceValue));
	(*mapProductionDouble).insert(pair<string, double*>("THK1CurrentFlowRate", &smCustomerProduction->THK1CurrentFlowRate));

	(*mapProductionDouble).insert(pair<string, double*>("THK2CurrentPressureValue", &smCustomerProduction->THK2CurrentPressureValue));
	(*mapProductionDouble).insert(pair<string, double*>("THK2CurrentForceValue", &smCustomerProduction->THK2CurrentForceValue));
	(*mapProductionDouble).insert(pair<string, double*>("THK2CurrentFlowRate", &smCustomerProduction->THK2CurrentFlowRate));
	return 0;
}
int MapCustomizeBoolPlatform(map<string, bool*> *mapCustomizeBool, CustomerSharedMemoryCustomize *customerCustomize)
{
	return 0;
}
int MapCustomizeBoolProduct(map<string, bool*> *mapCustomizeBool, CustomerSharedMemoryCustomize *customerCustomize)
{
	(*mapCustomizeBool).insert(pair<string, bool*>("EnableMotionController1", &customerCustomize->EnableMotionController1));
	(*mapCustomizeBool).insert(pair<string, bool*>("EnableMotionController2", &customerCustomize->EnableMotionController2));
	(*mapCustomizeBool).insert(pair<string, bool*>("EnableMotionController3", &customerCustomize->EnableMotionController3));
	(*mapCustomizeBool).insert(pair<string, bool*>("EnableMotionController4", &customerCustomize->EnableMotionController4));
	(*mapCustomizeBool).insert(pair<string, bool*>("EnableMotionController5", &customerCustomize->EnableMotionController5));
	(*mapCustomizeBool).insert(pair<string, bool*>("EnableMotionController6", &customerCustomize->EnableMotionController6));
	(*mapCustomizeBool).insert(pair<string, bool*>("EnableMotionController7", &customerCustomize->EnableMotionController7));

	(*mapCustomizeBool).insert(pair<string, bool*>("EnablePickAndPlace1XAxisMotor", &customerCustomize->EnablePickAndPlace1XAxisMotor));
	(*mapCustomizeBool).insert(pair<string, bool*>("EnablePickAndPlace2XAxisMotor", &customerCustomize->EnablePickAndPlace2XAxisMotor));

	(*mapCustomizeBool).insert(pair<string, bool*>("EnablePickAndPlace1YAxisMotor", &customerCustomize->EnablePickAndPlace1YAxisMotor));
	(*mapCustomizeBool).insert(pair<string, bool*>("EnableInputTrayTableXAxisMotor", &customerCustomize->EnableInputTrayTableXAxisMotor));
	(*mapCustomizeBool).insert(pair<string, bool*>("EnableInputTrayTableYAxisMotor", &customerCustomize->EnableInputTrayTableYAxisMotor));
	(*mapCustomizeBool).insert(pair<string, bool*>("EnableInputTrayTableZAxisMotor", &customerCustomize->EnableInputTrayTableZAxisMotor));

	(*mapCustomizeBool).insert(pair<string, bool*>("EnablePickAndPlace2YAxisMotor", &customerCustomize->EnablePickAndPlace2YAxisMotor));
	(*mapCustomizeBool).insert(pair<string, bool*>("EnableOutputTrayTableXAxisMotor", &customerCustomize->EnableOutputTrayTableXAxisMotor));
	(*mapCustomizeBool).insert(pair<string, bool*>("EnableOutputTrayTableYAxisMotor", &customerCustomize->EnableOutputTrayTableYAxisMotor));
	(*mapCustomizeBool).insert(pair<string, bool*>("EnableOutputTrayTableZAxisMotor", &customerCustomize->EnableOutputTrayTableZAxisMotor));

	(*mapCustomizeBool).insert(pair<string, bool*>("EnableInputVisionMotor", &customerCustomize->EnableInputVisionMotor));
	(*mapCustomizeBool).insert(pair<string, bool*>("EnableS2VisionMotor", &customerCustomize->EnableS2VisionMotor));

	(*mapCustomizeBool).insert(pair<string, bool*>("EnableS1VisionMotor", &customerCustomize->EnableS1VisionMotor));
	(*mapCustomizeBool).insert(pair<string, bool*>("EnableS3VisionMotor", &customerCustomize->EnableS3VisionMotor));

	(*mapCustomizeBool).insert(pair<string, bool*>("EnablePickAndPlace1Module", &customerCustomize->EnablePickAndPlace1Module));
	(*mapCustomizeBool).insert(pair<string, bool*>("EnablePickAndPlace2Module", &customerCustomize->EnablePickAndPlace2Module));

	(*mapCustomizeBool).insert(pair<string, bool*>("EnableInputVisionModule", &customerCustomize->EnableInputVisionModule));
	(*mapCustomizeBool).insert(pair<string, bool*>("EnableBottomVisionModule", &customerCustomize->EnableBottomVisionModule));
	(*mapCustomizeBool).insert(pair<string, bool*>("EnableS2VisionModule", &customerCustomize->EnableS2VisionModule));
	(*mapCustomizeBool).insert(pair<string, bool*>("EnableS1VisionModule", &customerCustomize->EnableS1VisionModule));
	(*mapCustomizeBool).insert(pair<string, bool*>("EnableS3VisionModule", &customerCustomize->EnableS3VisionModule));
	(*mapCustomizeBool).insert(pair<string, bool*>("EnableOutputVisionModule", &customerCustomize->EnableOutputVisionModule));

	return 0;
}

int MapCustomizeBoolCustomer(map<string, bool*> *mapCustomizeBool, CustomerSharedMemoryCustomize *customerCustomize)
{
	return 0;
}

int MapIOArrayUnsignedLongPlatform(map<string, unsigned long*> *mapIOArrayUnsignedLong, CustomerSharedMemoryIO *customerIO)
{
	return 0;
}

int MapIOArrayUnsignedLongProduct(map<string, unsigned long*> *mapIOArrayUnsignedLong, CustomerSharedMemoryIO *customerIO)
{
	char chVariable[256];
	memset(chVariable, 0, sizeof(chVariable));
	for (int i = 0; i < 21; i++)
	{
		sprintf_s(chVariable, sizeof(chVariable), "ucInput%u", i);
		(*mapIOArrayUnsignedLong).insert(pair<string, unsigned long*>(chVariable, &customerIO->ucInput[i]));
		sprintf_s(chVariable, sizeof(chVariable), "ucOutput%u", i);
		(*mapIOArrayUnsignedLong).insert(pair<string, unsigned long*>(chVariable, &customerIO->ucOutput[i]));
		sprintf_s(chVariable, sizeof(chVariable), "nArrayOutput%u", i);
		(*mapIOArrayUnsignedLong).insert(pair<string, unsigned long*>(chVariable, &customerIO->nArrayOutput[i]));
	}
	memset(chVariable, 0, sizeof(chVariable));
	return 0;
}

int MapIOArrayUnsignedLongCustomer(map<string, unsigned long*> *mapIOArrayUnsignedLong, CustomerSharedMemoryIO *customerIO)
{
	return 0;
}
int MapModuleStatusBoolProduct(map<string, bool*> *mapModuleStatusBool, CustomerSharedMemoryModuleStatus *customerModuleStatus)
{
	(*mapModuleStatusBool).insert(pair<string, bool*>("IsPickAndPlace1XAxisMotorHome", &customerModuleStatus->IsPickAndPlace1XAxisMotorHome));
	(*mapModuleStatusBool).insert(pair<string, bool*>("IsPickAndPlace2XAxisMotorHome", &customerModuleStatus->IsPickAndPlace2XAxisMotorHome));

	(*mapModuleStatusBool).insert(pair<string, bool*>("IsPickAndPlace1YAxisMotorHome", &customerModuleStatus->IsPickAndPlace1YAxisMotorHome));
	(*mapModuleStatusBool).insert(pair<string, bool*>("IsInputTrayTableXAxisMotorHome", &customerModuleStatus->IsInputTrayTableXAxisMotorHome));
	(*mapModuleStatusBool).insert(pair<string, bool*>("IsInputTrayTableYAxisMotorHome", &customerModuleStatus->IsInputTrayTableYAxisMotorHome));
	(*mapModuleStatusBool).insert(pair<string, bool*>("IsInputTrayTableZAxisMotorHome", &customerModuleStatus->IsInputTrayTableZAxisMotorHome));

	(*mapModuleStatusBool).insert(pair<string, bool*>("IsPickAndPlace2YAxisMotorHome", &customerModuleStatus->IsPickAndPlace2YAxisMotorHome));
	(*mapModuleStatusBool).insert(pair<string, bool*>("IsOutputTrayTableXAxisMotorHome", &customerModuleStatus->IsOutputTrayTableXAxisMotorHome));
	(*mapModuleStatusBool).insert(pair<string, bool*>("IsOutputTrayTableYAxisMotorHome", &customerModuleStatus->IsOutputTrayTableYAxisMotorHome));
	(*mapModuleStatusBool).insert(pair<string, bool*>("IsOutputTrayTableZAxisMotorHome", &customerModuleStatus->IsOutputTrayTableZAxisMotorHome));

	(*mapModuleStatusBool).insert(pair<string, bool*>("IsInputVisionMotorHome", &customerModuleStatus->IsInputVisionMotorHome));
	(*mapModuleStatusBool).insert(pair<string, bool*>("IsS2VisionMotorHome", &customerModuleStatus->IsS2VisionMotorHome));
	(*mapModuleStatusBool).insert(pair<string, bool*>("IsS1VisionMotorHome", &customerModuleStatus->IsS1VisionMotorHome));

	(*mapModuleStatusBool).insert(pair<string, bool*>("IsPickAndPlace1ZAxisMotorHome", &customerModuleStatus->IsPickAndPlace1ZAxisMotorHome));
	(*mapModuleStatusBool).insert(pair<string, bool*>("IsPickAndPlace1ThetaAxisMotorHome", &customerModuleStatus->IsPickAndPlace1ThetaAxisMotorHome));
	(*mapModuleStatusBool).insert(pair<string, bool*>("IsPickAndPlace2ZAxisMotorHome", &customerModuleStatus->IsPickAndPlace2ZAxisMotorHome));
	(*mapModuleStatusBool).insert(pair<string, bool*>("IsPickAndPlace2ThetaAxisMotorHome", &customerModuleStatus->IsPickAndPlace2ThetaAxisMotorHome));

	(*mapModuleStatusBool).insert(pair<string, bool*>("IsPickAndPlace1XAxisMoving", &customerModuleStatus->IsPickAndPlace1XAxisMoving));
	(*mapModuleStatusBool).insert(pair<string, bool*>("IsPickAndPlace1YAxisMoving", &customerModuleStatus->IsPickAndPlace1YAxisMoving));
	(*mapModuleStatusBool).insert(pair<string, bool*>("IsPickAndPlace2XAxisMoving", &customerModuleStatus->IsPickAndPlace2XAxisMoving));
	(*mapModuleStatusBool).insert(pair<string, bool*>("IsPickAndPlace2YAxisMoving", &customerModuleStatus->IsPickAndPlace2YAxisMoving));
	return 0;
}

int MapEventPlatform(map<string, sEvent*> *mapEvent, CustomerSharedMemoryEvent *smCustomerEvent)
{
	(*mapEvent).insert(pair<string, sEvent*>("ExitRTX", &smCustomerEvent->ExitRTX));
	(*mapEvent).insert(pair<string, sEvent*>("ExitRTXDone", &smCustomerEvent->ExitRTXDone));
	(*mapEvent).insert(pair<string, sEvent*>("RTXWaitThreadExitTimeout", &smCustomerEvent->RTXWaitThreadExitTimeout));
	(*mapEvent).insert(pair<string, sEvent*>("Alarm", &smCustomerEvent->Alarm));
	(*mapEvent).insert(pair<string, sEvent*>("StepMode", &smCustomerEvent->StepMode));
	(*mapEvent).insert(pair<string, sEvent*>("IsStepButtonTrigger", &smCustomerEvent->IsStepButtonTrigger));
	(*mapEvent).insert(pair<string, sEvent*>("GPCS_RSEQ_ABORT", &smCustomerEvent->GPCS_RSEQ_ABORT));
	(*mapEvent).insert(pair<string, sEvent*>("RTXSoftwareInitializeDone", &smCustomerEvent->RTXSoftwareInitializeDone));
	(*mapEvent).insert(pair<string, sEvent*>("JobMode", &smCustomerEvent->JobMode));
	(*mapEvent).insert(pair<string, sEvent*>("PowerLost", &smCustomerEvent->PowerLost));
	(*mapEvent).insert(pair<string, sEvent*>("CycleMode", &smCustomerEvent->CycleMode));

	(*mapEvent).insert(pair<string, sEvent*>("Homed", &smCustomerEvent->Homed));
	(*mapEvent).insert(pair<string, sEvent*>("StartPause", &smCustomerEvent->StartPause));
	(*mapEvent).insert(pair<string, sEvent*>("StartJob", &smCustomerEvent->StartJob));
	(*mapEvent).insert(pair<string, sEvent*>("StartReset", &smCustomerEvent->StartReset));
	(*mapEvent).insert(pair<string, sEvent*>("StartEnding", &smCustomerEvent->StartEnding));
	(*mapEvent).insert(pair<string, sEvent*>("StartSetup", &smCustomerEvent->StartSetup));
	(*mapEvent).insert(pair<string, sEvent*>("WaitingResponseDone", &smCustomerEvent->WaitingResponseDone));

	(*mapEvent).insert(pair<string, sEvent*>("JobStart", &smCustomerEvent->JobStart));
	(*mapEvent).insert(pair<string, sEvent*>("JobPause", &smCustomerEvent->JobPause));
	(*mapEvent).insert(pair<string, sEvent*>("JobStop", &smCustomerEvent->JobStop));
	(*mapEvent).insert(pair<string, sEvent*>("JobStep", &smCustomerEvent->JobStep));
	(*mapEvent).insert(pair<string, sEvent*>("JobSlow", &smCustomerEvent->JobSlow));

	(*mapEvent).insert(pair<string, sEvent*>("GMNL_RMNL_MANUAL_MODE", &smCustomerEvent->GMNL_RMNL_MANUAL_MODE));
	(*mapEvent).insert(pair<string, sEvent*>("StartManualMode", &smCustomerEvent->StartManualMode));
	(*mapEvent).insert(pair<string, sEvent*>("StopManualMode", &smCustomerEvent->StopManualMode));
	(*mapEvent).insert(pair<string, sEvent*>("SeqGUISendMsgDone", &smCustomerEvent->SeqGUISendMsgDone));
	(*mapEvent).insert(pair<string, sEvent*>("SEQ_GUI_SEND_MSG_DONE", &smCustomerEvent->SEQ_GUI_SEND_MSG_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("GUI_SEQ_RECEIVE_MSG_DONE", &smCustomerEvent->GUI_SEQ_RECEIVE_MSG_DONE));
	
	(*mapEvent).insert(pair<string, sEvent*>("GTCH_RTCH_TEACH_MODE", &smCustomerEvent->GTCH_RTCH_TEACH_MODE));
	(*mapEvent).insert(pair<string, sEvent*>("GTCH_RTCH_TEACH_POINT", &smCustomerEvent->GTCH_RTCH_TEACH_POINT));
	(*mapEvent).insert(pair<string, sEvent*>("GTCH_RTCH_MOTOR_ON", &smCustomerEvent->GTCH_RTCH_MOTOR_ON));
	(*mapEvent).insert(pair<string, sEvent*>("GTCH_RTCH_MOTOR_OFF", &smCustomerEvent->GTCH_RTCH_MOTOR_OFF));
	(*mapEvent).insert(pair<string, sEvent*>("GTCH_RTCH_MOTOR_HOME", &smCustomerEvent->GTCH_RTCH_MOTOR_HOME));
	(*mapEvent).insert(pair<string, sEvent*>("GTCH_RTCH_MOTOR_MV_ABS", &smCustomerEvent->GTCH_RTCH_MOTOR_MV_ABS));
	(*mapEvent).insert(pair<string, sEvent*>("GTCH_RTCH_MOTOR_MV_REL", &smCustomerEvent->GTCH_RTCH_MOTOR_MV_REL));
	(*mapEvent).insert(pair<string, sEvent*>("GTCH_RTCH_MOTOR_STOP", &smCustomerEvent->GTCH_RTCH_MOTOR_STOP));
	(*mapEvent).insert(pair<string, sEvent*>("GTCH_RTCH_MOTOR_SPEED", &smCustomerEvent->GTCH_RTCH_MOTOR_SPEED));
	(*mapEvent).insert(pair<string, sEvent*>("GTCH_RTCH_MOTOR_SEMI_TEACH", &smCustomerEvent->GTCH_RTCH_MOTOR_SEMI_TEACH));
	
	(*mapEvent).insert(pair<string, sEvent*>("GIO_RIO_IO_MODE", &smCustomerEvent->GIO_RIO_IO_MODE));
	(*mapEvent).insert(pair<string, sEvent*>("GIO_RIO_SET_OUTPUT", &smCustomerEvent->GIO_RIO_SET_OUTPUT));
	
	(*mapEvent).insert(pair<string, sEvent*>("GPCS_RPCS_UPDATE_SETTING", &smCustomerEvent->GPCS_RPCS_UPDATE_SETTING));
	(*mapEvent).insert(pair<string, sEvent*>("GPCS_RPCS_UPDATE_TEACHPOINT", &smCustomerEvent->GPCS_RPCS_UPDATE_TEACHPOINT));
	(*mapEvent).insert(pair<string, sEvent*>("GPCS_RPCS_BYPASS_DOOR", &smCustomerEvent->GPCS_RPCS_BYPASS_DOOR));

	(*mapEvent).insert(pair<string, sEvent*>("GGUI_RSEQ_DRY_RUN_MODE", &smCustomerEvent->GGUI_RSEQ_DRY_RUN_MODE));
	(*mapEvent).insert(pair<string, sEvent*>("GGUI_RSEQ_CHECK_SEQUENCE", &smCustomerEvent->GGUI_RSEQ_CHECK_SEQUENCE));
	
	(*mapEvent).insert(pair<string, sEvent*>("RSEQ_GGUI_UPDATE_MOTION_CHART", &smCustomerEvent->RSEQ_GGUI_UPDATE_MOTION_CHART));
	
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_RMAIN_MAIN_SEQ_END", &smCustomerEvent->RTHD_RMAIN_MAIN_SEQ_END));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_RMAIN_IO_SCAN_END", &smCustomerEvent->RTHD_RMAIN_IO_SCAN_END));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_RMAIN_IO_OPREATION_END", &smCustomerEvent->RTHD_RMAIN_IO_OPREATION_END));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_RMAIN_TEACH_POINT_END", &smCustomerEvent->RTHD_RMAIN_TEACH_POINT_END));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_RMAIN_MANUAL_END", &smCustomerEvent->RTHD_RMAIN_MANUAL_END));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_RMAIN_MAINTENANCE_END", &smCustomerEvent->RTHD_RMAIN_MAINTENANCE_END));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_RMAIN_STATE_END", &smCustomerEvent->RTHD_RMAIN_STATE_END));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_RMAIN_AUTO_OPERATION_END", &smCustomerEvent->RTHD_RMAIN_AUTO_OPERATION_END));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_RMAIN_DUMMY_END", &smCustomerEvent->RTHD_RMAIN_DUMMY_END));

	return 0;
}
int MapEventProduct(map<string, sEvent*> *mapEvent, CustomerSharedMemoryEvent *smCustomerEvent)
{

	(*mapEvent).insert(pair<string, sEvent*>("StartInitializeMotionController1", &smCustomerEvent->StartInitializeMotionController1));
	(*mapEvent).insert(pair<string, sEvent*>("InitializeMotionController1Done", &smCustomerEvent->InitializeMotionController1Done));
	(*mapEvent).insert(pair<string, sEvent*>("StartInitializeMotionController2", &smCustomerEvent->StartInitializeMotionController2));
	(*mapEvent).insert(pair<string, sEvent*>("InitializeMotionController2Done", &smCustomerEvent->InitializeMotionController2Done));
	(*mapEvent).insert(pair<string, sEvent*>("StartInitializeMotionController3", &smCustomerEvent->StartInitializeMotionController3));
	(*mapEvent).insert(pair<string, sEvent*>("InitializeMotionController3Done", &smCustomerEvent->InitializeMotionController3Done));
	(*mapEvent).insert(pair<string, sEvent*>("StartInitializeMotionController4", &smCustomerEvent->StartInitializeMotionController4));
	(*mapEvent).insert(pair<string, sEvent*>("InitializeMotionController4Done", &smCustomerEvent->InitializeMotionController4Done));
	(*mapEvent).insert(pair<string, sEvent*>("StartInitializeMotionController5", &smCustomerEvent->StartInitializeMotionController5));
	(*mapEvent).insert(pair<string, sEvent*>("InitializeMotionController5Done", &smCustomerEvent->InitializeMotionController5Done));
	(*mapEvent).insert(pair<string, sEvent*>("StartInitializeMotionController6", &smCustomerEvent->StartInitializeMotionController6));
	(*mapEvent).insert(pair<string, sEvent*>("InitializeMotionController6Done", &smCustomerEvent->InitializeMotionController6Done));
	(*mapEvent).insert(pair<string, sEvent*>("StartInitializeMotionController7", &smCustomerEvent->StartInitializeMotionController7));
	(*mapEvent).insert(pair<string, sEvent*>("InitializeMotionController7Done", &smCustomerEvent->InitializeMotionController7Done));

	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace1YAxisMotorHome", &smCustomerEvent->StartPickAndPlace1YAxisMotorHome));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace1YAxisMotorHomeDone", &smCustomerEvent->PickAndPlace1YAxisMotorHomeDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace1YAxisMotorSettingUp", &smCustomerEvent->StartPickAndPlace1YAxisMotorSettingUp));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace1YAxisMotorSettingUpDone", &smCustomerEvent->PickAndPlace1YAxisMotorSettingUpDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace1YAxisMotorMove", &smCustomerEvent->StartPickAndPlace1YAxisMotorMove));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace1YAxisMotorMoveDone", &smCustomerEvent->PickAndPlace1YAxisMotorMoveDone));

	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace1YAxisMotorMoveToInputPosition", &smCustomerEvent->StartPickAndPlace1YAxisMotorMoveToInputPosition));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace1YAxisMotorMoveToInputPositionDone", &smCustomerEvent->PickAndPlace1YAxisMotorMoveToInputPositionDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace1YAxisMotorMoveToS1Position", &smCustomerEvent->StartPickAndPlace1YAxisMotorMoveToS1Position));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace1YAxisMotorMoveToS1PositionDone", &smCustomerEvent->PickAndPlace1YAxisMotorMoveToS1PositionDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace1YAxisMotorMoveToS3Position", &smCustomerEvent->StartPickAndPlace1YAxisMotorMoveToS3Position));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace1YAxisMotorMoveToS3PositionDone", &smCustomerEvent->PickAndPlace1YAxisMotorMoveToS3PositionDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace1YAxisMotorMoveToOutputPosition", &smCustomerEvent->StartPickAndPlace1YAxisMotorMoveToOutputPosition));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace1YAxisMotorMoveToOutputPositionDone", &smCustomerEvent->PickAndPlace1YAxisMotorMoveToOutputPositionDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace1YAxisMotorMoveToStandbyPosition", &smCustomerEvent->StartPickAndPlace1YAxisMotorMoveToStandbyPosition));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace1YAxisMotorMoveToStandbyPositionDone", &smCustomerEvent->PickAndPlace1YAxisMotorMoveToStandbyPositionDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace1YAxisMotorStop", &smCustomerEvent->StartPickAndPlace1YAxisMotorStop));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace1YAxisMotorStopDone", &smCustomerEvent->PickAndPlace1YAxisMotorStopDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace1YAxisMotorOff", &smCustomerEvent->StartPickAndPlace1YAxisMotorOff));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace1YAxisMotorOffDone", &smCustomerEvent->PickAndPlace1YAxisMotorOffDone));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace1YAxisMotorMoveCurve", &smCustomerEvent->PickAndPlace1YAxisMotorMoveCurve));

	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace1YAxisMotorMoveToInputPositionCurve", &smCustomerEvent->StartPickAndPlace1YAxisMotorMoveToInputPositionCurve));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace1YAxisMotorMoveToInputPositionCurveDone", &smCustomerEvent->PickAndPlace1YAxisMotorMoveToInputPositionCurveDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace1YAxisMotorMoveToOutputPositionCurve", &smCustomerEvent->StartPickAndPlace1YAxisMotorMoveToOutputPositionCurve));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace1YAxisMotorMoveToOutputPositionCurveDone", &smCustomerEvent->PickAndPlace1YAxisMotorMoveToOutputPositionCurveDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace1YAxisMotorMoveCurve", &smCustomerEvent->StartPickAndPlace1YAxisMotorMoveCurve));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace1YAxisMotorMoveCurveDone", &smCustomerEvent->PickAndPlace1YAxisMotorMoveCurveDone));


	(*mapEvent).insert(pair<string, sEvent*>("StartInputTrayTableXAxisMotorHome", &smCustomerEvent->StartInputTrayTableXAxisMotorHome));
	(*mapEvent).insert(pair<string, sEvent*>("InputTrayTableXAxisMotorHomeDone", &smCustomerEvent->InputTrayTableXAxisMotorHomeDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartInputTrayTableXAxisMotorSettingUp", &smCustomerEvent->StartInputTrayTableXAxisMotorSettingUp));
	(*mapEvent).insert(pair<string, sEvent*>("InputTrayTableXAxisMotorSettingUpDone", &smCustomerEvent->InputTrayTableXAxisMotorSettingUpDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartInputTrayTableXAxisMotorMove", &smCustomerEvent->StartInputTrayTableXAxisMotorMove));
	(*mapEvent).insert(pair<string, sEvent*>("InputTrayTableXAxisMotorMoveDone", &smCustomerEvent->InputTrayTableXAxisMotorMoveDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartInputTrayTableXAxisMotorMoveLoad", &smCustomerEvent->StartInputTrayTableXAxisMotorMoveLoad));
	(*mapEvent).insert(pair<string, sEvent*>("InputTrayTableXAxisMotorMoveLoadDone", &smCustomerEvent->InputTrayTableXAxisMotorMoveLoadDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartInputTrayTableXAxisMotorMoveUnload", &smCustomerEvent->StartInputTrayTableXAxisMotorMoveUnload));
	(*mapEvent).insert(pair<string, sEvent*>("InputTrayTableXAxisMotorMoveUnloadDone", &smCustomerEvent->InputTrayTableXAxisMotorMoveUnloadDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartInputTrayTableXAxisMotorMoveCenter", &smCustomerEvent->StartInputTrayTableXAxisMotorMoveCenter));
	(*mapEvent).insert(pair<string, sEvent*>("InputTrayTableXAxisMotorMoveCenterDone", &smCustomerEvent->InputTrayTableXAxisMotorMoveCenterDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartInputTrayTableXAxisMotorStop", &smCustomerEvent->StartInputTrayTableXAxisMotorStop));
	(*mapEvent).insert(pair<string, sEvent*>("InputTrayTableXAxisMotorStopDone", &smCustomerEvent->InputTrayTableXAxisMotorStopDone));

	(*mapEvent).insert(pair<string, sEvent*>("StartInputTrayTableYAxisMotorHome", &smCustomerEvent->StartInputTrayTableYAxisMotorHome));
	(*mapEvent).insert(pair<string, sEvent*>("InputTrayTableYAxisMotorHomeDone", &smCustomerEvent->InputTrayTableYAxisMotorHomeDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartInputTrayTableYAxisMotorSettingUp", &smCustomerEvent->StartInputTrayTableYAxisMotorSettingUp));
	(*mapEvent).insert(pair<string, sEvent*>("InputTrayTableYAxisMotorSettingUpDone", &smCustomerEvent->InputTrayTableYAxisMotorSettingUpDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartInputTrayTableYAxisMotorMove", &smCustomerEvent->StartInputTrayTableYAxisMotorMove));
	(*mapEvent).insert(pair<string, sEvent*>("InputTrayTableYAxisMotorMoveDone", &smCustomerEvent->InputTrayTableYAxisMotorMoveDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartInputTrayTableYAxisMotorMoveLoad", &smCustomerEvent->StartInputTrayTableYAxisMotorMoveLoad));
	(*mapEvent).insert(pair<string, sEvent*>("InputTrayTableYAxisMotorMoveLoadDone", &smCustomerEvent->InputTrayTableYAxisMotorMoveLoadDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartInputTrayTableYAxisMotorMoveUnload", &smCustomerEvent->StartInputTrayTableYAxisMotorMoveUnload));
	(*mapEvent).insert(pair<string, sEvent*>("InputTrayTableYAxisMotorMoveUnloadDone", &smCustomerEvent->InputTrayTableYAxisMotorMoveUnloadDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartInputTrayTableYAxisMotorMoveCenter", &smCustomerEvent->StartInputTrayTableYAxisMotorMoveCenter));
	(*mapEvent).insert(pair<string, sEvent*>("InputTrayTableYAxisMotorMoveCenterDone", &smCustomerEvent->InputTrayTableYAxisMotorMoveCenterDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartInputTrayTableYAxisMotorStop", &smCustomerEvent->StartInputTrayTableYAxisMotorStop));
	(*mapEvent).insert(pair<string, sEvent*>("InputTrayTableYAxisMotorStopDone", &smCustomerEvent->InputTrayTableYAxisMotorStopDone));

	(*mapEvent).insert(pair<string, sEvent*>("StartInputTrayTableZAxisMotorHome", &smCustomerEvent->StartInputTrayTableZAxisMotorHome));
	(*mapEvent).insert(pair<string, sEvent*>("InputTrayTableZAxisMotorHomeDone", &smCustomerEvent->InputTrayTableZAxisMotorHomeDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartInputTrayTableZAxisMotorSettingUp", &smCustomerEvent->StartInputTrayTableZAxisMotorSettingUp));
	(*mapEvent).insert(pair<string, sEvent*>("InputTrayTableZAxisMotorSettingUpDone", &smCustomerEvent->InputTrayTableZAxisMotorSettingUpDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartInputTrayTableZAxisMotorMove", &smCustomerEvent->StartInputTrayTableZAxisMotorMove));
	(*mapEvent).insert(pair<string, sEvent*>("InputTrayTableZAxisMotorMoveDone", &smCustomerEvent->InputTrayTableZAxisMotorMoveDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartInputTrayTableZAxisMotorMoveDown", &smCustomerEvent->StartInputTrayTableZAxisMotorMoveDown));
	(*mapEvent).insert(pair<string, sEvent*>("InputTrayTableZAxisMotorMoveDownDone", &smCustomerEvent->InputTrayTableZAxisMotorMoveDownDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartInputTrayTableZAxisMotorMoveLoad", &smCustomerEvent->StartInputTrayTableZAxisMotorMoveLoad));
	(*mapEvent).insert(pair<string, sEvent*>("InputTrayTableZAxisMotorMoveLoadDone", &smCustomerEvent->InputTrayTableZAxisMotorMoveLoadDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartInputTrayTableZAxisMotorMoveSingulation", &smCustomerEvent->StartInputTrayTableZAxisMotorMoveSingulation));
	(*mapEvent).insert(pair<string, sEvent*>("InputTrayTableZAxisMotorMoveSingulationDone", &smCustomerEvent->InputTrayTableZAxisMotorMoveSingulationDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartInputTrayTableZAxisMotorMoveUnload", &smCustomerEvent->StartInputTrayTableZAxisMotorMoveUnload));
	(*mapEvent).insert(pair<string, sEvent*>("InputTrayTableZAxisMotorMoveUnloadDone", &smCustomerEvent->InputTrayTableZAxisMotorMoveUnloadDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartInputTrayTableZAxisMotorStop", &smCustomerEvent->StartInputTrayTableZAxisMotorStop));
	(*mapEvent).insert(pair<string, sEvent*>("InputTrayTableZAxisMotorStopDone", &smCustomerEvent->InputTrayTableZAxisMotorStopDone));

	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace2YAxisMotorHome", &smCustomerEvent->StartPickAndPlace2YAxisMotorHome));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace2YAxisMotorHomeDone", &smCustomerEvent->PickAndPlace2YAxisMotorHomeDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace2YAxisMotorSettingUp", &smCustomerEvent->StartPickAndPlace2YAxisMotorSettingUp));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace2YAxisMotorSettingUpDone", &smCustomerEvent->PickAndPlace2YAxisMotorSettingUpDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace2YAxisMotorMove", &smCustomerEvent->StartPickAndPlace2YAxisMotorMove));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace2YAxisMotorMoveDone", &smCustomerEvent->PickAndPlace2YAxisMotorMoveDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace2YAxisMotorMoveToInputPosition", &smCustomerEvent->StartPickAndPlace2YAxisMotorMoveToInputPosition));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace2YAxisMotorMoveToInputPositionDone", &smCustomerEvent->PickAndPlace2YAxisMotorMoveToInputPositionDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace2YAxisMotorMoveToS1Position", &smCustomerEvent->StartPickAndPlace2YAxisMotorMoveToS1Position));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace2YAxisMotorMoveToS1PositionDone", &smCustomerEvent->PickAndPlace2YAxisMotorMoveToS1PositionDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace2YAxisMotorMoveToS3Position", &smCustomerEvent->StartPickAndPlace2YAxisMotorMoveToS3Position));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace2YAxisMotorMoveToS3PositionDone", &smCustomerEvent->PickAndPlace2YAxisMotorMoveToS3PositionDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace2YAxisMotorMoveToOutputPosition", &smCustomerEvent->StartPickAndPlace2YAxisMotorMoveToOutputPosition));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace2YAxisMotorMoveToOutputPositionDone", &smCustomerEvent->PickAndPlace2YAxisMotorMoveToOutputPositionDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace2YAxisMotorMoveToStandbyPosition", &smCustomerEvent->StartPickAndPlace2YAxisMotorMoveToStandbyPosition));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace2YAxisMotorMoveToStandbyPositionDone", &smCustomerEvent->PickAndPlace2YAxisMotorMoveToStandbyPositionDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace2YAxisMotorStop", &smCustomerEvent->StartPickAndPlace2YAxisMotorStop));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace2YAxisMotorStopDone", &smCustomerEvent->PickAndPlace2YAxisMotorStopDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace2YAxisMotorOff", &smCustomerEvent->StartPickAndPlace2YAxisMotorOff));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace2YAxisMotorOffDone", &smCustomerEvent->PickAndPlace2YAxisMotorOffDone));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace2YAxisMotorMoveCurve", &smCustomerEvent->PickAndPlace2YAxisMotorMoveCurve));

	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace2YAxisMotorMoveToInputPositionCurve", &smCustomerEvent->StartPickAndPlace2YAxisMotorMoveToInputPositionCurve));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace2YAxisMotorMoveToInputPositionCurveDone", &smCustomerEvent->PickAndPlace2YAxisMotorMoveToInputPositionCurveDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace2YAxisMotorMoveToOutputPositionCurve", &smCustomerEvent->StartPickAndPlace2YAxisMotorMoveToOutputPositionCurve));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace2YAxisMotorMoveToOutputPositionCurveDone", &smCustomerEvent->PickAndPlace2YAxisMotorMoveToOutputPositionCurveDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace2YAxisMotorMoveCurve", &smCustomerEvent->StartPickAndPlace2YAxisMotorMoveCurve));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace2YAxisMotorMoveCurveDone", &smCustomerEvent->PickAndPlace2YAxisMotorMoveCurveDone));


	(*mapEvent).insert(pair<string, sEvent*>("StartOutputTrayTableXAxisMotorHome", &smCustomerEvent->StartOutputTrayTableXAxisMotorHome));
	(*mapEvent).insert(pair<string, sEvent*>("OutputTrayTableXAxisMotorHomeDone", &smCustomerEvent->OutputTrayTableXAxisMotorHomeDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartOutputTrayTableXAxisMotorSettingUp", &smCustomerEvent->StartOutputTrayTableXAxisMotorSettingUp));
	(*mapEvent).insert(pair<string, sEvent*>("OutputTrayTableXAxisMotorSettingUpDone", &smCustomerEvent->OutputTrayTableXAxisMotorSettingUpDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartOutputTrayTableXAxisMotorMoveLoad", &smCustomerEvent->StartOutputTrayTableXAxisMotorMoveLoad));
	(*mapEvent).insert(pair<string, sEvent*>("OutputTrayTableXAxisMotorMoveLoadDone", &smCustomerEvent->OutputTrayTableXAxisMotorMoveLoadDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartOutputTrayTableXAxisMotorMoveUnload", &smCustomerEvent->StartOutputTrayTableXAxisMotorMoveUnload));
	(*mapEvent).insert(pair<string, sEvent*>("OutputTrayTableXAxisMotorMoveUnloadDone", &smCustomerEvent->OutputTrayTableXAxisMotorMoveUnloadDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartOutputTrayTableXAxisMotorMoveCenter", &smCustomerEvent->StartOutputTrayTableXAxisMotorMoveCenter));
	(*mapEvent).insert(pair<string, sEvent*>("OutputTrayTableXAxisMotorMoveCenterDone", &smCustomerEvent->OutputTrayTableXAxisMotorMoveCenterDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartOutputTrayTableXAxisMotorMoveRejectTrayCenter", &smCustomerEvent->StartOutputTrayTableXAxisMotorMoveRejectTrayCenter));
	(*mapEvent).insert(pair<string, sEvent*>("OutputTrayTableXAxisMotorMoveRejectTrayCenterDone", &smCustomerEvent->OutputTrayTableXAxisMotorMoveRejectTrayCenterDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartOutputTrayTableXAxisMotorMoveManualLoadUnload", &smCustomerEvent->StartOutputTrayTableXAxisMotorMoveManualLoadUnload));
	(*mapEvent).insert(pair<string, sEvent*>("OutputTrayTableXAxisMotorMoveManualLoadUnloadDone", &smCustomerEvent->OutputTrayTableXAxisMotorMoveManualLoadUnloadDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartOutputTrayTableXAxisMotorMove", &smCustomerEvent->StartOutputTrayTableXAxisMotorMove));
	(*mapEvent).insert(pair<string, sEvent*>("OutputTrayTableXAxisMotorMoveDone", &smCustomerEvent->OutputTrayTableXAxisMotorMoveDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartOutputTrayTableXAxisMotorStop", &smCustomerEvent->StartOutputTrayTableXAxisMotorStop));
	(*mapEvent).insert(pair<string, sEvent*>("OutputTrayTableXAxisMotorStopDone", &smCustomerEvent->OutputTrayTableXAxisMotorStopDone));

	(*mapEvent).insert(pair<string, sEvent*>("StartOutputTrayTableYAxisMotorHome", &smCustomerEvent->StartOutputTrayTableYAxisMotorHome));
	(*mapEvent).insert(pair<string, sEvent*>("OutputTrayTableYAxisMotorHomeDone", &smCustomerEvent->OutputTrayTableYAxisMotorHomeDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartOutputTrayTableYAxisMotorSettingUp", &smCustomerEvent->StartOutputTrayTableYAxisMotorSettingUp));
	(*mapEvent).insert(pair<string, sEvent*>("OutputTrayTableYAxisMotorSettingUpDone", &smCustomerEvent->OutputTrayTableYAxisMotorSettingUpDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartOutputTrayTableYAxisMotorMove", &smCustomerEvent->StartOutputTrayTableYAxisMotorMove));
	(*mapEvent).insert(pair<string, sEvent*>("OutputTrayTableYAxisMotorMoveDone", &smCustomerEvent->OutputTrayTableYAxisMotorMoveDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartOutputTrayTableYAxisMotorMoveLoad", &smCustomerEvent->StartOutputTrayTableYAxisMotorMoveLoad));
	(*mapEvent).insert(pair<string, sEvent*>("OutputTrayTableYAxisMotorMoveLoadDone", &smCustomerEvent->OutputTrayTableYAxisMotorMoveLoadDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartOutputTrayTableYAxisMotorMoveUnload", &smCustomerEvent->StartOutputTrayTableYAxisMotorMoveUnload));
	(*mapEvent).insert(pair<string, sEvent*>("OutputTrayTableYAxisMotorMoveUnloadDone", &smCustomerEvent->OutputTrayTableYAxisMotorMoveUnloadDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartOutputTrayTableYAxisMotorMoveCenter", &smCustomerEvent->StartOutputTrayTableYAxisMotorMoveCenter));
	(*mapEvent).insert(pair<string, sEvent*>("OutputTrayTableYAxisMotorMoveCenterDone", &smCustomerEvent->OutputTrayTableYAxisMotorMoveCenterDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartOutputTrayTableYAxisMotorMoveRejectTrayCenter", &smCustomerEvent->StartOutputTrayTableYAxisMotorMoveRejectTrayCenter));
	(*mapEvent).insert(pair<string, sEvent*>("OutputTrayTableYAxisMotorMoveRejectTrayCenterDone", &smCustomerEvent->OutputTrayTableYAxisMotorMoveRejectTrayCenterDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartOutputTrayTableYAxisMotorMoveManualLoadUnload", &smCustomerEvent->StartOutputTrayTableYAxisMotorMoveManualLoadUnload));
	(*mapEvent).insert(pair<string, sEvent*>("OutputTrayTableYAxisMotorMoveManualLoadUnloadDone", &smCustomerEvent->OutputTrayTableYAxisMotorMoveManualLoadUnloadDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartOutputTrayTableYAxisMotorStop", &smCustomerEvent->StartOutputTrayTableYAxisMotorStop));
	(*mapEvent).insert(pair<string, sEvent*>("OutputTrayTableYAxisMotorStopDone", &smCustomerEvent->OutputTrayTableYAxisMotorStopDone));

	(*mapEvent).insert(pair<string, sEvent*>("StartOutputTrayTableZAxisMotorHome", &smCustomerEvent->StartOutputTrayTableZAxisMotorHome));
	(*mapEvent).insert(pair<string, sEvent*>("OutputTrayTableZAxisMotorHomeDone", &smCustomerEvent->OutputTrayTableZAxisMotorHomeDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartOutputTrayTableZAxisMotorSettingUp", &smCustomerEvent->StartOutputTrayTableZAxisMotorSettingUp));
	(*mapEvent).insert(pair<string, sEvent*>("OutputTrayTableZAxisMotorSettingUpDone", &smCustomerEvent->OutputTrayTableZAxisMotorSettingUpDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartOutputTrayTableZAxisMotorMove", &smCustomerEvent->StartOutputTrayTableZAxisMotorMove));
	(*mapEvent).insert(pair<string, sEvent*>("OutputTrayTableZAxisMotorMoveDone", &smCustomerEvent->OutputTrayTableZAxisMotorMoveDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartOutputTrayTableZAxisMotorMoveDown", &smCustomerEvent->StartOutputTrayTableZAxisMotorMoveDown));
	(*mapEvent).insert(pair<string, sEvent*>("OutputTrayTableZAxisMotorMoveDownDone", &smCustomerEvent->OutputTrayTableZAxisMotorMoveDownDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartOutputTrayTableZAxisMotorMoveLoad", &smCustomerEvent->StartOutputTrayTableZAxisMotorMoveLoad));
	(*mapEvent).insert(pair<string, sEvent*>("OutputTrayTableZAxisMotorMoveLoadDone", &smCustomerEvent->OutputTrayTableZAxisMotorMoveLoadDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartOutputTrayTableZAxisMotorMoveSingulation", &smCustomerEvent->StartOutputTrayTableZAxisMotorMoveSingulation));
	(*mapEvent).insert(pair<string, sEvent*>("OutputTrayTableZAxisMotorMoveSingulationDone", &smCustomerEvent->OutputTrayTableZAxisMotorMoveSingulationDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartOutputTrayTableZAxisMotorMoveUnload", &smCustomerEvent->StartOutputTrayTableZAxisMotorMoveUnload));
	(*mapEvent).insert(pair<string, sEvent*>("OutputTrayTableZAxisMotorMoveUnloadDone", &smCustomerEvent->OutputTrayTableZAxisMotorMoveUnloadDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartOutputTrayTableZAxisMotorStop", &smCustomerEvent->StartOutputTrayTableZAxisMotorStop));
	(*mapEvent).insert(pair<string, sEvent*>("OutputTrayTableZAxisMotorStopDone", &smCustomerEvent->OutputTrayTableZAxisMotorStopDone));

	(*mapEvent).insert(pair<string, sEvent*>("StartInputVisionModuleMotorHome", &smCustomerEvent->StartInputVisionModuleMotorHome));
	(*mapEvent).insert(pair<string, sEvent*>("InputVisionModuleMotorHomeDone", &smCustomerEvent->InputVisionModuleMotorHomeDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartInputVisionModuleMotorSettingUp", &smCustomerEvent->StartInputVisionModuleMotorSettingUp));
	(*mapEvent).insert(pair<string, sEvent*>("InputVisionModuleMotorSettingUpDone", &smCustomerEvent->InputVisionModuleMotorSettingUpDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartInputVisionModuleMotorMove", &smCustomerEvent->StartInputVisionModuleMotorMove));
	(*mapEvent).insert(pair<string, sEvent*>("InputVisionModuleMotorMoveDone", &smCustomerEvent->InputVisionModuleMotorMoveDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartInputVisionModuleMotorMoveFocusPosition", &smCustomerEvent->StartInputVisionModuleMotorMoveFocusPosition));
	(*mapEvent).insert(pair<string, sEvent*>("InputVisionModuleMotorMoveFocusPositionDone", &smCustomerEvent->InputVisionModuleMotorMoveFocusPositionDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartInputVisionModuleMotorStop", &smCustomerEvent->StartInputVisionModuleMotorStop));
	(*mapEvent).insert(pair<string, sEvent*>("InputVisionModuleMotorStopDone", &smCustomerEvent->InputVisionModuleMotorStopDone));

	(*mapEvent).insert(pair<string, sEvent*>("StartS2VisionModuleMotorHome", &smCustomerEvent->StartS2VisionModuleMotorHome));
	(*mapEvent).insert(pair<string, sEvent*>("S2VisionModuleMotorHomeDone", &smCustomerEvent->S2VisionModuleMotorHomeDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartS2VisionModuleMotorSettingUp", &smCustomerEvent->StartS2VisionModuleMotorSettingUp));
	(*mapEvent).insert(pair<string, sEvent*>("S2VisionModuleMotorSettingUpDone", &smCustomerEvent->S2VisionModuleMotorSettingUpDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartS2VisionModuleMotorMove", &smCustomerEvent->StartS2VisionModuleMotorMove));
	(*mapEvent).insert(pair<string, sEvent*>("S2VisionModuleMotorMoveDone", &smCustomerEvent->S2VisionModuleMotorMoveDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartS2VisionModuleMotorMoveFocusPosition", &smCustomerEvent->StartS2VisionModuleMotorMoveFocusPosition));
	(*mapEvent).insert(pair<string, sEvent*>("S2VisionModuleMotorMoveFocusPositionDone", &smCustomerEvent->S2VisionModuleMotorMoveFocusPositionDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartS2VisionModuleMotorStop", &smCustomerEvent->StartS2VisionModuleMotorStop));
	(*mapEvent).insert(pair<string, sEvent*>("S2VisionModuleMotorStopDone", &smCustomerEvent->S2VisionModuleMotorStopDone));

	(*mapEvent).insert(pair<string, sEvent*>("StartS1VisionModuleMotorHome", &smCustomerEvent->StartS1VisionModuleMotorHome));
	(*mapEvent).insert(pair<string, sEvent*>("S1VisionModuleMotorHomeDone", &smCustomerEvent->S1VisionModuleMotorHomeDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartS1VisionModuleMotorSettingUp", &smCustomerEvent->StartS1VisionModuleMotorSettingUp));
	(*mapEvent).insert(pair<string, sEvent*>("S1VisionModuleMotorSettingUpDone", &smCustomerEvent->S1VisionModuleMotorSettingUpDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartS1VisionModuleMotorMove", &smCustomerEvent->StartS1VisionModuleMotorMove));
	(*mapEvent).insert(pair<string, sEvent*>("S1VisionModuleMotorMoveDone", &smCustomerEvent->S1VisionModuleMotorMoveDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartS1VisionModuleMotorMoveFocusPosition", &smCustomerEvent->StartS1VisionModuleMotorMoveFocusPosition));
	(*mapEvent).insert(pair<string, sEvent*>("S1VisionModuleMotorMoveFocusPositionDone", &smCustomerEvent->S1VisionModuleMotorMoveFocusPositionDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartS1VisionModuleMotorStop", &smCustomerEvent->StartS1VisionModuleMotorStop));
	(*mapEvent).insert(pair<string, sEvent*>("S1VisionModuleMotorStopDone", &smCustomerEvent->S1VisionModuleMotorStopDone));

	(*mapEvent).insert(pair<string, sEvent*>("StartS3VisionModuleMotorHome", &smCustomerEvent->StartS3VisionModuleMotorHome));
	(*mapEvent).insert(pair<string, sEvent*>("S3VisionModuleMotorHomeDone", &smCustomerEvent->S3VisionModuleMotorHomeDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartS3VisionModuleMotorSettingUp", &smCustomerEvent->StartS3VisionModuleMotorSettingUp));
	(*mapEvent).insert(pair<string, sEvent*>("S3VisionModuleMotorSettingUpDone", &smCustomerEvent->S3VisionModuleMotorSettingUpDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartS3VisionModuleMotorMoveFocusPosition", &smCustomerEvent->StartS3VisionModuleMotorMoveFocusPosition));
	(*mapEvent).insert(pair<string, sEvent*>("S3VisionModuleMotorMoveFocusPositionDone", &smCustomerEvent->S3VisionModuleMotorMoveFocusPositionDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartS3VisionModuleMotorMove", &smCustomerEvent->StartS3VisionModuleMotorMove));
	(*mapEvent).insert(pair<string, sEvent*>("S3VisionModuleMotorMoveDone", &smCustomerEvent->S3VisionModuleMotorMoveDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartS3VisionModuleMotorStop", &smCustomerEvent->StartS3VisionModuleMotorStop));
	(*mapEvent).insert(pair<string, sEvent*>("S3VisionModuleMotorStopDone", &smCustomerEvent->S3VisionModuleMotorStopDone));

	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace1XAxisMotorHome", &smCustomerEvent->StartPickAndPlace1XAxisMotorHome));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace1XAxisMotorHomeDone", &smCustomerEvent->PickAndPlace1XAxisMotorHomeDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace1XAxisMotorSettingUp", &smCustomerEvent->StartPickAndPlace1XAxisMotorSettingUp));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace1XAxisMotorSettingUpDone", &smCustomerEvent->PickAndPlace1XAxisMotorSettingUpDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace1XAxisMotorMoveToInputPosition", &smCustomerEvent->StartPickAndPlace1XAxisMotorMoveToInputPosition));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace1XAxisMotorMoveToInputPositionDone", &smCustomerEvent->PickAndPlace1XAxisMotorMoveToInputPositionDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace1XAxisMotorMoveToS1Position", &smCustomerEvent->StartPickAndPlace1XAxisMotorMoveToS1Position));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace1XAxisMotorMoveToS1PositionDone", &smCustomerEvent->PickAndPlace1XAxisMotorMoveToS1PositionDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace1XAxisMotorMoveToS3Position", &smCustomerEvent->StartPickAndPlace1XAxisMotorMoveToS3Position));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace1XAxisMotorMoveToS3PositionDone", &smCustomerEvent->PickAndPlace1XAxisMotorMoveToS3PositionDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace1XAxisMotorMoveToOutputPosition", &smCustomerEvent->StartPickAndPlace1XAxisMotorMoveToOutputPosition));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace1XAxisMotorMoveToOutputPositionDone", &smCustomerEvent->PickAndPlace1XAxisMotorMoveToOutputPositionDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace1XAxisMotorMoveToParkingPosition", &smCustomerEvent->StartPickAndPlace1XAxisMotorMoveToParkingPosition));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace1XAxisMotorMoveToParkingPositionDone", &smCustomerEvent->PickAndPlace1XAxisMotorMoveToParkingPositionDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace1XAxisMotorSetTriggerStartEnd", &smCustomerEvent->StartPickAndPlace1XAxisMotorSetTriggerStartEnd));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace1XAxisMotorSetTriggerStartEndDone", &smCustomerEvent->PickAndPlace1XAxisMotorSetTriggerStartEndDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace1XAxisMotorEnableTriggerPoint", &smCustomerEvent->StartPickAndPlace1XAxisMotorEnableTriggerPoint));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace1XAxisMotorEnableTriggerPointDone", &smCustomerEvent->PickAndPlace1XAxisMotorEnableTriggerPointDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace1XAxisMotorDisableTriggerPoint", &smCustomerEvent->StartPickAndPlace1XAxisMotorDisableTriggerPoint));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace1XAxisMotorDisableTriggerPointDone", &smCustomerEvent->PickAndPlace1XAxisMotorDisableTriggerPointDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace1XAxisMotorMove", &smCustomerEvent->StartPickAndPlace1XAxisMotorMove));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace1XAxisMotorMoveDone", &smCustomerEvent->PickAndPlace1XAxisMotorMoveDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace1XAxisMotorStop", &smCustomerEvent->StartPickAndPlace1XAxisMotorStop));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace1XAxisMotorStopDone", &smCustomerEvent->PickAndPlace1XAxisMotorStopDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace1XAxisMotorOff", &smCustomerEvent->StartPickAndPlace1XAxisMotorOff));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace1XAxisMotorOffDone", &smCustomerEvent->PickAndPlace1XAxisMotorOffDone));

	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace2XAxisMotorHome", &smCustomerEvent->StartPickAndPlace2XAxisMotorHome));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace2XAxisMotorHomeDone", &smCustomerEvent->PickAndPlace2XAxisMotorHomeDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace2XAxisMotorSettingUp", &smCustomerEvent->StartPickAndPlace2XAxisMotorSettingUp));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace2XAxisMotorSettingUpDone", &smCustomerEvent->PickAndPlace2XAxisMotorSettingUpDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace2XAxisMotorMoveToInputPosition", &smCustomerEvent->StartPickAndPlace2XAxisMotorMoveToInputPosition));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace2XAxisMotorMoveToInputPositionDone", &smCustomerEvent->PickAndPlace2XAxisMotorMoveToInputPositionDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace2XAxisMotorMoveToS1Position", &smCustomerEvent->StartPickAndPlace2XAxisMotorMoveToS1Position));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace2XAxisMotorMoveToS1PositionDone", &smCustomerEvent->PickAndPlace2XAxisMotorMoveToS1PositionDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace2XAxisMotorMoveToS3Position", &smCustomerEvent->StartPickAndPlace2XAxisMotorMoveToS3Position));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace2XAxisMotorMoveToS3PositionDone", &smCustomerEvent->PickAndPlace2XAxisMotorMoveToS3PositionDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace2XAxisMotorMoveToOutputPosition", &smCustomerEvent->StartPickAndPlace2XAxisMotorMoveToOutputPosition));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace2XAxisMotorMoveToOutputPositionDone", &smCustomerEvent->PickAndPlace2XAxisMotorMoveToOutputPositionDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace2XAxisMotorMoveToParkingPosition", &smCustomerEvent->StartPickAndPlace2XAxisMotorMoveToParkingPosition));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace2XAxisMotorMoveToParkingPositionDone", &smCustomerEvent->PickAndPlace2XAxisMotorMoveToParkingPositionDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace2XAxisMotorSetTriggerStartEnd", &smCustomerEvent->StartPickAndPlace2XAxisMotorSetTriggerStartEnd));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace2XAxisMotorSetTriggerStartEndDone", &smCustomerEvent->PickAndPlace2XAxisMotorSetTriggerStartEndDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace2XAxisMotorEnableTriggerPoint", &smCustomerEvent->StartPickAndPlace2XAxisMotorEnableTriggerPoint));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace2XAxisMotorEnableTriggerPointDone", &smCustomerEvent->PickAndPlace2XAxisMotorEnableTriggerPointDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace2XAxisMotorDisableTriggerPoint", &smCustomerEvent->StartPickAndPlace2XAxisMotorDisableTriggerPoint));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace2XAxisMotorDisableTriggerPointDone", &smCustomerEvent->PickAndPlace2XAxisMotorDisableTriggerPointDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace2XAxisMotorMove", &smCustomerEvent->StartPickAndPlace2XAxisMotorMove));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace2XAxisMotorMoveDone", &smCustomerEvent->PickAndPlace2XAxisMotorMoveDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace2XAxisMotorStop", &smCustomerEvent->StartPickAndPlace2XAxisMotorStop));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace2XAxisMotorStopDone", &smCustomerEvent->PickAndPlace2XAxisMotorStopDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace2XAxisMotorOff", &smCustomerEvent->StartPickAndPlace2XAxisMotorOff));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace2XAxisMotorOffDone", &smCustomerEvent->PickAndPlace2XAxisMotorOffDone));

	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace1ZAxisMotorHome", &smCustomerEvent->StartPickAndPlace1ZAxisMotorHome));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace1ZAxisMotorHomeDone", &smCustomerEvent->PickAndPlace1ZAxisMotorHomeDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace1ZAxisMotorSettingUp", &smCustomerEvent->StartPickAndPlace1ZAxisMotorSettingUp));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace1ZAxisMotorSettingUpDone", &smCustomerEvent->PickAndPlace1ZAxisMotorSettingUpDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace1ZAxisMotorMoveUpPosition", &smCustomerEvent->StartPickAndPlace1ZAxisMotorMoveUpPosition));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace1ZAxisMotorMoveUpPositionDone", &smCustomerEvent->PickAndPlace1ZAxisMotorMoveUpPositionDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace1ZAxisMotorMoveUpPositionAndRotate", &smCustomerEvent->StartPickAndPlace1ZAxisMotorMoveUpPositionAndRotate));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace1ZAxisMotorMoveUpPositionAndRotateDone", &smCustomerEvent->PickAndPlace1ZAxisMotorMoveUpPositionAndRotateDone));

	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace1ZAxisMotorMoveToInputTrayDownPosition", &smCustomerEvent->StartPickAndPlace1ZAxisMotorMoveToInputTrayDownPosition));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace1ZAxisMotorMoveToInputTrayDownPositionDone", &smCustomerEvent->PickAndPlace1ZAxisMotorMoveToInputTrayDownPositionDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace1ZAxisMotorMoveToInputTraySoftlandingPosition", &smCustomerEvent->StartPickAndPlace1ZAxisMotorMoveToInputTraySoftlandingPosition));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace1ZAxisMotorMoveToInputTraySoftlandingPositionDone", &smCustomerEvent->PickAndPlace1ZAxisMotorMoveToInputTraySoftlandingPositionDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace1ZAxisMotorMoveToOutputTrayDownPosition", &smCustomerEvent->StartPickAndPlace1ZAxisMotorMoveToOutputTrayDownPosition));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace1ZAxisMotorMoveToOutputTrayDownPositionDone", &smCustomerEvent->PickAndPlace1ZAxisMotorMoveToOutputTrayDownPositionDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace1ZAxisMotorMoveToOutputTraySoftlandingPosition", &smCustomerEvent->StartPickAndPlace1ZAxisMotorMoveToOutputTraySoftlandingPosition));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace1ZAxisMotorMoveToOutputTraySoftlandingPositionDone", &smCustomerEvent->PickAndPlace1ZAxisMotorMoveToOutputTraySoftlandingPositionDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace1ZAxisMotorMoveToOutputTraySoftlandingPositionForPicking", &smCustomerEvent->StartPickAndPlace1ZAxisMotorMoveToOutputTraySoftlandingPositionForPicking));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace1ZAxisMotorMoveToOutputTraySoftlandingPositionForPickingDone", &smCustomerEvent->PickAndPlace1ZAxisMotorMoveToOutputTraySoftlandingPositionForPickingDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace1ZAxisMotorSoftlandingPickS1AndS3Ceramic", &smCustomerEvent->StartPickAndPlace1ZAxisMotorSoftlandingPickS1AndS3Ceramic));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace1ZAxisMotorSoftlandingPickS1AndS3CeramicDone", &smCustomerEvent->PickAndPlace1ZAxisMotorSoftlandingPickS1AndS3CeramicDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace1ZAxisMotorSoftlandingPickSWCeramic", &smCustomerEvent->StartPickAndPlace1ZAxisMotorSoftlandingPickSWCeramic));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace1ZAxisMotorSoftlandingPickSWCeramicDone", &smCustomerEvent->PickAndPlace1ZAxisMotorSoftlandingPickSWCeramicDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace1ZAxisMotorSoftlandingPlaceS1AndS3Ceramic", &smCustomerEvent->StartPickAndPlace1ZAxisMotorSoftlandingPlaceS1AndS3Ceramic));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace1ZAxisMotorSoftlandingPlaceS1AndS3CeramicDone", &smCustomerEvent->PickAndPlace1ZAxisMotorSoftlandingPlaceS1AndS3CeramicDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace1ZAxisMotorSoftlandingPlaceSWCeramic", &smCustomerEvent->StartPickAndPlace1ZAxisMotorSoftlandingPlaceSWCeramic));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace1ZAxisMotorSoftlandingPlaceSWCeramicDone", &smCustomerEvent->PickAndPlace1ZAxisMotorSoftlandingPlaceSWCeramicDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace1ZAxisMotorMove", &smCustomerEvent->StartPickAndPlace1ZAxisMotorMove));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace1ZAxisMotorMoveDone", &smCustomerEvent->PickAndPlace1ZAxisMotorMoveDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace1ZAxisMotorStop", &smCustomerEvent->StartPickAndPlace1ZAxisMotorStop));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace1ZAxisMotorStopDone", &smCustomerEvent->PickAndPlace1ZAxisMotorStopDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace1ZAxisMotorOff", &smCustomerEvent->StartPickAndPlace1ZAxisMotorOff));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace1ZAxisMotorOffDone", &smCustomerEvent->PickAndPlace1ZAxisMotorOffDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace1THKMotorOff", &smCustomerEvent->StartPickAndPlace1THKMotorOff));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace1THKMotorOffDone", &smCustomerEvent->PickAndPlace1THKMotorOffDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace1ZAxisReleaseAndOffValve", &smCustomerEvent->StartPickAndPlace1ZAxisReleaseAndOffValve));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace1ZAxisReleaseAndOffValveDone", &smCustomerEvent->PickAndPlace1ZAxisReleaseAndOffValveDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace1ZAxisOffVacuum", &smCustomerEvent->StartPickAndPlace1ZAxisOffVacuum));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace1ZAxisOffVacuumDone", &smCustomerEvent->PickAndPlace1ZAxisOffVacuumDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace1ZAxisOnValve", &smCustomerEvent->StartPickAndPlace1ZAxisOnValve));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace1ZAxisOnValveDone", &smCustomerEvent->PickAndPlace1ZAxisOnValveDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace1ZAxisOffValve", &smCustomerEvent->StartPickAndPlace1ZAxisOffValve));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace1ZAxisOffValveDone", &smCustomerEvent->PickAndPlace1ZAxisOffValveDone));

	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace2ZAxisMotorHome", &smCustomerEvent->StartPickAndPlace2ZAxisMotorHome));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace2ZAxisMotorHomeDone", &smCustomerEvent->PickAndPlace2ZAxisMotorHomeDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace2ZAxisMotorSettingUp", &smCustomerEvent->StartPickAndPlace2ZAxisMotorSettingUp));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace2ZAxisMotorSettingUpDone", &smCustomerEvent->PickAndPlace2ZAxisMotorSettingUpDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace2ZAxisMotorMoveUpPosition", &smCustomerEvent->StartPickAndPlace2ZAxisMotorMoveUpPosition));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace2ZAxisMotorMoveUpPositionDone", &smCustomerEvent->PickAndPlace2ZAxisMotorMoveUpPositionDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace2ZAxisMotorMoveToInputTrayDownPosition", &smCustomerEvent->StartPickAndPlace2ZAxisMotorMoveToInputTrayDownPosition));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace2ZAxisMotorMoveToInputTrayDownPositionDone", &smCustomerEvent->PickAndPlace2ZAxisMotorMoveToInputTrayDownPositionDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace2ZAxisMotorMoveToInputTraySoftlandingPosition", &smCustomerEvent->StartPickAndPlace2ZAxisMotorMoveToInputTraySoftlandingPosition));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace2ZAxisMotorMoveToInputTraySoftlandingPositionDone", &smCustomerEvent->PickAndPlace2ZAxisMotorMoveToInputTraySoftlandingPositionDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace2ZAxisMotorMoveToOutputTrayDownPosition", &smCustomerEvent->StartPickAndPlace2ZAxisMotorMoveToOutputTrayDownPosition));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace2ZAxisMotorMoveToOutputTrayDownPositionDone", &smCustomerEvent->PickAndPlace2ZAxisMotorMoveToOutputTrayDownPositionDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace2ZAxisMotorMoveToOutputTraySoftlandingPosition", &smCustomerEvent->StartPickAndPlace2ZAxisMotorMoveToOutputTraySoftlandingPosition));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace2ZAxisMotorMoveToOutputTraySoftlandingPositionDone", &smCustomerEvent->PickAndPlace2ZAxisMotorMoveToOutputTraySoftlandingPositionDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace2ZAxisMotorMoveToOutputTraySoftlandingPositionForPicking", &smCustomerEvent->StartPickAndPlace2ZAxisMotorMoveToOutputTraySoftlandingPositionForPicking));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace2ZAxisMotorMoveToOutputTraySoftlandingPositionForPickingDone", &smCustomerEvent->PickAndPlace2ZAxisMotorMoveToOutputTraySoftlandingPositionForPickingDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace2ZAxisMotorSoftlandingPickS1AndS3Ceramic", &smCustomerEvent->StartPickAndPlace2ZAxisMotorSoftlandingPickS1AndS3Ceramic));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace2ZAxisMotorSoftlandingPickS1AndS3CeramicDone", &smCustomerEvent->PickAndPlace2ZAxisMotorSoftlandingPickS1AndS3CeramicDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace2ZAxisMotorSoftlandingPickSWCeramic", &smCustomerEvent->StartPickAndPlace2ZAxisMotorSoftlandingPickSWCeramic));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace2ZAxisMotorSoftlandingPickSWCeramicDone", &smCustomerEvent->PickAndPlace2ZAxisMotorSoftlandingPickSWCeramicDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace2ZAxisMotorSoftlandingPlaceS1AndS3Ceramic", &smCustomerEvent->StartPickAndPlace2ZAxisMotorSoftlandingPlaceS1AndS3Ceramic));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace2ZAxisMotorSoftlandingPlaceS1AndS3CeramicDone", &smCustomerEvent->PickAndPlace2ZAxisMotorSoftlandingPlaceS1AndS3CeramicDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace2ZAxisMotorSoftlandingPlaceSWCeramic", &smCustomerEvent->StartPickAndPlace2ZAxisMotorSoftlandingPlaceSWCeramic));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace2ZAxisMotorSoftlandingPlaceSWCeramicDone", &smCustomerEvent->PickAndPlace2ZAxisMotorSoftlandingPlaceSWCeramicDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace2ZAxisMotorMoveUpPositionAndRotate", &smCustomerEvent->StartPickAndPlace2ZAxisMotorMoveUpPositionAndRotate));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace2ZAxisMotorMoveUpPositionAndRotateDone", &smCustomerEvent->PickAndPlace2ZAxisMotorMoveUpPositionAndRotateDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace2ZAxisMotorMove", &smCustomerEvent->StartPickAndPlace2ZAxisMotorMove));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace2ZAxisMotorMoveDone", &smCustomerEvent->PickAndPlace2ZAxisMotorMoveDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace2ZAxisMotorStop", &smCustomerEvent->StartPickAndPlace2ZAxisMotorStop));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace2ZAxisMotorStopDone", &smCustomerEvent->PickAndPlace2ZAxisMotorStopDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace2ZAxisMotorOff", &smCustomerEvent->StartPickAndPlace2ZAxisMotorOff));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace2ZAxisMotorOffDone", &smCustomerEvent->PickAndPlace2ZAxisMotorOffDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace2THKMotorOff", &smCustomerEvent->StartPickAndPlace2THKMotorOff));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace2THKMotorOffDone", &smCustomerEvent->PickAndPlace2THKMotorOffDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace2ZAxisReleaseAndOffValve", &smCustomerEvent->StartPickAndPlace2ZAxisReleaseAndOffValve));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace2ZAxisReleaseAndOffValveDone", &smCustomerEvent->PickAndPlace2ZAxisReleaseAndOffValveDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace2ZAxisOffVacuum", &smCustomerEvent->StartPickAndPlace2ZAxisOffVacuum));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace2ZAxisOffVacuumDone", &smCustomerEvent->PickAndPlace2ZAxisOffVacuumDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace2ZAxisOnValve", &smCustomerEvent->StartPickAndPlace2ZAxisOnValve));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace2ZAxisOnValveDone", &smCustomerEvent->PickAndPlace2ZAxisOnValveDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace2ZAxisOffValve", &smCustomerEvent->StartPickAndPlace2ZAxisOffValve));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace2ZAxisOffValveDone", &smCustomerEvent->PickAndPlace2ZAxisOffValveDone));

	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace1ThetaAxisMotorHome", &smCustomerEvent->StartPickAndPlace1ThetaAxisMotorHome));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace1ThetaAxisMotorHomeDone", &smCustomerEvent->PickAndPlace1ThetaAxisMotorHomeDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace1ThetaAxisMotorSettingUp", &smCustomerEvent->StartPickAndPlace1ThetaAxisMotorSettingUp));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace1ThetaAxisMotorSettingUpDone", &smCustomerEvent->PickAndPlace1ThetaAxisMotorSettingUpDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace1ThetaAxisMotorMoveStandbyPosition", &smCustomerEvent->StartPickAndPlace1ThetaAxisMotorMoveStandbyPosition));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace1ThetaAxisMotorMoveStandbyPositionDone", &smCustomerEvent->PickAndPlace1ThetaAxisMotorMoveStandbyPositionDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace1ThetaAxisMotorMove", &smCustomerEvent->StartPickAndPlace1ThetaAxisMotorMove));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace1ThetaAxisMotorMoveDone", &smCustomerEvent->PickAndPlace1ThetaAxisMotorMoveDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace1ThetaAxisMotorStop", &smCustomerEvent->StartPickAndPlace1ThetaAxisMotorStop));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace1ThetaAxisMotorStopDone", &smCustomerEvent->PickAndPlace1ThetaAxisMotorStopDone));


	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace2ThetaAxisMotorHome", &smCustomerEvent->StartPickAndPlace2ThetaAxisMotorHome));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace2ThetaAxisMotorHomeDone", &smCustomerEvent->PickAndPlace2ThetaAxisMotorHomeDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace2ThetaAxisMotorSettingUp", &smCustomerEvent->StartPickAndPlace2ThetaAxisMotorSettingUp));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace2ThetaAxisMotorSettingUpDone", &smCustomerEvent->PickAndPlace2ThetaAxisMotorSettingUpDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace2ThetaAxisMotorMoveStandbyPosition", &smCustomerEvent->StartPickAndPlace2ThetaAxisMotorMoveStandbyPosition));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace2ThetaAxisMotorMoveStandbyPositionDone", &smCustomerEvent->PickAndPlace2ThetaAxisMotorMoveStandbyPositionDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace2ThetaAxisMotorMove", &smCustomerEvent->StartPickAndPlace2ThetaAxisMotorMove));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace2ThetaAxisMotorMoveDone", &smCustomerEvent->PickAndPlace2ThetaAxisMotorMoveDone));
	(*mapEvent).insert(pair<string, sEvent*>("StartPickAndPlace2ThetaAxisMotorStop", &smCustomerEvent->StartPickAndPlace2ThetaAxisMotorStop));
	(*mapEvent).insert(pair<string, sEvent*>("PickAndPlace2ThetaAxisMotorStopDone", &smCustomerEvent->PickAndPlace2ThetaAxisMotorStopDone));

	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_TRAY_PRESENT_ON_TABLE_CLEAR_DONE", &smCustomerEvent->GMAIN_RTHD_TRAY_PRESENT_ON_TABLE_CLEAR_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_TRAY_PRESENT_ON_TABLE_START", &smCustomerEvent->RTHD_GMAIN_TRAY_PRESENT_ON_TABLE_START));


	(*mapEvent).insert(pair<string, sEvent*>("RTHD_RMAIN_INPUT_VISION_END", &smCustomerEvent->RTHD_RMAIN_INPUT_VISION_END));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_RMAIN_OUTPUT_VISION_END", &smCustomerEvent->RTHD_RMAIN_OUTPUT_VISION_END));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_RMAIN_BOTTOM_VISION_END", &smCustomerEvent->RTHD_RMAIN_BOTTOM_VISION_END));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_RMAIN_S2_VISION_END", &smCustomerEvent->RTHD_RMAIN_S2_VISION_END));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_RMAIN_S3_VISION_END", &smCustomerEvent->RTHD_RMAIN_S3_VISION_END));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_RMAIN_S1_VISION_END", &smCustomerEvent->RTHD_RMAIN_S1_VISION_END));
	

	(*mapEvent).insert(pair<string, sEvent*>("RSEQ_RINPV_START_VISION", &smCustomerEvent->RSEQ_RINPV_START_VISION));
	(*mapEvent).insert(pair<string, sEvent*>("RINPV_RSEQ_VISION_DONE", &smCustomerEvent->RINPV_RSEQ_VISION_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RSEQ_RINPV_START_VISION_RETEST", &smCustomerEvent->RSEQ_RINPV_START_VISION_RETEST));
	(*mapEvent).insert(pair<string, sEvent*>("RINPV_RSEQ_VISION_RETEST_DONE", &smCustomerEvent->RINPV_RSEQ_VISION_RETEST_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_RINPV_GET_VISION_RESULT_DONE", &smCustomerEvent->RMAIN_RINPV_GET_VISION_RESULT_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_SEND_INP_VISION_RC_START", &smCustomerEvent->RTHD_GMAIN_SEND_INP_VISION_RC_START));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_INP_VISION_GET_RC_DONE", &smCustomerEvent->GMAIN_RTHD_INP_VISION_GET_RC_DONE));

	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_SEND_INP_VISION_ADD_RC_START", &smCustomerEvent->RTHD_GMAIN_SEND_INP_VISION_ADD_RC_START));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_INP_VISION_GET_ADD_RC_DONE", &smCustomerEvent->GMAIN_RTHD_INP_VISION_GET_ADD_RC_DONE));

	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_GET_INP_VISION_XYTR_START", &smCustomerEvent->RTHD_GMAIN_GET_INP_VISION_XYTR_START));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_GET_INP_VISION_XYTR_DONE", &smCustomerEvent->GMAIN_RTHD_GET_INP_VISION_XYTR_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_GET_INP_VISION_XYTR_FAIL", &smCustomerEvent->GMAIN_RTHD_GET_INP_VISION_XYTR_FAIL));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_INP_VISION_NEED_LEARN_UNIT", &smCustomerEvent->GMAIN_RTHD_INP_VISION_NEED_LEARN_UNIT));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_INP_VISION_LEARN_UNIT_START", &smCustomerEvent->RTHD_GMAIN_INP_VISION_LEARN_UNIT_START));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_INP_VISION_LEARN_UNIT_DONE", &smCustomerEvent->GMAIN_RTHD_INP_VISION_LEARN_UNIT_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RINPV_GMAIN_INP_VISION_RESET_EOV", &smCustomerEvent->RINPV_GMAIN_INP_VISION_RESET_EOV));

	(*mapEvent).insert(pair<string, sEvent*>("RSEQ_RS2V_START_VISION", &smCustomerEvent->RSEQ_RS2V_START_VISION));
	(*mapEvent).insert(pair<string, sEvent*>("RS2V_RSEQ_VISION_DONE", &smCustomerEvent->RS2V_RSEQ_VISION_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RSEQ_RS2V_START_VISION_RETEST", &smCustomerEvent->RSEQ_RS2V_START_VISION_RETEST));
	(*mapEvent).insert(pair<string, sEvent*>("RS2V_RSEQ_VISION_RETEST_DONE", &smCustomerEvent->RS2V_RSEQ_VISION_RETEST_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_RS2V_GET_VISION_RESULT_DONE", &smCustomerEvent->RMAIN_RS2V_GET_VISION_RESULT_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_RS2V_GET_VISION_FACET_1_RESULT_DONE", &smCustomerEvent->RMAIN_RS2V_GET_VISION_FACET_1_RESULT_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_RS2V_GET_VISION_FACET_2_RESULT_DONE", &smCustomerEvent->RMAIN_RS2V_GET_VISION_FACET_2_RESULT_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_RS2V_GET_VISION_FACET_3_RESULT_DONE", &smCustomerEvent->RMAIN_RS2V_GET_VISION_FACET_3_RESULT_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_RS2V_GET_VISION_FACET_4_RESULT_DONE", &smCustomerEvent->RMAIN_RS2V_GET_VISION_FACET_4_RESULT_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_RS2V_GET_VISION_FACET_5_RESULT_DONE", &smCustomerEvent->RMAIN_RS2V_GET_VISION_FACET_5_RESULT_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_RS2V_GET_VISION_FACET_6_RESULT_DONE", &smCustomerEvent->RMAIN_RS2V_GET_VISION_FACET_6_RESULT_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_RS2V_GET_VISION_FACET_7_RESULT_DONE", &smCustomerEvent->RMAIN_RS2V_GET_VISION_FACET_7_RESULT_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_RS2V_GET_VISION_FACET_8_RESULT_DONE", &smCustomerEvent->RMAIN_RS2V_GET_VISION_FACET_8_RESULT_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_RS2V_GET_VISION_FACET_9_RESULT_DONE", &smCustomerEvent->RMAIN_RS2V_GET_VISION_FACET_9_RESULT_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_RS2V_GET_VISION_FACET_10_RESULT_DONE", &smCustomerEvent->RMAIN_RS2V_GET_VISION_FACET_10_RESULT_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_SEND_S2_VISION_RC_START", &smCustomerEvent->RTHD_GMAIN_SEND_S2_VISION_RC_START));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_S2_VISION_GET_RC_DONE", &smCustomerEvent->GMAIN_RTHD_S2_VISION_GET_RC_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_SEND_S2_PARTING_VISION_RC_START", &smCustomerEvent->RTHD_GMAIN_SEND_S2_PARTING_VISION_RC_START));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_S2_PARTING_VISION_GET_RC_DONE", &smCustomerEvent->GMAIN_RTHD_S2_PARTING_VISION_GET_RC_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_SEND_S2_FACET_VISION_RC_START", &smCustomerEvent->RTHD_GMAIN_SEND_S2_FACET_VISION_RC_START));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_S2_FACET_VISION_GET_RC_DONE", &smCustomerEvent->GMAIN_RTHD_S2_FACET_VISION_GET_RC_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_SEND_S2_VISION_ADD_RC_START", &smCustomerEvent->RTHD_GMAIN_SEND_S2_VISION_ADD_RC_START));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_S2_VISION_GET_ADD_RC_DONE", &smCustomerEvent->GMAIN_RTHD_S2_VISION_GET_ADD_RC_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_GET_S2_VISION_XYTR_START", &smCustomerEvent->RTHD_GMAIN_GET_S2_VISION_XYTR_START));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_GET_S2_VISION_XYTR_DONE", &smCustomerEvent->GMAIN_RTHD_GET_S2_VISION_XYTR_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_GET_S2_VISION_XYTR_FAIL", &smCustomerEvent->GMAIN_RTHD_GET_S2_VISION_XYTR_FAIL));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_S2_VISION_NEED_LEARN_UNIT", &smCustomerEvent->GMAIN_RTHD_S2_VISION_NEED_LEARN_UNIT));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_S2_VISION_LEARN_UNIT_START", &smCustomerEvent->RTHD_GMAIN_S2_VISION_LEARN_UNIT_START));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_S2_VISION_LEARN_UNIT_DONE", &smCustomerEvent->GMAIN_RTHD_S2_VISION_LEARN_UNIT_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RS2V_GMAIN_S2_VISION_RESET_EOV", &smCustomerEvent->RS2V_GMAIN_S2_VISION_RESET_EOV));

	(*mapEvent).insert(pair<string, sEvent*>("RSEQ_ROUTV_START_VISION", &smCustomerEvent->RSEQ_ROUTV_START_VISION));
	(*mapEvent).insert(pair<string, sEvent*>("ROUTV_RSEQ_VISION_DONE", &smCustomerEvent->ROUTV_RSEQ_VISION_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RSEQ_ROUTV_START_VISION_RETEST", &smCustomerEvent->RSEQ_ROUTV_START_VISION_RETEST));
	(*mapEvent).insert(pair<string, sEvent*>("ROUTV_RSEQ_VISION_RETEST_DONE", &smCustomerEvent->ROUTV_RSEQ_VISION_RETEST_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_ROUTV_GET_VISION_RESULT_DONE", &smCustomerEvent->GMAIN_ROUTV_GET_VISION_RESULT_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_ROUTV_POST_GET_VISION_RESULT_DONE", &smCustomerEvent->GMAIN_ROUTV_POST_GET_VISION_RESULT_DONE));

	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_SEND_OUT_VISION_RC_START", &smCustomerEvent->RTHD_GMAIN_SEND_OUT_VISION_RC_START));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_OUT_VISION_GET_RC_DONE", &smCustomerEvent->GMAIN_RTHD_OUT_VISION_GET_RC_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_SEND_REJECT_VISION_RC_START", &smCustomerEvent->RTHD_GMAIN_SEND_REJECT_VISION_RC_START));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_REJECT_VISION_GET_RC_DONE", &smCustomerEvent->GMAIN_RTHD_REJECT_VISION_GET_RC_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_SEND_OUT_POST_VISION_RC_START", &smCustomerEvent->RTHD_GMAIN_SEND_OUT_POST_VISION_RC_START));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_OUT_POST_VISION_GET_RC_DONE", &smCustomerEvent->GMAIN_RTHD_OUT_POST_VISION_GET_RC_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_SEND_OUT_POST_VISION_ADD_RC_START", &smCustomerEvent->RTHD_GMAIN_SEND_OUT_POST_VISION_ADD_RC_START));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_OUT_POST_VISION_GET_ADD_RC_DONE", &smCustomerEvent->GMAIN_RTHD_OUT_POST_VISION_GET_ADD_RC_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_SEND_REJECT_POST_VISION_RC_START", &smCustomerEvent->RTHD_GMAIN_SEND_REJECT_POST_VISION_RC_START));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_REJECT_POST_VISION_GET_RC_DONE", &smCustomerEvent->GMAIN_RTHD_REJECT_POST_VISION_GET_RC_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_GET_OUT_VISION_XYTR_START", &smCustomerEvent->RTHD_GMAIN_GET_OUT_VISION_XYTR_START));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_GET_OUT_VISION_XYTR_DONE", &smCustomerEvent->GMAIN_RTHD_GET_OUT_VISION_XYTR_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_GET_OUT_VISION_XYTR_FAIL", &smCustomerEvent->GMAIN_RTHD_GET_OUT_VISION_XYTR_FAIL));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_GET_OUT_POST_VISION_XYTR_START", &smCustomerEvent->RTHD_GMAIN_GET_OUT_POST_VISION_XYTR_START));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_GET_OUT_POST_VISION_XYTR_DONE", &smCustomerEvent->GMAIN_RTHD_GET_OUT_POST_VISION_XYTR_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_GET_OUT_POST_VISION_XYTR_FAIL", &smCustomerEvent->GMAIN_RTHD_GET_OUT_POST_VISION_XYTR_FAIL));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_GET_REJECT_VISION_XYTR_START", &smCustomerEvent->RTHD_GMAIN_GET_REJECT_VISION_XYTR_START));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_GET_REJECT_VISION_XYTR_DONE", &smCustomerEvent->GMAIN_RTHD_GET_REJECT_VISION_XYTR_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_GET_REJECT_VISION_XYTR_FAIL", &smCustomerEvent->GMAIN_RTHD_GET_REJECT_VISION_XYTR_FAIL));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_GET_REJECT_POST_VISION_XYTR_START", &smCustomerEvent->RTHD_GMAIN_GET_REJECT_POST_VISION_XYTR_START));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_GET_REJECT_POST_VISION_XYTR_DONE", &smCustomerEvent->GMAIN_RTHD_GET_REJECT_POST_VISION_XYTR_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_GET_REJECT_POST_VISION_XYTR_FAIL", &smCustomerEvent->GMAIN_RTHD_GET_REJECT_POST_VISION_XYTR_FAIL));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_OUT_VISION_NEED_LEARN_UNIT", &smCustomerEvent->GMAIN_RTHD_OUT_VISION_NEED_LEARN_UNIT));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_OUT_VISION_LEARN_UNIT_START", &smCustomerEvent->RTHD_GMAIN_OUT_VISION_LEARN_UNIT_START));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_OUT_VISION_LEARN_UNIT_DONE", &smCustomerEvent->GMAIN_RTHD_OUT_VISION_LEARN_UNIT_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("ROUTV_GMAIN_OUT_VISION_RESET_EOV", &smCustomerEvent->ROUTV_GMAIN_OUT_VISION_RESET_EOV));

	
	(*mapEvent).insert(pair<string, sEvent*>("RSEQ_RSTPV_START_VISION", &smCustomerEvent->RSEQ_RSTPV_START_VISION));
	(*mapEvent).insert(pair<string, sEvent*>("RSTPV_RSEQ_VISION_DONE", &smCustomerEvent->RSTPV_RSEQ_VISION_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RSEQ_RSTPV_START_VISION_RETEST", &smCustomerEvent->RSEQ_RSTPV_START_VISION_RETEST));
	(*mapEvent).insert(pair<string, sEvent*>("RSTPV_RSEQ_VISION_RETEST_DONE", &smCustomerEvent->RSTPV_RSEQ_VISION_RETEST_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_RSTPV_GET_VISION_RESULT_DONE", &smCustomerEvent->RMAIN_RSTPV_GET_VISION_RESULT_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_SEND_SETUP_VISION_RC_START", &smCustomerEvent->RTHD_GMAIN_SEND_SETUP_VISION_RC_START));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_SETUP_VISION_GET_RC_DONE", &smCustomerEvent->GMAIN_RTHD_SETUP_VISION_GET_RC_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_SETUP_VISION_NEED_LEARN_UNIT", &smCustomerEvent->GMAIN_RTHD_SETUP_VISION_NEED_LEARN_UNIT));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_SETUP_VISION_LEARN_UNIT_START", &smCustomerEvent->RTHD_GMAIN_SETUP_VISION_LEARN_UNIT_START));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_SETUP_VISION_LEARN_UNIT_DONE", &smCustomerEvent->GMAIN_RTHD_SETUP_VISION_LEARN_UNIT_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RSTPV_GMAIN_SETUP_VISION_RESET_EOV", &smCustomerEvent->RSTPV_GMAIN_SETUP_VISION_RESET_EOV));

	(*mapEvent).insert(pair<string, sEvent*>("RSEQ_RBTMV_START_VISION", &smCustomerEvent->RSEQ_RBTMV_START_VISION));
	(*mapEvent).insert(pair<string, sEvent*>("RBTMV_RSEQ_VISION_DONE", &smCustomerEvent->RBTMV_RSEQ_VISION_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RSEQ_RBTMV_START_VISION_RETEST", &smCustomerEvent->RSEQ_RBTMV_START_VISION_RETEST));
	(*mapEvent).insert(pair<string, sEvent*>("RBTMV_RSEQ_VISION_RETEST_DONE", &smCustomerEvent->RBTMV_RSEQ_VISION_RETEST_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RBTMV_GET_VISION_RESULT_DONE", &smCustomerEvent->GMAIN_RBTMV_GET_VISION_RESULT_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_SEND_BOTTOM_VISION_RC_START", &smCustomerEvent->RTHD_GMAIN_SEND_BOTTOM_VISION_RC_START));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_BOTTOM_VISION_GET_RC_DONE", &smCustomerEvent->GMAIN_RTHD_BOTTOM_VISION_GET_RC_DONE));

	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_SEND_BOTTOM_VISION_ADD_RC_START", &smCustomerEvent->RTHD_GMAIN_SEND_BOTTOM_VISION_ADD_RC_START));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_BOTTOM_VISION_GET_ADD_RC_DONE", &smCustomerEvent->GMAIN_RTHD_BOTTOM_VISION_GET_ADD_RC_DONE));

	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_BOTTOM_VISION_NEED_LEARN_UNIT", &smCustomerEvent->GMAIN_RTHD_BOTTOM_VISION_NEED_LEARN_UNIT));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_BOTTOM_VISION_LEARN_UNIT_START", &smCustomerEvent->RTHD_GMAIN_BOTTOM_VISION_LEARN_UNIT_START));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_BOTTOM_VISION_LEARN_UNIT_DONE", &smCustomerEvent->GMAIN_RTHD_BOTTOM_VISION_LEARN_UNIT_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RBTMV_GMAIN_BOTTOM_VISION_RESET_EOV", &smCustomerEvent->RBTMV_GMAIN_BOTTOM_VISION_RESET_EOV));

	(*mapEvent).insert(pair<string, sEvent*>("RSEQ_RS3V_START_VISION", &smCustomerEvent->RSEQ_RS3V_START_VISION));
	(*mapEvent).insert(pair<string, sEvent*>("RS3V_RSEQ_VISION_DONE", &smCustomerEvent->RS3V_RSEQ_VISION_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RSEQ_RS3V_START_VISION_RETEST", &smCustomerEvent->RSEQ_RS3V_START_VISION_RETEST));
	(*mapEvent).insert(pair<string, sEvent*>("RS3V_RSEQ_VISION_RETEST_DONE", &smCustomerEvent->RS3V_RSEQ_VISION_RETEST_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RS3V_GET_VISION_RESULT_DONE", &smCustomerEvent->GMAIN_RS3V_GET_VISION_RESULT_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RS3V_GET_VISION_FACET_1_RESULT_DONE", &smCustomerEvent->GMAIN_RS3V_GET_VISION_FACET_1_RESULT_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RS3V_GET_VISION_FACET_2_RESULT_DONE", &smCustomerEvent->GMAIN_RS3V_GET_VISION_FACET_2_RESULT_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RS3V_GET_VISION_FACET_3_RESULT_DONE", &smCustomerEvent->GMAIN_RS3V_GET_VISION_FACET_3_RESULT_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RS3V_GET_VISION_FACET_4_RESULT_DONE", &smCustomerEvent->GMAIN_RS3V_GET_VISION_FACET_4_RESULT_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RS3V_GET_VISION_FACET_5_RESULT_DONE", &smCustomerEvent->GMAIN_RS3V_GET_VISION_FACET_5_RESULT_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RS3V_GET_VISION_FACET_6_RESULT_DONE", &smCustomerEvent->GMAIN_RS3V_GET_VISION_FACET_6_RESULT_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RS3V_GET_VISION_FACET_7_RESULT_DONE", &smCustomerEvent->GMAIN_RS3V_GET_VISION_FACET_7_RESULT_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RS3V_GET_VISION_FACET_8_RESULT_DONE", &smCustomerEvent->GMAIN_RS3V_GET_VISION_FACET_8_RESULT_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RS3V_GET_VISION_FACET_9_RESULT_DONE", &smCustomerEvent->GMAIN_RS3V_GET_VISION_FACET_9_RESULT_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RS3V_GET_VISION_FACET_10_RESULT_DONE", &smCustomerEvent->GMAIN_RS3V_GET_VISION_FACET_10_RESULT_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_SEND_S3_VISION_RC_START", &smCustomerEvent->RTHD_GMAIN_SEND_S3_VISION_RC_START));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_S3_VISION_GET_RC_DONE", &smCustomerEvent->GMAIN_RTHD_S3_VISION_GET_RC_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_SEND_S3_PARTING_VISION_RC_START", &smCustomerEvent->RTHD_GMAIN_SEND_S3_PARTING_VISION_RC_START));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_S3_PARTING_VISION_GET_RC_DONE", &smCustomerEvent->GMAIN_RTHD_S3_PARTING_VISION_GET_RC_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_SEND_S3_FACET_VISION_RC_START", &smCustomerEvent->RTHD_GMAIN_SEND_S3_FACET_VISION_RC_START));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_S3_FACET_VISION_GET_RC_DONE", &smCustomerEvent->GMAIN_RTHD_S3_FACET_VISION_GET_RC_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_SEND_S3_VISION_ADD_RC_START", &smCustomerEvent->RTHD_GMAIN_SEND_S3_VISION_ADD_RC_START));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_S3_VISION_GET_ADD_RC_DONE", &smCustomerEvent->GMAIN_RTHD_S3_VISION_GET_ADD_RC_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_S3_VISION_NEED_LEARN_UNIT", &smCustomerEvent->GMAIN_RTHD_S3_VISION_NEED_LEARN_UNIT));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_S3_VISION_LEARN_UNIT_START", &smCustomerEvent->RTHD_GMAIN_S3_VISION_LEARN_UNIT_START));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_S3_VISION_LEARN_UNIT_DONE", &smCustomerEvent->GMAIN_RTHD_S3_VISION_LEARN_UNIT_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RS3V_GMAIN_S3_VISION_RESET_EOV", &smCustomerEvent->RS3V_GMAIN_S3_VISION_RESET_EOV));

	(*mapEvent).insert(pair<string, sEvent*>("RSEQ_RS1V_START_VISION", &smCustomerEvent->RSEQ_RS1V_START_VISION));
	(*mapEvent).insert(pair<string, sEvent*>("RS1V_RSEQ_VISION_DONE", &smCustomerEvent->RS1V_RSEQ_VISION_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RSEQ_RS1V_START_VISION_RETEST", &smCustomerEvent->RSEQ_RS1V_START_VISION_RETEST));
	(*mapEvent).insert(pair<string, sEvent*>("RS1V_RSEQ_VISION_RETEST_DONE", &smCustomerEvent->RS1V_RSEQ_VISION_RETEST_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RS1V_GET_VISION_RESULT_DONE", &smCustomerEvent->GMAIN_RS1V_GET_VISION_RESULT_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_SEND_S1_VISION_RC_START", &smCustomerEvent->RTHD_GMAIN_SEND_S1_VISION_RC_START));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_S1_VISION_GET_RC_DONE", &smCustomerEvent->GMAIN_RTHD_S1_VISION_GET_RC_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_SEND_S1_VISION_ADD_RC_START", &smCustomerEvent->RTHD_GMAIN_SEND_S1_VISION_ADD_RC_START));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_S1_VISION_GET_ADD_RC_DONE", &smCustomerEvent->GMAIN_RTHD_S1_VISION_GET_ADD_RC_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_S1_VISION_NEED_LEARN_UNIT", &smCustomerEvent->GMAIN_RTHD_S1_VISION_NEED_LEARN_UNIT));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_S1_VISION_LEARN_UNIT_START", &smCustomerEvent->RTHD_GMAIN_S1_VISION_LEARN_UNIT_START));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_S1_VISION_LEARN_UNIT_DONE", &smCustomerEvent->GMAIN_RTHD_S1_VISION_LEARN_UNIT_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RS1V_GMAIN_S1_VISION_RESET_EOV", &smCustomerEvent->RS1V_GMAIN_S1_VISION_RESET_EOV));

	(*mapEvent).insert(pair<string, sEvent*>("RTHD_RMAIN_MC1_END", &smCustomerEvent->RTHD_RMAIN_MC1_END));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_RMAIN_MC2_END", &smCustomerEvent->RTHD_RMAIN_MC2_END));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_RMAIN_MC3_END", &smCustomerEvent->RTHD_RMAIN_MC3_END));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_RMAIN_MC4_END", &smCustomerEvent->RTHD_RMAIN_MC4_END));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_RMAIN_MC5_END", &smCustomerEvent->RTHD_RMAIN_MC5_END));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_RMAIN_MC6_END", &smCustomerEvent->RTHD_RMAIN_MC6_END));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_RMAIN_MC7_END", &smCustomerEvent->RTHD_RMAIN_MC7_END));

	(*mapEvent).insert(pair<string, sEvent*>("RTHD_RMAIN_PICK_AND_PLACE_1_Y_AXIS_MOTOR_END", &smCustomerEvent->RTHD_RMAIN_PICK_AND_PLACE_1_Y_AXIS_MOTOR_END));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_RMAIN_INPUT_TRAY_TABLE_X_AXIS_MOTOR_END", &smCustomerEvent->RTHD_RMAIN_INPUT_TRAY_TABLE_X_AXIS_MOTOR_END));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_RMAIN_INPUT_TRAY_TABLE_Y_AXIS_MOTOR_END", &smCustomerEvent->RTHD_RMAIN_INPUT_TRAY_TABLE_Y_AXIS_MOTOR_END));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_RMAIN_INPUT_TRAY_TABLE_Z_AXIS_MOTOR_END", &smCustomerEvent->RTHD_RMAIN_INPUT_TRAY_TABLE_Z_AXIS_MOTOR_END));

	(*mapEvent).insert(pair<string, sEvent*>("RTHD_RMAIN_PICK_AND_PLACE_2_Y_AXIS_MOTOR_END", &smCustomerEvent->RTHD_RMAIN_PICK_AND_PLACE_2_Y_AXIS_MOTOR_END));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_RMAIN_OUTPUT_TRAY_TABLE_X_AXIS_MOTOR_END", &smCustomerEvent->RTHD_RMAIN_OUTPUT_TRAY_TABLE_X_AXIS_MOTOR_END));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_RMAIN_OUTPUT_TRAY_TABLE_Y_AXIS_MOTOR_END", &smCustomerEvent->RTHD_RMAIN_OUTPUT_TRAY_TABLE_Y_AXIS_MOTOR_END));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_RMAIN_OUTPUT_TRAY_TABLE_Z_AXIS_MOTOR_END", &smCustomerEvent->RTHD_RMAIN_OUTPUT_TRAY_TABLE_Z_AXIS_MOTOR_END));

	(*mapEvent).insert(pair<string, sEvent*>("RTHD_RMAIN_INPUT_VISION_MODULE_MOTOR_END", &smCustomerEvent->RTHD_RMAIN_INPUT_VISION_MODULE_MOTOR_END));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_RMAIN_S2_VISION_MODULE_MOTOR_END", &smCustomerEvent->RTHD_RMAIN_S2_VISION_MODULE_MOTOR_END));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_RMAIN_SIDE_WALL_VISION_LEFT_MODULE_MOTOR_END", &smCustomerEvent->RTHD_RMAIN_SIDE_WALL_VISION_LEFT_MODULE_MOTOR_END));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_RMAIN_SIDE_WALL_VISION_RIGHT_MODULE_MOTOR_END", &smCustomerEvent->RTHD_RMAIN_SIDE_WALL_VISION_RIGHT_MODULE_MOTOR_END));

	(*mapEvent).insert(pair<string, sEvent*>("RTHD_RMAIN_SIDE_WALL_VISION_FRONT_MODULE_MOTOR_END", &smCustomerEvent->RTHD_RMAIN_SIDE_WALL_VISION_FRONT_MODULE_MOTOR_END));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_RMAIN_SIDE_WALL_VISION_REAR_MODULE_MOTOR_END", &smCustomerEvent->RTHD_RMAIN_SIDE_WALL_VISION_REAR_MODULE_MOTOR_END));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_RMAIN_S3_VISION_MODULE_MOTOR_END", &smCustomerEvent->RTHD_RMAIN_S3_VISION_MODULE_MOTOR_END));

	(*mapEvent).insert(pair<string, sEvent*>("RTHD_RMAIN_PICK_AND_PLACE_1_X_AXIS_MOTOR_END", &smCustomerEvent->RTHD_RMAIN_PICK_AND_PLACE_1_X_AXIS_MOTOR_END));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_RMAIN_PICK_AND_PLACE_2_X_AXIS_MOTOR_END", &smCustomerEvent->RTHD_RMAIN_PICK_AND_PLACE_2_X_AXIS_MOTOR_END));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_RMAIN_PICK_AND_PLACE_1_Z_AXIS_MOTOR_END", &smCustomerEvent->RTHD_RMAIN_PICK_AND_PLACE_1_Z_AXIS_MOTOR_END));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_RMAIN_PICK_AND_PLACE_2_Z_AXIS_MOTOR_END", &smCustomerEvent->RTHD_RMAIN_PICK_AND_PLACE_2_Z_AXIS_MOTOR_END));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_RMAIN_PICK_AND_PLACE_1_T_AXIS_MOTOR_END", &smCustomerEvent->RTHD_RMAIN_PICK_AND_PLACE_1_T_AXIS_MOTOR_END));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_RMAIN_PICK_AND_PLACE_2_T_AXIS_MOTOR_END", &smCustomerEvent->RTHD_RMAIN_PICK_AND_PLACE_2_T_AXIS_MOTOR_END));

	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_RTHD_INPUT_TRAY_TABLE_START", &smCustomerEvent->RMAIN_RTHD_INPUT_TRAY_TABLE_START));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_RMAIN_INPUT_TRAY_TABLE_DONE", &smCustomerEvent->RTHD_RMAIN_INPUT_TRAY_TABLE_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_RTHD_OUTPUT_TRAY_TABLE_START", &smCustomerEvent->RMAIN_RTHD_OUTPUT_TRAY_TABLE_START));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_RMAIN_OUTPUT_TRAY_TABLE_DONE", &smCustomerEvent->RTHD_RMAIN_OUTPUT_TRAY_TABLE_DONE));

	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_ENDLOT", &smCustomerEvent->GMAIN_RTHD_ENDLOT));

	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_RTHD_SEND_OUTPUT_EVENT_START", &smCustomerEvent->RMAIN_RTHD_SEND_OUTPUT_EVENT_START));
	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_RTHD_SEND_OUTPUT_EVENT_DONE", &smCustomerEvent->RMAIN_RTHD_SEND_OUTPUT_EVENT_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_RTHD_INPUT_VISION_REQUIRE_ADDITIONAL_MOVE_AND_SNAP", &smCustomerEvent->RMAIN_RTHD_INPUT_VISION_REQUIRE_ADDITIONAL_MOVE_AND_SNAP));
	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_RTHD_INPUT_UNIT_PRESENT", &smCustomerEvent->RMAIN_RTHD_INPUT_UNIT_PRESENT));
	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_RTHD_INPUT_TRAY_EMPTY", &smCustomerEvent->RMAIN_RTHD_INPUT_TRAY_EMPTY));
	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_RTHD_OUTPUT_FULL", &smCustomerEvent->RMAIN_RTHD_OUTPUT_FULL));
	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_RTHD_OUTPUT_OR_REJECT_FULL", &smCustomerEvent->RMAIN_RTHD_OUTPUT_OR_REJECT_FULL));

	(*mapEvent).insert(pair<string, sEvent*>("RTHD_RMAIN_INPUT_TRAY_TABLE_END", &smCustomerEvent->RTHD_RMAIN_INPUT_TRAY_TABLE_END));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_RMAIN_OUTPUT_TRAY_TABLE_END", &smCustomerEvent->RTHD_RMAIN_OUTPUT_TRAY_TABLE_END));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_RMAIN_PICK_AND_PLACE_SEQUENCE_END", &smCustomerEvent->RTHD_RMAIN_PICK_AND_PLACE_SEQUENCE_END));
	
	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_RTHD_INPUT_VISION_REQUIRE_ADDITIONAL_MOVE", &smCustomerEvent->RMAIN_RTHD_INPUT_VISION_REQUIRE_ADDITIONAL_MOVE));
	
	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_RTHD_ADDITIONAL_INPUT_VISION_DONE", &smCustomerEvent->RMAIN_RTHD_ADDITIONAL_INPUT_VISION_DONE));
	
	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_RTHD_GET_S2_VISION_DONE", &smCustomerEvent->RMAIN_RTHD_GET_S2_VISION_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_RTHD_GET_OUTPUT_VISION_DONE", &smCustomerEvent->RMAIN_RTHD_GET_OUTPUT_VISION_DONE));

	(*mapEvent).insert(pair<string, sEvent*>("RSEQ_RINT_SEQUENCE_START", &smCustomerEvent->RSEQ_RINT_SEQUENCE_START));
	(*mapEvent).insert(pair<string, sEvent*>("RSEQ_ROUT_SEQUENCE_START", &smCustomerEvent->RSEQ_ROUT_SEQUENCE_START));
	(*mapEvent).insert(pair<string, sEvent*>("RSEQ_RPNP1_SEQUENCE_START", &smCustomerEvent->RSEQ_RPNP1_SEQUENCE_START));
	(*mapEvent).insert(pair<string, sEvent*>("RSEQ_RPNP2_SEQUENCE_START", &smCustomerEvent->RSEQ_RPNP2_SEQUENCE_START));

	(*mapEvent).insert(pair<string, sEvent*>("RSEQ_RPNP1_STANDBY_START", &smCustomerEvent->RSEQ_RPNP1_STANDBY_START));
	(*mapEvent).insert(pair<string, sEvent*>("RPNP1_RSEQ_STANDBY_DONE", &smCustomerEvent->RPNP1_RSEQ_STANDBY_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RSEQ_RPNP2_STANDBY_START", &smCustomerEvent->RSEQ_RPNP2_STANDBY_START));
	(*mapEvent).insert(pair<string, sEvent*>("RPNP2_RSEQ_STANDBY_DONE", &smCustomerEvent->RPNP2_RSEQ_STANDBY_DONE));

	(*mapEvent).insert(pair<string, sEvent*>("RSEQ_RPNP1_MOVE_TO_INPUT_STATION_START", &smCustomerEvent->RSEQ_RPNP1_MOVE_TO_INPUT_STATION_START));
	(*mapEvent).insert(pair<string, sEvent*>("RPNP1_RSEQ_MOVE_TO_INPUT_STATION_DONE", &smCustomerEvent->RPNP1_RSEQ_MOVE_TO_INPUT_STATION_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RSEQ_RPNP1_PROCESS_AT_INPUT_STATION_START", &smCustomerEvent->RSEQ_RPNP1_PROCESS_AT_INPUT_STATION_START));
	(*mapEvent).insert(pair<string, sEvent*>("RPNP1_RSEQ_PROCESS_AT_INPUT_STATION_DONE", &smCustomerEvent->RPNP1_RSEQ_PROCESS_AT_INPUT_STATION_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RSEQ_RPNP2_MOVE_TO_INPUT_STATION_START", &smCustomerEvent->RSEQ_RPNP2_MOVE_TO_INPUT_STATION_START));
	(*mapEvent).insert(pair<string, sEvent*>("RPNP2_RSEQ_MOVE_TO_INPUT_STATION_DONE", &smCustomerEvent->RPNP2_RSEQ_MOVE_TO_INPUT_STATION_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RSEQ_RPNP2_PROCESS_AT_INPUT_STATION_START", &smCustomerEvent->RSEQ_RPNP2_PROCESS_AT_INPUT_STATION_START));
	(*mapEvent).insert(pair<string, sEvent*>("RPNP2_RSEQ_PROCESS_AT_INPUT_STATION_DONE", &smCustomerEvent->RPNP2_RSEQ_PROCESS_AT_INPUT_STATION_DONE));

	(*mapEvent).insert(pair<string, sEvent*>("RSEQ_RPNP1_MOVE_TO_BOTTOM_STATION_START", &smCustomerEvent->RSEQ_RPNP1_MOVE_TO_BOTTOM_STATION_START));
	(*mapEvent).insert(pair<string, sEvent*>("RPNP1_RSEQ_MOVE_TO_BOTTOM_STATION_DONE", &smCustomerEvent->RPNP1_RSEQ_MOVE_TO_BOTTOM_STATION_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RPNP1_RSEQ_PROCESS_AT_BOTTOM_STATION_DONE", &smCustomerEvent->RPNP1_RSEQ_PROCESS_AT_BOTTOM_STATION_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RSEQ_RPNP2_MOVE_TO_BOTTOM_STATION_START", &smCustomerEvent->RSEQ_RPNP2_MOVE_TO_BOTTOM_STATION_START));
	(*mapEvent).insert(pair<string, sEvent*>("RPNP2_RSEQ_MOVE_TO_BOTTOM_STATION_DONE", &smCustomerEvent->RPNP2_RSEQ_MOVE_TO_BOTTOM_STATION_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RPNP2_RSEQ_PROCESS_AT_BOTTOM_STATION_DONE", &smCustomerEvent->RPNP2_RSEQ_PROCESS_AT_BOTTOM_STATION_DONE));

	(*mapEvent).insert(pair<string, sEvent*>("RSEQ_RPNP1_MOVE_TO_S3_STATION_START", &smCustomerEvent->RSEQ_RPNP1_MOVE_TO_S3_STATION_START));
	(*mapEvent).insert(pair<string, sEvent*>("RPNP1_RSEQ_MOVE_TO_S3_STATION_DONE", &smCustomerEvent->RPNP1_RSEQ_MOVE_TO_S3_STATION_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RPNP1_RSEQ_PROCESS_AT_S3_STATION_DONE", &smCustomerEvent->RPNP1_RSEQ_PROCESS_AT_S3_STATION_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RSEQ_RPNP2_MOVE_TO_S3_STATION_START", &smCustomerEvent->RSEQ_RPNP2_MOVE_TO_S3_STATION_START));
	(*mapEvent).insert(pair<string, sEvent*>("RPNP2_RSEQ_MOVE_TO_S3_STATION_DONE", &smCustomerEvent->RPNP2_RSEQ_MOVE_TO_S3_STATION_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RPNP2_RSEQ_PROCESS_AT_S3_STATION_DONE", &smCustomerEvent->RPNP2_RSEQ_PROCESS_AT_S3_STATION_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RPNP_ROUT_SET_OUTPUT_TRAY_BY_RESULT_DONE", &smCustomerEvent->RPNP_ROUT_SET_OUTPUT_TRAY_BY_RESULT_DONE));

	(*mapEvent).insert(pair<string, sEvent*>("RSEQ_RPNP1_MOVE_TO_OUTPUT_STATION_START", &smCustomerEvent->RSEQ_RPNP1_MOVE_TO_OUTPUT_STATION_START));
	(*mapEvent).insert(pair<string, sEvent*>("RPNP1_RSEQ_MOVE_TO_OUTPUT_STATION_DONE", &smCustomerEvent->RPNP1_RSEQ_MOVE_TO_OUTPUT_STATION_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RPNP1_RSEQ_PROCESS_AT_OUTPUT_STATION_DONE", &smCustomerEvent->RPNP1_RSEQ_PROCESS_AT_OUTPUT_STATION_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RSEQ_RPNP2_MOVE_TO_OUTPUT_STATION_START", &smCustomerEvent->RSEQ_RPNP2_MOVE_TO_OUTPUT_STATION_START));
	(*mapEvent).insert(pair<string, sEvent*>("RPNP2_RSEQ_MOVE_TO_OUTPUT_STATION_DONE", &smCustomerEvent->RPNP2_RSEQ_MOVE_TO_OUTPUT_STATION_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RPNP2_RSEQ_PROCESS_AT_OUTPUT_STATION_DONE", &smCustomerEvent->RPNP2_RSEQ_PROCESS_AT_OUTPUT_STATION_DONE));

	(*mapEvent).insert(pair<string, sEvent*>("RSEQ_RPNP1_POST_PRODUCTION_START", &smCustomerEvent->RSEQ_RPNP1_POST_PRODUCTION_START));
	(*mapEvent).insert(pair<string, sEvent*>("RPNP1_RSEQ_POST_PRODUCTION_DONE", &smCustomerEvent->RPNP1_RSEQ_POST_PRODUCTION_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RSEQ_RPNP2_POST_PRODUCTION_START", &smCustomerEvent->RSEQ_RPNP2_POST_PRODUCTION_START));
	(*mapEvent).insert(pair<string, sEvent*>("RPNP2_RSEQ_POST_PRODUCTION_DONE", &smCustomerEvent->RPNP2_RSEQ_POST_PRODUCTION_DONE));

	(*mapEvent).insert(pair<string, sEvent*>("RSEQ_RPNP1_REMOVE_UNIT_START", &smCustomerEvent->RSEQ_RPNP1_REMOVE_UNIT_START));
	(*mapEvent).insert(pair<string, sEvent*>("RPNP1_RSEQ_REMOVE_UNIT_DONE", &smCustomerEvent->RPNP1_RSEQ_REMOVE_UNIT_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RSEQ_RPNP2_REMOVE_UNIT_START", &smCustomerEvent->RSEQ_RPNP2_REMOVE_UNIT_START));
	(*mapEvent).insert(pair<string, sEvent*>("RPNP2_RSEQ_REMOVE_UNIT_DONE", &smCustomerEvent->RPNP2_RSEQ_REMOVE_UNIT_DONE));

	(*mapEvent).insert(pair<string, sEvent*>("RINT_RSEQ_INPUT_VISION_DONE", &smCustomerEvent->RINT_RSEQ_INPUT_VISION_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("ROUT_RSEQ_OUTPUT_VISION_DONE", &smCustomerEvent->ROUT_RSEQ_OUTPUT_VISION_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("ROUT_RSEQ_OUTPUT_POST_VISION_DONE", &smCustomerEvent->ROUT_RSEQ_OUTPUT_POST_VISION_DONE));
	

	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_GET_OUTPUT_STATION_DONE", &smCustomerEvent->RTHD_GMAIN_GET_OUTPUT_STATION_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_START_GET_OUTPUT_STATION", &smCustomerEvent->RTHD_GMAIN_START_GET_OUTPUT_STATION));
	
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_LOT_UNLOAD_COMPLETE", &smCustomerEvent->RTHD_GMAIN_LOT_UNLOAD_COMPLETE));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_ALL_UNITS_PROCESSED_CURRENT_TRAY", &smCustomerEvent->RTHD_GMAIN_ALL_UNITS_PROCESSED_CURRENT_TRAY));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_ADD_TRAY_TO_WRITE_REPORT", &smCustomerEvent->RTHD_GMAIN_ADD_TRAY_TO_WRITE_REPORT));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_CONNECT_TO_CONTROLLER_DONE", &smCustomerEvent->RTHD_GMAIN_CONNECT_TO_CONTROLLER_DONE));
	
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_INPUT_SEND_NEWLOT", &smCustomerEvent->RTHD_GMAIN_INPUT_SEND_NEWLOT));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_INPUT_SEND_NEWLOT_DONE", &smCustomerEvent->GMAIN_RTHD_INPUT_SEND_NEWLOT_DONE));

	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_S2_SEND_NEWLOT", &smCustomerEvent->RTHD_GMAIN_S2_SEND_NEWLOT));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_S2_SEND_NEWLOT_DONE", &smCustomerEvent->GMAIN_RTHD_S2_SEND_NEWLOT_DONE));

	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_S1_SEND_NEWLOT", &smCustomerEvent->RTHD_GMAIN_S1_SEND_NEWLOT));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_S1_SEND_NEWLOT_DONE", &smCustomerEvent->GMAIN_RTHD_S1_SEND_NEWLOT_DONE));

	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_S3_SEND_NEWLOT", &smCustomerEvent->RTHD_GMAIN_S3_SEND_NEWLOT));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_S3_SEND_NEWLOT_DONE", &smCustomerEvent->GMAIN_RTHD_S3_SEND_NEWLOT_DONE));

	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_OUTPUT_SEND_NEWLOT", &smCustomerEvent->RTHD_GMAIN_OUTPUT_SEND_NEWLOT));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_OUTPUT_SEND_NEWLOT_DONE", &smCustomerEvent->GMAIN_RTHD_OUTPUT_SEND_NEWLOT_DONE));
	
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_REJECT_SEND_NEWLOT", &smCustomerEvent->RTHD_GMAIN_REJECT_SEND_NEWLOT));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_REJECT_SEND_NEWLOT_DONE", &smCustomerEvent->GMAIN_RTHD_REJECT_SEND_NEWLOT_DONE));

	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_BOTTOM_SEND_NEWLOT", &smCustomerEvent->RTHD_GMAIN_BOTTOM_SEND_NEWLOT));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_BOTTOM_SEND_NEWLOT_DONE", &smCustomerEvent->GMAIN_RTHD_BOTTOM_SEND_NEWLOT_DONE));

	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_INPUT_SEND_TRAYNO", &smCustomerEvent->RTHD_GMAIN_INPUT_SEND_TRAYNO));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_INPUT_SEND_TRAYNO_DONE", &smCustomerEvent->GMAIN_RTHD_INPUT_SEND_TRAYNO_DONE));

	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_S2_SEND_TRAYNO", &smCustomerEvent->RTHD_GMAIN_S2_SEND_TRAYNO));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_S2_SEND_TRAYNO_DONE", &smCustomerEvent->GMAIN_RTHD_S2_SEND_TRAYNO_DONE));

	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_S1_SEND_TRAYNO", &smCustomerEvent->RTHD_GMAIN_S1_SEND_TRAYNO));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_S1_SEND_TRAYNO_DONE", &smCustomerEvent->GMAIN_RTHD_S1_SEND_TRAYNO_DONE));

	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_BTM_SEND_TRAYNO", &smCustomerEvent->RTHD_GMAIN_BTM_SEND_TRAYNO));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_BTM_SEND_TRAYNO_DONE", &smCustomerEvent->GMAIN_RTHD_BTM_SEND_TRAYNO_DONE));

	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_S3_SEND_TRAYNO", &smCustomerEvent->RTHD_GMAIN_S3_SEND_TRAYNO));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_S3_SEND_TRAYNO_DONE", &smCustomerEvent->GMAIN_RTHD_S3_SEND_TRAYNO_DONE));

	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_OUTPUT_SEND_TRAYNO", &smCustomerEvent->RTHD_GMAIN_OUTPUT_SEND_TRAYNO));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_OUTPUT_SEND_TRAYNO_DONE", &smCustomerEvent->GMAIN_RTHD_OUTPUT_SEND_TRAYNO_DONE));

	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_REJECT_SEND_TRAYNO", &smCustomerEvent->RTHD_GMAIN_REJECT_SEND_TRAYNO));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_REJECT_SEND_TRAYNO_DONE", &smCustomerEvent->GMAIN_RTHD_REJECT_SEND_TRAYNO_DONE));

	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_INPUT_SEND_ENDLOT", &smCustomerEvent->RTHD_GMAIN_INPUT_SEND_ENDLOT));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_INPUT_SEND_ENDLOT_DONE", &smCustomerEvent->GMAIN_RTHD_INPUT_SEND_ENDLOT_DONE));

	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_S2_SEND_ENDLOT", &smCustomerEvent->RTHD_GMAIN_S2_SEND_ENDLOT));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_S2_SEND_ENDLOT_DONE", &smCustomerEvent->GMAIN_RTHD_S2_SEND_ENDLOT_DONE));

	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_BTM_SEND_ENDLOT", &smCustomerEvent->RTHD_GMAIN_BTM_SEND_ENDLOT));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_BTM_SEND_ENDLOT_DONE", &smCustomerEvent->GMAIN_RTHD_BTM_SEND_ENDLOT_DONE));

	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_S1_SEND_ENDLOT", &smCustomerEvent->RTHD_GMAIN_S1_SEND_ENDLOT));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_S1_SEND_ENDLOT_DONE", &smCustomerEvent->GMAIN_RTHD_S1_SEND_ENDLOT_DONE));

	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_S3_SEND_ENDLOT", &smCustomerEvent->RTHD_GMAIN_S3_SEND_ENDLOT));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_S3_SEND_ENDLOT_DONE", &smCustomerEvent->GMAIN_RTHD_S3_SEND_ENDLOT_DONE));

	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_OUTPUT_SEND_ENDLOT", &smCustomerEvent->RTHD_GMAIN_OUTPUT_SEND_ENDLOT));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_OUTPUT_SEND_ENDLOT_DONE", &smCustomerEvent->GMAIN_RTHD_OUTPUT_SEND_ENDLOT_DONE));

	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_REJECT_SEND_ENDLOT", &smCustomerEvent->RTHD_GMAIN_REJECT_SEND_ENDLOT));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_REJECT_SEND_ENDLOT_DONE", &smCustomerEvent->GMAIN_RTHD_REJECT_SEND_ENDLOT_DONE));

	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_INPUT_SEND_ENDTRAY", &smCustomerEvent->RTHD_GMAIN_INPUT_SEND_ENDTRAY));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_INPUT_SEND_ENDTRAY_DONE", &smCustomerEvent->GMAIN_RTHD_INPUT_SEND_ENDTRAY_DONE));

	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_BTM_SEND_ENDTRAY", &smCustomerEvent->RTHD_GMAIN_BTM_SEND_ENDTRAY));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_BTM_SEND_ENDTRAY_DONE", &smCustomerEvent->GMAIN_RTHD_BTM_SEND_ENDTRAY_DONE));

	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_S2_SEND_ENDTRAY", &smCustomerEvent->RTHD_GMAIN_S2_SEND_ENDTRAY));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_S2_SEND_ENDTRAY_DONE", &smCustomerEvent->GMAIN_RTHD_S2_SEND_ENDTRAY_DONE));

	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_S1_SEND_ENDTRAY", &smCustomerEvent->RTHD_GMAIN_S1_SEND_ENDTRAY));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_S1_SEND_ENDTRAY_DONE", &smCustomerEvent->GMAIN_RTHD_S1_SEND_ENDTRAY_DONE));

	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_S3_SEND_ENDTRAY", &smCustomerEvent->RTHD_GMAIN_S3_SEND_ENDTRAY));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_S3_SEND_ENDTRAY_DONE", &smCustomerEvent->GMAIN_RTHD_S3_SEND_ENDTRAY_DONE));

	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_OUTPUT_SEND_ENDTRAY", &smCustomerEvent->RTHD_GMAIN_OUTPUT_SEND_ENDTRAY));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_OUTPUT_SEND_ENDTRAY_DONE", &smCustomerEvent->GMAIN_RTHD_OUTPUT_SEND_ENDTRAY_DONE));

	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_REJECT_SEND_ENDTRAY", &smCustomerEvent->RTHD_GMAIN_REJECT_SEND_ENDTRAY));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_REJECT_SEND_ENDTRAY_DONE", &smCustomerEvent->GMAIN_RTHD_REJECT_SEND_ENDTRAY_DONE));

	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_SEND_INP_VISION_VERIFY_DOTGRID", &smCustomerEvent->RTHD_GMAIN_SEND_INP_VISION_VERIFY_DOTGRID));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_SEND_S2_VISION_VERIFY_DOTGRID", &smCustomerEvent->RTHD_GMAIN_SEND_S2_VISION_VERIFY_DOTGRID));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_SEND_S1_VISION_VERIFY_DOTGRID", &smCustomerEvent->RTHD_GMAIN_SEND_S1_VISION_VERIFY_DOTGRID));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_SEND_S3_VISION_VERIFY_DOTGRID", &smCustomerEvent->RTHD_GMAIN_SEND_S3_VISION_VERIFY_DOTGRID));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_SEND_OUT_VISION_VERIFY_DOTGRID", &smCustomerEvent->RTHD_GMAIN_SEND_OUT_VISION_VERIFY_DOTGRID));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_SEND_BTM_VISION_VERIFY_DOTGRID", &smCustomerEvent->RTHD_GMAIN_SEND_BTM_VISION_VERIFY_DOTGRID));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_SEND_VISION_VERIFY_DOTGRID_DONE", &smCustomerEvent->RTHD_GMAIN_SEND_VISION_VERIFY_DOTGRID_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_SEND_VISION_VERIFY_DOTGRID_FAIL", &smCustomerEvent->RTHD_GMAIN_SEND_VISION_VERIFY_DOTGRID_FAIL));

	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_SEND_INP_VISION_VERIFY_GRAYSCALE", &smCustomerEvent->RTHD_GMAIN_SEND_INP_VISION_VERIFY_GRAYSCALE));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_SEND_S2_VISION_VERIFY_GRAYSCALE", &smCustomerEvent->RTHD_GMAIN_SEND_S2_VISION_VERIFY_GRAYSCALE));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_SEND_S1_VISION_VERIFY_GRAYSCALE", &smCustomerEvent->RTHD_GMAIN_SEND_S1_VISION_VERIFY_GRAYSCALE));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_SEND_S3_VISION_VERIFY_GRAYSCALE", &smCustomerEvent->RTHD_GMAIN_SEND_S3_VISION_VERIFY_GRAYSCALE));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_SEND_OUT_VISION_VERIFY_GRAYSCALE", &smCustomerEvent->RTHD_GMAIN_SEND_OUT_VISION_VERIFY_GRAYSCALE));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_SEND_BTM_VISION_VERIFY_GRAYSCALE", &smCustomerEvent->RTHD_GMAIN_SEND_BTM_VISION_VERIFY_GRAYSCALE));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_SEND_VISION_VERIFY_GRAYSCALE_DONE", &smCustomerEvent->RTHD_GMAIN_SEND_VISION_VERIFY_GRAYSCALE_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_SEND_VISION_VERIFY_GRAYSCALE_FAIL", &smCustomerEvent->RTHD_GMAIN_SEND_VISION_VERIFY_GRAYSCALE_FAIL));


	(*mapEvent).insert(pair<string, sEvent*>("ROUT_RINT_OUTPUT_PRE_PRODUCTION_DONE", &smCustomerEvent->ROUT_RINT_OUTPUT_PRE_PRODUCTION_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RSEQ_ROUT_PNP_AWAY_FROM_OUTPUT_STATION_DONE", &smCustomerEvent->RSEQ_ROUT_PNP_AWAY_FROM_OUTPUT_STATION_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_RMAIN_REACH_TOTAL_UNIT_DONE", &smCustomerEvent->RTHD_RMAIN_REACH_TOTAL_UNIT_DONE));
	
	(*mapEvent).insert(pair<string, sEvent*>("ROUT_RPNP_PNP_REDO_POST_OFFSET_START", &smCustomerEvent->ROUT_RPNP_PNP_REDO_POST_OFFSET_START));
	(*mapEvent).insert(pair<string, sEvent*>("ROUT_RPNP_PNP_PICK_REJECT_FROM_OUTPUT_START", &smCustomerEvent->ROUT_RPNP_PNP_PICK_REJECT_FROM_OUTPUT_START));
	(*mapEvent).insert(pair<string, sEvent*>("ROUT_RPNP_PNP_PLACE_REJECT_START", &smCustomerEvent->ROUT_RPNP_PNP_PLACE_REJECT_START));
	
	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_RTHD_ALARM_ASSIST_START", &smCustomerEvent->RMAIN_RTHD_ALARM_ASSIST_START));
	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_RTHD_ALARM_MESSAGE_START", &smCustomerEvent->RMAIN_RTHD_ALARM_MESSAGE_START));
	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_RTHD_ALARM_FAILURE_START", &smCustomerEvent->RMAIN_RTHD_ALARM_FAILURE_START));
	
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_UNIT_PLACED_ON_OUTPUT_FRAME", &smCustomerEvent->RTHD_GMAIN_UNIT_PLACED_ON_OUTPUT_FRAME));

	(*mapEvent).insert(pair<string, sEvent*>("RTHD_RMAIN_CHECK_REJECT_REPLACE_END", &smCustomerEvent->RTHD_RMAIN_CHECK_REJECT_REPLACE_END));
	//(*mapEvent).insert(pair<string, sEvent*>("RTHD_RMAIN_CHECK_REJECT_REMOVE_END", &smCustomerEvent->RTHD_RMAIN_CHECK_REJECT_REMOVE_END));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_RMAIN_CHECK_REJECT_REMOVE_END", &smCustomerEvent->RTHD_RMAIN_CHECK_REJECT_REMOVE_END));
	
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_SEND_SETUP_VISION_LATENCY_ON_START", &smCustomerEvent->RTHD_GMAIN_SEND_SETUP_VISION_LATENCY_ON_START));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_SEND_SETUP_VISION_LATENCY_OFF_START", &smCustomerEvent->RTHD_GMAIN_SEND_SETUP_VISION_LATENCY_OFF_START));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_SETUP_VISION_GET_LATENCY_ON_DONE", &smCustomerEvent->GMAIN_RTHD_SETUP_VISION_GET_LATENCY_ON_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_SETUP_VISION_GET_LATENCY_OFF_DONE", &smCustomerEvent->GMAIN_RTHD_SETUP_VISION_GET_LATENCY_OFF_DONE));
	
	(*mapEvent).insert(pair<string, sEvent*>("RINT_RSEQ_INPUT_UNIT_PICK_START", &smCustomerEvent->RINT_RSEQ_INPUT_UNIT_PICK_START));
	(*mapEvent).insert(pair<string, sEvent*>("RINT_RSEQ_HEAD_AND_OUTPUT_FULL", &smCustomerEvent->RINT_RSEQ_HEAD_AND_OUTPUT_FULL));
	(*mapEvent).insert(pair<string, sEvent*>("RINT_RSEQ_LOADING_STACKER_EMPTY", &smCustomerEvent->RINT_RSEQ_LOADING_STACKER_EMPTY));
	(*mapEvent).insert(pair<string, sEvent*>("ROUT_RSEQ_OUTPUT_TABLE_READY", &smCustomerEvent->ROUT_RSEQ_OUTPUT_TABLE_READY));

	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_TEACH_VISION_START", &smCustomerEvent->RTHD_GMAIN_TEACH_VISION_START));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_TEACH_VISION_DONE", &smCustomerEvent->GMAIN_RTHD_TEACH_VISION_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_TEACHING_VISION", &smCustomerEvent->GMAIN_RTHD_TEACHING_VISION));
	
	(*mapEvent).insert(pair<string, sEvent*>("RINT_RSEQ_POST_PRODUCTION_DONE", &smCustomerEvent->RINT_RSEQ_POST_PRODUCTION_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("ROUT_RSEQ_POST_PRODUCTION_DONE", &smCustomerEvent->ROUT_RSEQ_POST_PRODUCTION_DONE));

	(*mapEvent).insert(pair<string, sEvent*>("RSEQ_RPNP1_MOVE_STANDBY_START", &smCustomerEvent->RSEQ_RPNP1_MOVE_STANDBY_START));
	(*mapEvent).insert(pair<string, sEvent*>("RSEQ_RPNP2_MOVE_STANDBY_START", &smCustomerEvent->RSEQ_RPNP2_MOVE_STANDBY_START));

	(*mapEvent).insert(pair<string, sEvent*>("RPNP1_RSEQ_MOVE_STANDBY_DONE", &smCustomerEvent->RPNP1_RSEQ_MOVE_STANDBY_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RPNP2_RSEQ_MOVE_STANDBY_DONE", &smCustomerEvent->RPNP2_RSEQ_MOVE_STANDBY_DONE));

	(*mapEvent).insert(pair<string, sEvent*>("ROUT_RSEQ_REJECT1_RESET", &smCustomerEvent->ROUT_RSEQ_REJECT1_RESET));
	(*mapEvent).insert(pair<string, sEvent*>("ROUT_RSEQ_REJECT2_RESET", &smCustomerEvent->ROUT_RSEQ_REJECT2_RESET));
	(*mapEvent).insert(pair<string, sEvent*>("ROUT_RSEQ_REJECT3_RESET", &smCustomerEvent->ROUT_RSEQ_REJECT3_RESET));
	(*mapEvent).insert(pair<string, sEvent*>("ROUT_RSEQ_REJECT4_RESET", &smCustomerEvent->ROUT_RSEQ_REJECT4_RESET));
	(*mapEvent).insert(pair<string, sEvent*>("ROUT_RSEQ_REJECT5_RESET", &smCustomerEvent->ROUT_RSEQ_REJECT5_RESET));

	(*mapEvent).insert(pair<string, sEvent*>("ROUT_RSEQ_OUTPUT_UPDATE_EVENT_DONE", &smCustomerEvent->ROUT_RSEQ_OUTPUT_UPDATE_EVENT_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_RTHD_TRIGGER_BARCODE_PRINTER", &smCustomerEvent->RMAIN_RTHD_TRIGGER_BARCODE_PRINTER));

	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_VERIFY_POS_START", &smCustomerEvent->GMAIN_RTHD_VERIFY_POS_START));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_VERIFY_POS_DONE", &smCustomerEvent->RTHD_GMAIN_VERIFY_POS_DONE));

	(*mapEvent).insert(pair<string, sEvent*>("RSEQ_GMAIN_UNLOAD_MATERIAL_START", &smCustomerEvent->RSEQ_GMAIN_UNLOAD_MATERIAL_START));
	(*mapEvent).insert(pair<string, sEvent*>("RSEQ_GMAIN_REJECT_TRAY_EXCHANGE_START", &smCustomerEvent->RSEQ_GMAIN_REJECT_TRAY_EXCHANGE_START));

	(*mapEvent).insert(pair<string, sEvent*>("RPNP1_RSEQ_Y_MOVE_STANDBY", &smCustomerEvent->RPNP1_RSEQ_Y_MOVE_STANDBY));
	(*mapEvent).insert(pair<string, sEvent*>("RPNP2_RSEQ_Y_MOVE_STANDBY", &smCustomerEvent->RPNP2_RSEQ_Y_MOVE_STANDBY));

	(*mapEvent).insert(pair<string, sEvent*>("ROUT_RTHD_REMOVE_REJECT_TRAY_START", &smCustomerEvent->ROUT_RTHD_REMOVE_REJECT_TRAY_START));
	(*mapEvent).insert(pair<string, sEvent*>("ROUT_RTHD_REMOVE_REJECT_TRAY_DONE", &smCustomerEvent->ROUT_RTHD_REMOVE_REJECT_TRAY_DONE));

	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_RTHD_READ_PREVIOUS_LOTID", &smCustomerEvent->RMAIN_RTHD_READ_PREVIOUS_LOTID));
	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_RTHD_WRITE_PREVIOUS_LOTID", &smCustomerEvent->RMAIN_RTHD_WRITE_PREVIOUS_LOTID));

	(*mapEvent).insert(pair<string, sEvent*>("RPNP1_RSEQ_BYPASS_PICK_FAIL", &smCustomerEvent->RPNP1_RSEQ_BYPASS_PICK_FAIL));
	(*mapEvent).insert(pair<string, sEvent*>("RPNP2_RSEQ_BYPASS_PICK_FAIL", &smCustomerEvent->RPNP2_RSEQ_BYPASS_PICK_FAIL));

	(*mapEvent).insert(pair<string, sEvent*>("RPNP_RSEQ_BYPASS_PLACE_FAIL", &smCustomerEvent->RPNP_RSEQ_BYPASS_PLACE_FAIL));

	(*mapEvent).insert(pair<string, sEvent*>("RPNP_RSEQ_BYPASS_PICK_FAIL_REJECT", &smCustomerEvent->RPNP_RSEQ_BYPASS_PICK_FAIL_REJECT));

	(*mapEvent).insert(pair<string, sEvent*>("ReviewMode", &smCustomerEvent->ReviewMode));

	(*mapEvent).insert(pair<string, sEvent*>("RSEQ_RINP_PNP_AWAY_FROM_INP_STATION_DONE", &smCustomerEvent->RSEQ_RINP_PNP_AWAY_FROM_INP_STATION_DONE));

	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_RTHD_CONTINUE_LOT", &smCustomerEvent->RMAIN_RTHD_CONTINUE_LOT));

	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_RTHD_CONTINUE_ABORT", &smCustomerEvent->RMAIN_RTHD_CONTINUE_ABORT));

	(*mapEvent).insert(pair<string, sEvent*>("RINP_RSEQ_INPUT_TRAY_FULL", &smCustomerEvent->RINP_RSEQ_INPUT_TRAY_FULL));
	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_RTHD_ENDLOT_CONDITION", &smCustomerEvent->RMAIN_RTHD_ENDLOT_CONDITION));

	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_RTHD_START_RUNNING", &smCustomerEvent->RMAIN_RTHD_START_RUNNING));

	(*mapEvent).insert(pair<string, sEvent*>("ROUT_RSEQ_OUTPUT_POST_ALIGNMENT_DONE", &smCustomerEvent->ROUT_RSEQ_OUTPUT_POST_ALIGNMENT_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RINP_RPNP_REQUIRE_PURGING", &smCustomerEvent->RINP_RPNP_REQUIRE_PURGING));
	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_RTHD_CHANGE_MAPPING", &smCustomerEvent->RMAIN_RTHD_CHANGE_MAPPING));

	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_START_PICK_UP_HEAD_AFG_CAL", &smCustomerEvent->RTHD_GMAIN_START_PICK_UP_HEAD_AFG_CAL));
	(*mapEvent).insert(pair<string, sEvent*>("ROUT_RSEQ_OUTPUT_FIRST_UNIT", &smCustomerEvent->ROUT_RSEQ_OUTPUT_FIRST_UNIT));
	(*mapEvent).insert(pair<string, sEvent*>("ROUT_RSEQ_PNP_PICK_FIRST_UNIT", &smCustomerEvent->ROUT_RSEQ_PNP_PICK_FIRST_UNIT));

	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RMAIN_STOP_CALIBRATION", &smCustomerEvent->GMAIN_RMAIN_STOP_CALIBRATION));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RMAIN_LOADING_CALIBRATION_RECIPE_DONE", &smCustomerEvent->GMAIN_RMAIN_LOADING_CALIBRATION_RECIPE_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_GMAIN_LOADING_CALIBRATION_RECIPE", &smCustomerEvent->RMAIN_GMAIN_LOADING_CALIBRATION_RECIPE));

	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_UPDATE_IN_PROGRESS_MAPPING", &smCustomerEvent->RTHD_GMAIN_UPDATE_IN_PROGRESS_MAPPING));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_UPDATE_INPUT_MAPPING", &smCustomerEvent->RTHD_GMAIN_UPDATE_INPUT_MAPPING));

	(*mapEvent).insert(pair<string, sEvent*>("RINT_RSEQ_INPUT_FIRST_UNIT", &smCustomerEvent->RINT_RSEQ_INPUT_FIRST_UNIT));
	(*mapEvent).insert(pair<string, sEvent*>("RINT_RSEQ_SWITCH_NEXT_INPUT_LOT", &smCustomerEvent->RINT_RSEQ_SWITCH_NEXT_INPUT_LOT));

	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_GMAIN_SAVE_UNFINISHED_LOT", &smCustomerEvent->RMAIN_GMAIN_SAVE_UNFINISHED_LOT));
	
	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_RINT_INPUT_FINE_TUNE_OR_SKIP_START", &smCustomerEvent->RMAIN_RINT_INPUT_FINE_TUNE_OR_SKIP_START));
	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_RINT_INPUT_FINE_TUNE_OR_SKIP_FAIL", &smCustomerEvent->RMAIN_RINT_INPUT_FINE_TUNE_OR_SKIP_FAIL));
	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_RINT_INPUT_FINE_TUNE_OR_SKIP_DONE", &smCustomerEvent->RMAIN_RINT_INPUT_FINE_TUNE_OR_SKIP_DONE));

	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_RINT_OUTPUT_FINE_TUNE_OR_SKIP_START", &smCustomerEvent->RMAIN_RINT_OUTPUT_FINE_TUNE_OR_SKIP_START));
	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_RINT_OUTPUT_FINE_TUNE_OR_SKIP_FAIL", &smCustomerEvent->RMAIN_RINT_OUTPUT_FINE_TUNE_OR_SKIP_FAIL));
	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_RINT_OUTPUT_FINE_TUNE_OR_SKIP_DONE", &smCustomerEvent->RMAIN_RINT_OUTPUT_FINE_TUNE_OR_SKIP_DONE));

	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_RTHD_UPDATE_MAP_AFTER_SKIP_UNIT_START", &smCustomerEvent->RMAIN_RTHD_UPDATE_MAP_AFTER_SKIP_UNIT_START));
	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_RTHD_UPDATE_MAP_AFTER_SKIP_UNIT_DONE", &smCustomerEvent->RMAIN_RTHD_UPDATE_MAP_AFTER_SKIP_UNIT_DONE));

	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_RTHD_CURRENT_INPUT_LOT_DONE", &smCustomerEvent->RMAIN_RTHD_CURRENT_INPUT_LOT_DONE));

	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_RTHD_LAST_UNIT_FOR_LOT_AND_WAIT", &smCustomerEvent->RMAIN_RTHD_LAST_UNIT_FOR_LOT_AND_WAIT));
	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_RTHD_CURRENT_LOT_ALL_PROCESSED", &smCustomerEvent->RMAIN_RTHD_CURRENT_LOT_ALL_PROCESSED));
	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_RPNP_RUN_PNP_BEFORE_FINISH_LOT", &smCustomerEvent->RMAIN_RPNP_RUN_PNP_BEFORE_FINISH_LOT));
	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_RTHD_UPDATE_MES_DATA", &smCustomerEvent->RMAIN_RTHD_UPDATE_MES_DATA));
	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_RTHD_UPDATE_MES_DATA_DONE", &smCustomerEvent->RMAIN_RTHD_UPDATE_MES_DATA_DONE));

	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_RTHD_NEW_OR_END_LOT_CONDITION", &smCustomerEvent->RMAIN_RTHD_NEW_OR_END_LOT_CONDITION));

	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_RTHD_UPDATE_MES_LOT_DATA", &smCustomerEvent->RMAIN_RTHD_UPDATE_MES_LOT_DATA));

	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_RTHD_IS_PREVIOUS_SAVE_LOT_MATCH", &smCustomerEvent->RMAIN_RTHD_IS_PREVIOUS_SAVE_LOT_MATCH));

	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_RTHD_IS_REMAINTRAY", &smCustomerEvent->RMAIN_RTHD_IS_REMAINTRAY));
	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_RTHD_IS_UNLOADTRAY", &smCustomerEvent->RMAIN_RTHD_IS_UNLOADTRAY));
	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_RTHD_IS_REMAIN_OR_UNLOADTRAY", &smCustomerEvent->RMAIN_RTHD_IS_REMAIN_OR_UNLOADTRAY));
	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_RTHD_THR_IS_REMAINTRAY", &smCustomerEvent->RMAIN_RTHD_THR_IS_REMAINTRAY));

	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_GTHD_TRIGGER_BARCODE", &smCustomerEvent->RMAIN_GTHD_TRIGGER_BARCODE));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_GET_BARCODE_DONE", &smCustomerEvent->RTHD_GMAIN_GET_BARCODE_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_GET_BARCODE_FAIL", &smCustomerEvent->RTHD_GMAIN_GET_BARCODE_FAIL));


	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_GMAIN_READ_TABLE_TO_BE_PLACED", &smCustomerEvent->RMAIN_GMAIN_READ_TABLE_TO_BE_PLACED));
	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_GMAIN_READ_TABLE_TO_BE_PLACED_DONE", &smCustomerEvent->RMAIN_GMAIN_READ_TABLE_TO_BE_PLACED_DONE));

	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_GMAIN_READ_TABLE_TO_BE_PLACED_POST", &smCustomerEvent->RMAIN_GMAIN_READ_TABLE_TO_BE_PLACED_POST));
	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_GMAIN_READ_TABLE_TO_BE_PLACED_POST_DONE", &smCustomerEvent->RMAIN_GMAIN_READ_TABLE_TO_BE_PLACED_POST_DONE));

	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_RTHD_UPDATE_MAP_AFTER_S1_MISSING_UNIT", &smCustomerEvent->RMAIN_RTHD_UPDATE_MAP_AFTER_S1_MISSING_UNIT));
	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_RTHD_UPDATE_MAP_AFTER_S3_MISSING_UNIT", &smCustomerEvent->RMAIN_RTHD_UPDATE_MAP_AFTER_S3_MISSING_UNIT));
	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_RTHD_UPDATE_MAP_AFTER_OUTPUT_MISSING_UNIT", &smCustomerEvent->RMAIN_RTHD_UPDATE_MAP_AFTER_OUTPUT_MISSING_UNIT));
	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_RTHD_UPDATE_MAP_AFTER_OUTPUT_POST_MISSING_UNIT", &smCustomerEvent->RMAIN_RTHD_UPDATE_MAP_AFTER_OUTPUT_POST_MISSING_UNIT));

	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_RTHD_UPDATE_MAP_AFTER_SKIP_UNIT_START_NOMES", &smCustomerEvent->RMAIN_RTHD_UPDATE_MAP_AFTER_SKIP_UNIT_START_NOMES));
	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_RTHD_UPDATE_MAP_AFTER_SKIP_UNIT_DONE_NOMES", &smCustomerEvent->RMAIN_RTHD_UPDATE_MAP_AFTER_SKIP_UNIT_DONE_NOMES));

	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_ROUT_OUTPUT_POST_FINE_TUNE_OR_SKIP_START", &smCustomerEvent->RMAIN_ROUT_OUTPUT_POST_FINE_TUNE_OR_SKIP_START));
	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_ROUT_OUTPUT_POST_FINE_TUNE_OR_SKIP_FAIL", &smCustomerEvent->RMAIN_ROUT_OUTPUT_POST_FINE_TUNE_OR_SKIP_FAIL));
	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_ROUT_OUTPUT_POST_FINE_TUNE_OR_SKIP_DONE", &smCustomerEvent->RMAIN_ROUT_OUTPUT_POST_FINE_TUNE_OR_SKIP_DONE));

	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_SW1_SEND_SNAP_POS", &smCustomerEvent->RTHD_GMAIN_SW1_SEND_SNAP_POS));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_SW1_SEND_SNAP_POS_DONE", &smCustomerEvent->GMAIN_RTHD_SW1_SEND_SNAP_POS_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_SW2_FACET_SEND_SNAP_POS", &smCustomerEvent->RTHD_GMAIN_SW2_FACET_SEND_SNAP_POS));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_SW2_FACET_SEND_SNAP_POS_DONE", &smCustomerEvent->GMAIN_RTHD_SW2_FACET_SEND_SNAP_POS_DONE));
	(*mapEvent).insert(pair<string, sEvent*>("RTHD_GMAIN_SW3_FACET_SEND_SNAP_POS", &smCustomerEvent->RTHD_GMAIN_SW3_FACET_SEND_SNAP_POS));
	(*mapEvent).insert(pair<string, sEvent*>("GMAIN_RTHD_SW3_FACET_SEND_SNAP_POS_DONE", &smCustomerEvent->GMAIN_RTHD_SW3_FACET_SEND_SNAP_POS_DONE));
	
	(*mapEvent).insert(pair<string, sEvent*>("START_PNP_Calibration", &smCustomerEvent->START_PNP_Calibration));
	(*mapEvent).insert(pair<string, sEvent*>("PNP_CALIBRATION_WRITE_REPORT", &smCustomerEvent->PNP_CALIBRATION_WRITE_REPORT));

	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_GMAIN_RESET_S2S3_VISION_RESULT", &smCustomerEvent->RMAIN_GMAIN_RESET_S2S3_VISION_RESULT));
	(*mapEvent).insert(pair<string, sEvent*>("RMAIN_GMAIN_RESET_S2S3_VISION_RESULT_DONE", &smCustomerEvent->RMAIN_GMAIN_RESET_S2S3_VISION_RESULT_DONE));
	return 0;
}
int MapEventCustomer(map<string, sEvent*> *mapEvent, CustomerSharedMemoryEvent *smCustomerEvent)
{
	return 0;
}

int MapGeneralIntPlatform(map<string, int*> *mapGeneralInt, CustomerSharedMemoryGeneral *smCustomerGeneral)
{
	(*mapGeneralInt).insert(pair<string, int*>("State", &smCustomerGeneral->State));
	(*mapGeneralInt).insert(pair<string, int*>("nStateCall", &smCustomerGeneral->nStateCall));
	(*mapGeneralInt).insert(pair<string, int*>("nStatePrevious", &smCustomerGeneral->nStatePrevious));
	(*mapGeneralInt).insert(pair<string, int*>("ManualID", &smCustomerGeneral->ManualID));
	(*mapGeneralInt).insert(pair<string, int*>("AlarmID", &smCustomerGeneral->AlarmID));
	(*mapGeneralInt).insert(pair<string, int*>("MaintenanceID", &smCustomerGeneral->MaintenanceID));

	(*mapGeneralInt).insert(pair<string, int*>("updateMessage", &smCustomerGeneral->updateMessage));

	(*mapGeneralInt).insert(pair<string, int*>("nLoginAuthority", &smCustomerGeneral->nLoginAuthority));

	(*mapGeneralInt).insert(pair<string, int*>("nTeachPointMotorType", &smCustomerGeneral->nTeachPointMotorType));
	(*mapGeneralInt).insert(pair<string, int*>("nTeachPointCardNo", &smCustomerGeneral->nTeachPointCardNo));
	(*mapGeneralInt).insert(pair<string, int*>("nTeachPointAxis", &smCustomerGeneral->nTeachPointAxis));

	(*mapGeneralInt).insert(pair<string, int*>("nTeachPointIndexNo", &smCustomerGeneral->nTeachPointIndexNo));

	(*mapGeneralInt).insert(pair<string, int*>("nMotorEncoderPosition", &smCustomerGeneral->nMotorEncoderPosition));
	(*mapGeneralInt).insert(pair<string, int*>("nMotorForwardLimit", &smCustomerGeneral->nMotorForwardLimit));
	(*mapGeneralInt).insert(pair<string, int*>("nMotorReverseLimit", &smCustomerGeneral->nMotorReverseLimit));
	(*mapGeneralInt).insert(pair<string, int*>("nMotorHomeSensor", &smCustomerGeneral->nMotorHomeSensor));
	(*mapGeneralInt).insert(pair<string, int*>("nMotorOnStatus", &smCustomerGeneral->nMotorOnStatus));
	(*mapGeneralInt).insert(pair<string, int*>("nMotorMovingStatus", &smCustomerGeneral->nMotorMovingStatus));
	(*mapGeneralInt).insert(pair<string, int*>("nMotorAlarmOn", &smCustomerGeneral->nMotorAlarmOn));
	(*mapGeneralInt).insert(pair<string, int*>("nMotorSpeedPercent", &smCustomerGeneral->nMotorSpeedPercent));
	(*mapGeneralInt).insert(pair<string, int*>("nMotorAccelerationPercent", &smCustomerGeneral->nMotorAccelerationPercent));
	return 0;
}

int MapGeneralIntProduct(map<string, int*> *mapGeneralInt, CustomerSharedMemoryGeneral *smCustomerGeneral)
{
	(*mapGeneralInt).insert(pair<string, int*>("nXMotorEncoderPosition", &smCustomerGeneral->nXMotorEncoderPosition));
	(*mapGeneralInt).insert(pair<string, int*>("nYMotorEncoderPosition", &smCustomerGeneral->nYMotorEncoderPosition));
	return 0;
}

int MapGeneralIntCustomer(map<string, int*> *mapGeneralInt, CustomerSharedMemoryGeneral *smCustomerGeneral)
{
	return 0;
}

int MapGeneralSignedLongPlatform(map<string, signed long*> *mapGeneralSignedlong, CustomerSharedMemoryGeneral *smCustomerGeneral)
{
	(*mapGeneralSignedlong).insert(pair<string, signed long*>("nMotorMovePosition", &smCustomerGeneral->nMotorMovePosition));
	return 0;
}

int MapGeneralSignedLongProduct(map<string, signed long*> *mapGeneralSignedlong, CustomerSharedMemoryGeneral *smCustomerGeneral)
{
	return 0;
}

int MapGeneralSignedLongCustomer(map<string, signed long*> *mapGeneralSignedlong, CustomerSharedMemoryGeneral *smCustomerGeneral)
{
	return 0;
}

int MapGeneralDoublePlatform(map<string, double*> *mapGeneralDouble, CustomerSharedMemoryGeneral *smCustomerGeneral)
{
	(*mapGeneralDouble).insert(pair<string, double*>("dMotorMovePosition", &smCustomerGeneral->dMotorMovePosition));
	(*mapGeneralDouble).insert(pair<string, double*>("dMotorEncoderPosition", &smCustomerGeneral->dMotorEncoderPosition));
	return 0;
}

int MapGeneralDoubleProduct(map<string, double*> *mapGeneralDouble, CustomerSharedMemoryGeneral *smCustomerGeneral)
{
	return 0;
}

int MapGeneralDoubleCustomer(map<string, double*> *mapGeneralDouble, CustomerSharedMemoryGeneral *smCustomerGeneral)
{
	return 0;
}

int MapGeneralStringPlatform(map<string, char*> *mapGeneralString, CustomerSharedMemoryGeneral *smCustomerGeneral)
{
	//m_mapGeneralString.insert(pair<string, char*>("MessageStatus", &smCustomerGeneral->MessageStatus[1000]));
	
	return 0;
}

int MapGeneraStringProduct(map<string, char*> *mapGeneralString, CustomerSharedMemoryGeneral *smCustomerGeneral)
{
	return 0;
}

int MapGeneralStringCustomer(map<string, char*> *mapGeneralString, CustomerSharedMemoryGeneral *smCustomerGeneral)
{
	return 0;
}

int MapGeneralLargeIntegerPlatform(map<string, LARGE_INTEGER*> *mapGeneralLargeInteger, CustomerSharedMemoryGeneral *smCustomerGeneral)
{
	return 0;
}

int MapGeneraLargeIntegerProduct(map<string, LARGE_INTEGER*> *mapGeneralLargeInteger, CustomerSharedMemoryGeneral *smCustomerGeneral)
{
	(*mapGeneralLargeInteger).insert(pair<string, LARGE_INTEGER*>("lnClockGlobalStart", &smCustomerGeneral->lnClockGlobalStart));
	return 0;
}

int MapGeneralLargeIntegerCustomer(map<string, LARGE_INTEGER*> *mapGeneralLargeInteger, CustomerSharedMemoryGeneral *smCustomerGeneral)
{
	return 0;
}

int ResetShareMemoryEvent()
{
	sprintf_s(smCustomerGeneral->MessageStatus, "NA");

	smCustomerEvent->RTXSoftwareInitializeDone.Set = false;
	smCustomerEvent->JobMode.Set = false;
	smCustomerEvent->Homed.Set = false;
	smCustomerEvent->StartPause.Set = false;
	smCustomerEvent->StartJob.Set = false;
	smCustomerEvent->JobStart.Set = false;
	smCustomerEvent->JobPause.Set = false;
	smCustomerEvent->JobStop.Set = false;
	smCustomerEvent->JobStep.Set = false;
	smCustomerEvent->JobSlow.Set = false;
	smCustomerEvent->ExitRTX.Set = false;
	smCustomerEvent->ExitRTXDone.Set = false;
	smCustomerEvent->Alarm.Set = false;
	smCustomerEvent->StartManualMode.Set = false;
	smCustomerEvent->StopManualMode.Set = false;
	smCustomerEvent->SeqGUISendMsgDone.Set = false;

	return 0;
}

int ReleaseSharedMemory()
{
	LARGE_INTEGER lnClockStart, lnClockEnd, lnClockSpan;
	RtGetClockTime(CLOCK_FASTEST, &lnClockStart);
	LARGE_INTEGER  lnPeriod_1ms;
	LARGE_INTEGER  lnPeriod_200ms;
	lnPeriod_1ms.QuadPart = 10000;
	lnPeriod_200ms.QuadPart = 200000;

	smCustomerEvent->ExitRTX.Set = true;
	while (smCustomerEvent->ExitRTXDone.Set == false)
	{
		RtGetClockTime(CLOCK_FASTEST, &lnClockEnd);
		lnClockSpan.QuadPart = lnClockEnd.QuadPart - lnClockStart.QuadPart;
		if (lnClockSpan.QuadPart / m_TimeCount > 20000)
		{
			RtPrintf("Wait RTX close timeout %ums.\n", lnClockSpan.QuadPart / m_TimeCount);
			break;
		}
		RtSleepFt(&lnPeriod_1ms);
	}

	RtSleepFt(&lnPeriod_200ms);

	//if(smEvent->ExitRTXDone.Set == true)
	{
		// close shared memory for RTSS
		if (hSharedMemorySetting)
		{
			//RtUnmapSharedMemory(smSetting);

			if (!(RtCloseHandle(hSharedMemorySetting)))
			{
				//AfxMessageBox("Can't close rtss shared memory");
				//ExitProcess(2);
			}
			hSharedMemorySetting = NULL;
		}
		if (hSharedMemoryTeachPoint)
		{
			//RtUnmapSharedMemory(smTeachPoint);

			if (!(RtCloseHandle(hSharedMemoryTeachPoint)))
			{
				//AfxMessageBox("Can't close rtss shared memory");
				//ExitProcess(2);
			}
			hSharedMemoryTeachPoint = NULL;
		}
		if (hSharedMemoryProduction)
		{
			//RtUnmapSharedMemory(smProduction);

			if (!(RtCloseHandle(hSharedMemoryProduction)))
			{
				//AfxMessageBox("Can't close rtss shared memory");
				//ExitProcess(2);
			}
			hSharedMemoryProduction = NULL;
		}
		if (hSharedMemoryCustomize)
		{
			//RtUnmapSharedMemory(smCustomize);

			if (!(RtCloseHandle(hSharedMemoryCustomize)))
			{
				//AfxMessageBox("Can't close rtss shared memory");
				//ExitProcess(2);
			}
			hSharedMemoryCustomize = NULL;
		}
		if (hSharedMemoryIO)
		{
			//RtUnmapSharedMemory(smIO);

			if (!(RtCloseHandle(hSharedMemoryIO)))
			{
				//AfxMessageBox("Can't close rtss shared memory");
				//ExitProcess(2);
			}
			hSharedMemoryIO = NULL;
		}
		if (hSharedMemoryModuleStatus)
		{
			//RtUnmapSharedMemory(smModuleStatus);

			if (!(RtCloseHandle(hSharedMemoryModuleStatus)))
			{
				//AfxMessageBox("Can't close rtss shared memory");
				//ExitProcess(2);
			}
			hSharedMemoryModuleStatus = NULL;
		}
		if (hSharedMemoryEvent)
		{
			//RtUnmapSharedMemory(smEvent);

			if (!(RtCloseHandle(hSharedMemoryEvent)))
			{
				//AfxMessageBox("Can't close rtss shared memory");
				//ExitProcess(2);
			}
			hSharedMemoryEvent = NULL;
		}
		if (hSharedMemoryGeneral)
		{
			//RtUnmapSharedMemory(smGeneral);

			if (!(RtCloseHandle(hSharedMemoryGeneral)))
			{
				//AfxMessageBox("Can't close rtss shared memory");
				ExitProcess(2);
			}
			hSharedMemoryGeneral = NULL;
		}
	}

	//ReleaseHandle(&hSharedMemorySetting, &hSharedMemoryTeachPoint, &hSharedMemoryProduction, &hSharedMemoryCustomize, &hSharedMemoryIO, &hSharedMemoryModuleStatus, &hSharedMemoryEvent, &hSharedMemoryGeneral);
	return 0;
}

void SetShareMemorySettingBool(LPSTR settingName, bool enable)
{
	*m_mapSettingBool.at(settingName) = enable;
	return;
//#pragma region Input XY Table
//	if (strcmp(settingName, "EnableVision") == 0)
//	{
//		smCustomerSetting->EnableVision = enable;
//		return;
//	}
//	if (strcmp(settingName, "DisableFrameAndTilePresentSensorDuringUnload") == 0)
//	{
//		smCustomerSetting->DisableFrameAndTilePresentSensorDuringUnload = enable;
//		return;
//	}
//	if (strcmp(settingName, "EnableOnlineMode") == 0)
//	{
//		smCustomerSetting->EnableOnlineMode = enable;
//		return;
//	}
//	if (strcmp(settingName, "EnablePositioningByFiducial") == 0)
//	{
//		smCustomerSetting->EnablePositioningByFiducial = enable;
//		return;
//	}
//	if (strcmp(settingName, "TriggerTeachAlignment") == 0)
//	{
//		smCustomerSetting->TriggerTeachAlignment = enable;
//		return;
//	}
//	if (strcmp(settingName, "EnableThetaOffsetUsingVisionFeedback") == 0)
//	{
//		smCustomerSetting->EnableThetaOffsetUsingVisionFeedback = enable;
//		return;
//	}
//
//	if (strcmp(settingName, "SetInputTableVacuumValve") == 0)
//	{
//		smCustomerSetting->SetInputTableVacuumValve = enable;
//		return;
//	}
//#pragma endregion
//else
	throw EXCEPTION_WRITE_FAULT;
}

int GetShareMemorySettingBool(LPSTR settingName)
{
	return *m_mapSettingBool.at(settingName);
//#pragma region Input XY Table
//	if (strcmp(settingName, "EnableVision") == 0)
//		return smCustomerSetting->EnableVision;

//	if (strcmp(settingName, "DisableFrameAndTilePresentSensorDuringUnload") == 0)
//		return smCustomerSetting->DisableFrameAndTilePresentSensorDuringUnload;

//	if (strcmp(settingName, "EnableOnlineMode") == 0)
//		return smCustomerSetting->EnableOnlineMode;
//	if (strcmp(settingName, "EnablePositioningByFiducial") == 0)
//		return smCustomerSetting->EnablePositioningByFiducial;

//	if (strcmp(settingName, "TriggerTeachAlignment") == 0)
//		return smCustomerSetting->TriggerTeachAlignment;

//	if (strcmp(settingName, "EnableThetaOffsetUsingVisionFeedback") == 0)
//		return smCustomerSetting->EnableThetaOffsetUsingVisionFeedback;

//	if (strcmp(settingName, "SetInputTableVacuumValve") == 0)
//		return smCustomerSetting->SetInputTableVacuumValve;

//#pragma endregion
//else
	throw EXCEPTION_WRITE_FAULT;
}

int GetShareMemorySettingArrayBool(LPSTR settingName, int arrayNo)
{
	char chVariable[256];
	memset(chVariable, 0, sizeof(chVariable));
	sprintf_s(chVariable, sizeof(chVariable), "%s%u", settingName, arrayNo);
	return *m_mapSettingArrayBool.at(chVariable);
//#pragma region Input XY Table
//	if (strcmp(settingName, "EnableFiducial") == 0)
//		return smCustomerSetting->EnableFiducial[arrayNo];
//#pragma endregion
	throw EXCEPTION_WRITE_FAULT;
}

void SetShareMemorySettingArrayBool(LPSTR settingName, int arrayNo, bool enable)
{
	char chVariable[256];
	memset(chVariable, 0, sizeof(chVariable));
	sprintf_s(chVariable, sizeof(chVariable), "%s%u", settingName, arrayNo);
	*m_mapSettingArrayBool.at(chVariable) = enable;
	return;
//#pragma region Input XY Table
//	if (strcmp(settingName, "EnableFiducial") == 0)
//	{
//		smCustomerSetting->EnableFiducial[arrayNo] = enable;
//		return;
//	}
//#pragma endregion
	//else
	throw EXCEPTION_WRITE_FAULT;
}
void SetShareMemorySettingArray(LPSTR parameterName, int arrayNo, LPSTR resultName, int parameterValue)
{
	char chVariable[256];
	memset(chVariable, 0, sizeof(chVariable));
	
	if (strcmp(parameterName, "InputVision") == 0)
	{
		sprintf_s(chVariable, sizeof(chVariable), "%s%u%s", parameterName, arrayNo, resultName);
		*m_mapSettingVisionInfoInt.at(chVariable) = parameterValue;
		return;
	}
	if (strcmp(parameterName, "S1Vision") == 0)
	{
		sprintf_s(chVariable, sizeof(chVariable), "%s%u%s", parameterName, arrayNo, resultName);
		*m_mapSettingVisionInfoInt.at(chVariable) = parameterValue;
		return;
	}
	if (strcmp(parameterName, "S2FacetVision") == 0)
	{
		sprintf_s(chVariable, sizeof(chVariable), "%s%u%s", parameterName, arrayNo, resultName);
		*m_mapSettingVisionInfoInt.at(chVariable) = parameterValue;
		return;
	}
	if (strcmp(parameterName, "BottomVision") == 0)
	{
		sprintf_s(chVariable, sizeof(chVariable), "%s%u%s", parameterName, arrayNo, resultName);
		*m_mapSettingVisionInfoInt.at(chVariable) = parameterValue;
		return;
	}
	if (strcmp(parameterName, "SidewallLeftVision") == 0)
	{
		sprintf_s(chVariable, sizeof(chVariable), "%s%u%s", parameterName, arrayNo, resultName);
		*m_mapSettingVisionInfoInt.at(chVariable) = parameterValue;
		return;
	}
	if (strcmp(parameterName, "SidewallRightVision") == 0)
	{
		sprintf_s(chVariable, sizeof(chVariable), "%s%u%s", parameterName, arrayNo, resultName);
		*m_mapSettingVisionInfoInt.at(chVariable) = parameterValue;
		return;
	}
	if (strcmp(parameterName, "SidewallFrontVision") == 0)
	{
		sprintf_s(chVariable, sizeof(chVariable), "%s%u%s", parameterName, arrayNo, resultName);
		*m_mapSettingVisionInfoInt.at(chVariable) = parameterValue;
		return;
	}
	if (strcmp(parameterName, "SidewallRearVision") == 0)
	{
		sprintf_s(chVariable, sizeof(chVariable), "%s%u%s", parameterName, arrayNo, resultName);
		*m_mapSettingVisionInfoInt.at(chVariable) = parameterValue;
		return;
	}
	if (strcmp(parameterName, "S3Vision") == 0)
	{
		sprintf_s(chVariable, sizeof(chVariable), "%s%u%s", parameterName, arrayNo, resultName);
		*m_mapSettingVisionInfoInt.at(chVariable) = parameterValue;
		return;
	}
	if (strcmp(parameterName, "S3FacetVision") == 0)
	{
		sprintf_s(chVariable, sizeof(chVariable), "%s%u%s", parameterName, arrayNo, resultName);
		*m_mapSettingVisionInfoInt.at(chVariable) = parameterValue;
		return;
	}
	if (strcmp(parameterName, "OutputVision") == 0)
	{
		sprintf_s(chVariable, sizeof(chVariable), "%s%u%s", parameterName, arrayNo, resultName);
		*m_mapSettingVisionInfoInt.at(chVariable) = parameterValue;
		return;
	}
	return;
	
	throw EXCEPTION_WRITE_FAULT;
}
int GetShareMemorySettingArray(LPSTR parameterName, int arrayNo, LPSTR resultName)
{
	char chVariable[256];
	memset(chVariable, 0, sizeof(chVariable));
	
	if (strcmp(parameterName, "InputVision") == 0)
	{
		sprintf_s(chVariable, sizeof(chVariable), "%s%u%s", parameterName, arrayNo, resultName);
		return *m_mapSettingVisionInfoInt.at(chVariable);
	}
	if (strcmp(parameterName, "S1Vision") == 0)
	{
		sprintf_s(chVariable, sizeof(chVariable), "%s%u%s", parameterName, arrayNo, resultName);
		return *m_mapSettingVisionInfoInt.at(chVariable);
	}
	if (strcmp(parameterName, "BottomVision") == 0)
	{
		sprintf_s(chVariable, sizeof(chVariable), "%s%u%s", parameterName, arrayNo, resultName);
		return *m_mapSettingVisionInfoInt.at(chVariable);
	}
	if (strcmp(parameterName, "SidewallLeftVision") == 0)
	{
		sprintf_s(chVariable, sizeof(chVariable), "%s%u%s", parameterName, arrayNo, resultName);
		return *m_mapSettingVisionInfoInt.at(chVariable);
	}
	if (strcmp(parameterName, "SidewallRightVision") == 0)
	{
		sprintf_s(chVariable, sizeof(chVariable), "%s%u%s", parameterName, arrayNo, resultName);
		return *m_mapSettingVisionInfoInt.at(chVariable);
	}
	if (strcmp(parameterName, "SidewallFrontVision") == 0)
	{
		sprintf_s(chVariable, sizeof(chVariable), "%s%u%s", parameterName, arrayNo, resultName);
		return *m_mapSettingVisionInfoInt.at(chVariable);
	}
	if (strcmp(parameterName, "SidewallRearVision") == 0)
	{
		sprintf_s(chVariable, sizeof(chVariable), "%s%u%s", parameterName, arrayNo, resultName);
		return *m_mapSettingVisionInfoInt.at(chVariable);
	}
	if (strcmp(parameterName, "S3Vision") == 0)
	{
		sprintf_s(chVariable, sizeof(chVariable), "%s%u%s", parameterName, arrayNo, resultName);
		return *m_mapSettingVisionInfoInt.at(chVariable);
	}
	if (strcmp(parameterName, "OutputVision") == 0)
	{
		sprintf_s(chVariable, sizeof(chVariable), "%s%u%s", parameterName, arrayNo, resultName);
		return *m_mapSettingVisionInfoInt.at(chVariable);
	}
	
	throw EXCEPTION_WRITE_FAULT;
}
signed long GetShareMemorySettingLong(LPSTR settingName)
{
	return *m_mapSettingSignedLong.at(settingName);
//#pragma region Input XY Table
//	if (strcmp(settingName, "CassetteFirstSlotOffset_um") == 0)
//		return smCustomerSetting->CassetteFirstSlotOffset_um;
//	if (strcmp(settingName, "CassetteUnloadOffset_um") == 0)
//		return smCustomerSetting->CassetteUnloadOffset_um;
//	if (strcmp(settingName, "MapRowDirection") == 0)
//		return smCustomerSetting->MapRowDirection;
//	if (strcmp(settingName, "MapColDirection") == 0)
//		return smCustomerSetting->MapColDirection;
//
//	if (strcmp(settingName, "TransferArmInsertFrameOrTileLoadOffset_um") == 0)
//		return smCustomerSetting->TransferArmInsertFrameOrTileLoadOffset_um;
//	if (strcmp(settingName, "TransferArmElevatorStandbyOffset_um") == 0)
//		return smCustomerSetting->TransferArmElevatorStandbyOffset_um;
//	if (strcmp(settingName, "TransferArmLoadUnloadOffset_um") == 0)
//		return smCustomerSetting->TransferArmLoadUnloadOffset_um;
//	if (strcmp(settingName, "InputVisionZAxisUpOffset_um") == 0)
//		return smCustomerSetting->InputVisionZAxisUpOffset_um;
//	if (strcmp(settingName, "UnitSupportUpOffset_um") == 0)
//		return smCustomerSetting->UnitSupportUpOffset_um;
//	if (strcmp(settingName, "FirstUnitXPosition_um") == 0)
//		return smCustomerSetting->FirstUnitXPosition_um;
//	if (strcmp(settingName, "FirstUnitYPosition_um") == 0)
//		return smCustomerSetting->FirstUnitYPosition_um;
//	if (strcmp(settingName, "FirstUnitThetaPosition_mDegree") == 0)
//		return smCustomerSetting->FirstUnitThetaPosition_mDegree;
//	if (strcmp(settingName, "BarcodeXPosition_um") == 0)
//		return smCustomerSetting->BarcodeXPosition_um;
//	if (strcmp(settingName, "BarcodeYPosition_um") == 0)
//		return smCustomerSetting->BarcodeYPosition_um;
//	if (strcmp(settingName, "BarcodeZPosition_um") == 0)
//		return smCustomerSetting->BarcodeZPosition_um;
//	if (strcmp(settingName, "BarcodeThetaPosition_mDegree") == 0)
//		return smCustomerSetting->BarcodeThetaPosition_mDegree;
//	if (strcmp(settingName, "InspectionOrientation_mDegree") == 0)
//		return smCustomerSetting->InspectionOrientation_mDegree;

//	if (strcmp(settingName, "FirstUnitXVisionOffset_um") == 0)
//		return smCustomerSetting->FirstUnitXVisionOffset_um;
//	if (strcmp(settingName, "FirstUnitYVisionOffset_um") == 0)
//		return smCustomerSetting->FirstUnitYVisionOffset_um;
//	if (strcmp(settingName, "FirstUnitThetaVisionOffset_mDegree") == 0)
//		return smCustomerSetting->FirstUnitThetaVisionOffset_mDegree;

//#pragma endregion
	throw EXCEPTION_WRITE_FAULT;
}

void SetShareMemorySettingLong(LPSTR settingName, long value)
{
	*m_mapSettingSignedLong.at(settingName) = value;
	return;
//#pragma region Input XY Table
//	if (strcmp(settingName, "CassetteFirstSlotOffset_um") == 0)
//	{
//		smCustomerSetting->CassetteFirstSlotOffset_um = value;
//		return;
//	}
//	if (strcmp(settingName, "CassetteUnloadOffset_um") == 0)
//	{
//		smCustomerSetting->CassetteUnloadOffset_um = value;
//		return;
//	}
//	if (strcmp(settingName, "MapRowDirection") == 0)
//	{
//		smCustomerSetting->MapRowDirection = value;
//		return;
//	}
//	if (strcmp(settingName, "MapColDirection") == 0)
//	{
//		smCustomerSetting->MapColDirection = value;
//		return;
//	}
//
//	if (strcmp(settingName, "TransferArmInsertFrameOrTileLoadOffset_um") == 0)
//	{
//		smCustomerSetting->TransferArmInsertFrameOrTileLoadOffset_um = value;
//		return;
//	}
//	if (strcmp(settingName, "TransferArmElevatorStandbyOffset_um") == 0)
//	{
//		smCustomerSetting->TransferArmElevatorStandbyOffset_um = value;
//		return;
//	}
//	if (strcmp(settingName, "TransferArmLoadUnloadOffset_um") == 0)
//	{
//		smCustomerSetting->TransferArmLoadUnloadOffset_um = value;
//		return;
//	}
//	if (strcmp(settingName, "InputVisionZAxisUpOffset_um") == 0)
//	{
//		smCustomerSetting->InputVisionZAxisUpOffset_um = value;
//		return;
//	}
//	if (strcmp(settingName, "UnitSupportUpOffset_um") == 0)
//	{
//		smCustomerSetting->UnitSupportUpOffset_um = value;
//		return;
//	}
//	if (strcmp(settingName, "FirstUnitXPosition_um") == 0)
//	{
//		smCustomerSetting->FirstUnitXPosition_um = value;
//		return;
//	}
//	if (strcmp(settingName, "FirstUnitYPosition_um") == 0)
//	{
//		smCustomerSetting->FirstUnitYPosition_um = value;
//		return;
//	}
//	if (strcmp(settingName, "FirstUnitThetaPosition_mDegree") == 0)
//	{
//		smCustomerSetting->FirstUnitThetaPosition_mDegree = value;
//		return;
//	}
//	if (strcmp(settingName, "BarcodeXPosition_um") == 0)
//	{
//		smCustomerSetting->BarcodeXPosition_um = value;
//		return;
//	}
//	if (strcmp(settingName, "BarcodeYPosition_um") == 0)
//	{
//		smCustomerSetting->BarcodeYPosition_um = value;
//		return;
//	}
//	if (strcmp(settingName, "BarcodeZPosition_um") == 0)
//	{
//		smCustomerSetting->BarcodeZPosition_um = value;
//		return;
//	}
//	if (strcmp(settingName, "BarcodeThetaPosition_mDegree") == 0)
//	{
//		smCustomerSetting->BarcodeThetaPosition_mDegree = value;
//		return;
//	}
//	if (strcmp(settingName, "InspectionOrientation_mDegree") == 0)
//	{
//		smCustomerSetting->InspectionOrientation_mDegree = value;
//		return;
//	}
//	if (strcmp(settingName, "FirstUnitXVisionOffset_um") == 0)
//	{
//		smCustomerSetting->FirstUnitXVisionOffset_um = value;
//		return;
//	}
//	if (strcmp(settingName, "FirstUnitYVisionOffset_um") == 0)
//	{
//		smCustomerSetting->FirstUnitYVisionOffset_um = value;
//		return;
//	}
//	if (strcmp(settingName, "FirstUnitThetaVisionOffset_mDegree") == 0)
//	{
//		smCustomerSetting->FirstUnitThetaVisionOffset_mDegree = value;
//		return;
//	}
//#pragma endregion
	throw EXCEPTION_WRITE_FAULT;
}

signed long GetShareMemorySettingArrayLong(LPSTR settingName, int arrayNo)
{
	char chVariable[256];
	memset(chVariable, 0, sizeof(chVariable));
	sprintf_s(chVariable, sizeof(chVariable), "%s%u", settingName, arrayNo);
	return *m_mapSettingArraySignedLong.at(chVariable);
//#pragma region Input XY Table
//	if (strcmp(settingName, "FiducialPositionX_um") == 0)
//		return smCustomerSetting->FiducialPositionX_um[arrayNo];
//	if (strcmp(settingName, "FiducialPositionY_um") == 0)
//		return smCustomerSetting->FiducialPositionY_um[arrayNo];
//	if (strcmp(settingName, "FiducialPositionTheta_mDegree") == 0)
//		return smCustomerSetting->FiducialPositionTheta_mDegree[arrayNo];

//	if (strcmp(settingName, "VisionOffsetX_um") == 0)
//		return smCustomerSetting->VisionOffsetX_um[arrayNo];
//	if (strcmp(settingName, "VisionOffsetY_um") == 0)
//		return smCustomerSetting->VisionOffsetY_um[arrayNo];
//	if (strcmp(settingName, "VisionOffsetTheta_mDegree") == 0)
//		return smCustomerSetting->VisionOffsetTheta_mDegree[arrayNo];

//#pragma endregion
	throw EXCEPTION_WRITE_FAULT;
}

void SetShareMemorySettingArrayLong(LPSTR settingName, int arrayNo, long value)
{
	char chVariable[256];
	memset(chVariable, 0, sizeof(chVariable));
	sprintf_s(chVariable, sizeof(chVariable), "%s%u", settingName, arrayNo);
	*m_mapSettingArraySignedLong.at(chVariable) = value;
	return;
//#pragma region Input XY Table
//	if (strcmp(settingName, "FiducialPositionX_um") == 0)
//	{
//		smCustomerSetting->FiducialPositionX_um[arrayNo] = value;
//		return;
//	}
//	if (strcmp(settingName, "FiducialPositionY_um") == 0)
//	{
//		smCustomerSetting->FiducialPositionY_um[arrayNo] = value;
//		return;
//	}
//	if (strcmp(settingName, "FiducialPositionTheta_mDegree") == 0)
//	{
//		smCustomerSetting->FiducialPositionTheta_mDegree[arrayNo] = value;
//		return;
//	}

//	if (strcmp(settingName, "VisionOffsetX_um") == 0)
//	{
//		smCustomerSetting->VisionOffsetX_um[arrayNo] = value;
//		return;
//	}
//	if (strcmp(settingName, "VisionOffsetY_um") == 0)
//	{
//		smCustomerSetting->VisionOffsetY_um[arrayNo] = value;
//		return;
//	}
//	if (strcmp(settingName, "VisionOffsetTheta_mDegree") == 0)
//	{
//		smCustomerSetting->VisionOffsetTheta_mDegree[arrayNo] = value;
//		return;
//	}
//#pragma endregion
	//else
	throw EXCEPTION_WRITE_FAULT;
}

int GetShareMemorySettingUInt(LPSTR settingName)
{
	return *m_mapSettingUnsignedInt.at(settingName);
//#pragma region Input XY Table
//	if (strcmp(settingName, "CassetteTotalSlot") == 0)
//		return smCustomerSetting->CassetteTotalSlot;
//	if (strcmp(settingName, "CassetteSlotPitch_um") == 0)
//		return smCustomerSetting->CassetteSlotPitch_um;
//
//	if (strcmp(settingName, "InputTrayType") == 0)
//		return smCustomerSetting->InputTrayType;
//	if (strcmp(settingName, "DeviceSizeX_um") == 0)
//		return smCustomerSetting->DeviceSizeX_um;
//	if (strcmp(settingName, "DeviceSizeY_um") == 0)
//		return smCustomerSetting->DeviceSizeY_um;
//	if (strcmp(settingName, "NoOfDeviceInCol") == 0)
//		return smCustomerSetting->NoOfDeviceInCol;
//	if (strcmp(settingName, "NoOfDeviceInRow") == 0)
//		return smCustomerSetting->NoOfDeviceInRow;
//	if (strcmp(settingName, "DeviceXPitch") == 0)
//		return smCustomerSetting->DeviceXPitch;
//	if (strcmp(settingName, "DeviceYPitch") == 0)
//		return smCustomerSetting->DeviceYPitch;
//	if (strcmp(settingName, "VisionInspectionCountInCol") == 0)
//		return smCustomerSetting->VisionInspectionCountInCol;
//	if (strcmp(settingName, "VisionInspectionCountInRow") == 0)
//		return smCustomerSetting->VisionInspectionCountInRow;
//	if (strcmp(settingName, "InputTableMoveDirection") == 0)
//		return smCustomerSetting->InputTableMoveDirection;
//	if (strcmp(settingName, "MaximumAllowableXYOffsetBetweenFiducial_um") == 0)
//		return smCustomerSetting->MaximumAllowableXYOffsetBetweenFiducial_um;
//	if (strcmp(settingName, "MaximumAllowableThetaCorrectionBetweenFOV_mDegree") == 0)
//		return smCustomerSetting->MaximumAllowableThetaCorrectionBetweenFOV_mDegree;

//	if (strcmp(settingName, "VisionFOVHeight") == 0)
//		return smCustomerSetting->VisionFOVHeight;
//	if (strcmp(settingName, "VisionFOVWidth") == 0)
//		return smCustomerSetting->VisionFOVWidth; 
//	if (strcmp(settingName, "Barcode2DMode") == 0)
//		return smCustomerSetting->Barcode2DMode;

//#pragma endregion
	throw EXCEPTION_WRITE_FAULT;
}

void SetShareMemorySettingUInt(LPSTR settingName, unsigned int value)
{
	*m_mapSettingUnsignedInt.at(settingName) = value;
	return;
	//#pragma region Input XY Table
	//	if (strcmp(settingName, "CassetteTotalSlot") == 0)
	//	{
	//		smCustomerSetting->CassetteTotalSlot = value;
	//		return;
	//	}
	//	if (strcmp(settingName, "CassetteSlotPitch_um") == 0)
	//	{
	//		smCustomerSetting->CassetteSlotPitch_um = value;
	//		return;
	//	}
	//
	//	if (strcmp(settingName, "InputTrayType") == 0)
	//	{
	//		smCustomerSetting->InputTrayType = value;
	//		return;
	//	}
	//	if (strcmp(settingName, "DeviceSizeX_um") == 0)
	//	{
	//		smCustomerSetting->DeviceSizeX_um = value;
	//		return;
	//	}
	//	if (strcmp(settingName, "DeviceSizeY_um") == 0)
	//	{
	//		smCustomerSetting->DeviceSizeY_um = value;
	//		return;
	//	}
	//	if (strcmp(settingName, "NoOfDeviceInCol") == 0)
	//	{
	//		smCustomerSetting->NoOfDeviceInCol = value;
	//		return;
	//	}
	//	if (strcmp(settingName, "NoOfDeviceInRow") == 0)
	//	{
	//		smCustomerSetting->NoOfDeviceInRow = value;
	//		return;
	//	}
	//	if (strcmp(settingName, "DeviceXPitch") == 0)
	//	{
	//		smCustomerSetting->DeviceXPitch = value;
	//		return;
	//	}
	//	if (strcmp(settingName, "DeviceYPitch") == 0)
	//	{
	//		smCustomerSetting->DeviceYPitch = value;
	//		return;
	//	}
	//	if (strcmp(settingName, "VisionInspectionCountInCol") == 0)
	//	{
	//		smCustomerSetting->VisionInspectionCountInCol = value;
	//		return;
	//	}
	//	if (strcmp(settingName, "VisionInspectionCountInRow") == 0)
	//	{
	//		smCustomerSetting->VisionInspectionCountInRow = value;
	//		return;
	//	}
	//	if (strcmp(settingName, "InputTableMoveDirection") == 0)
	//	{
	//		smCustomerSetting->InputTableMoveDirection = value;
	//		return;
	//	}
	//	if (strcmp(settingName, "MaximumAllowableXYOffsetBetweenFiducial_um") == 0)
	//	{
	//		smCustomerSetting->MaximumAllowableXYOffsetBetweenFiducial_um = value;
	//		return;
	//	}
	//	if (strcmp(settingName, "MaximumAllowableThetaCorrectionBetweenFOV_mDegree") == 0)
	//	{
	//		smCustomerSetting->MaximumAllowableThetaCorrectionBetweenFOV_mDegree = value;
	//		return;
	//	}
	//	if (strcmp(settingName, "VisionFOVWidth") == 0)
	//	{
	//		smCustomerSetting->VisionFOVWidth = value;
	//		return;
	//	}
	//	if (strcmp(settingName, "VisionFOVHeight") == 0)
	//	{
	//		smCustomerSetting->VisionFOVHeight = value; 
	//		return;
	//	}
	//	if (strcmp(settingName, "Barcode2DMode") == 0)
	//	{
	//		smCustomerSetting->Barcode2DMode = value; 
	//		return;
	//	}

	//#pragma endregion
	throw EXCEPTION_WRITE_FAULT;
}

double GetShareMemorySettingDouble(LPSTR settingName)
{
	return *m_mapSettingDouble.at(settingName);
	//if (strcmp(settingName, "UnitOfMeasurement") == 0)
	//	return smCustomerSetting->UnitOfMeasurement;
	throw EXCEPTION_WRITE_FAULT;
}

void SetShareMemorySettingDouble(LPSTR settingName, double value)
{
	*m_mapSettingDouble.at(settingName) = value;
	return;
	//if (strcmp(settingName, "UnitOfMeasurement") == 0)
	//{
	//	smCustomerSetting->UnitOfMeasurement = value;
	//	return;
	//}
	throw EXCEPTION_WRITE_FAULT;
}

signed long GetShareMemoryTeachPointLong(LPSTR teachPointName)
{
	return *m_mapTeachPointSignedLong.at(teachPointName);
//#pragma region Input XY Table
//	if (strcmp(teachPointName, "InputTableXAxisCenterPosition") == 0)
//		return smCustomerTeachPoint->InputTableXAxisCenterPosition;
//	if (strcmp(teachPointName, "InputTableXAxisLoadUnloadPosition") == 0)
//		return smCustomerTeachPoint->InputTableXAxisLoadUnloadPosition;
//	if (strcmp(teachPointName, "InputTableYAxisCenterPosition") == 0)
//		return smCustomerTeachPoint->InputTableYAxisCenterPosition;
//	if (strcmp(teachPointName, "InputTableYAxisLoadUnloadPosition") == 0)
//		return smCustomerTeachPoint->InputTableYAxisLoadUnloadPosition;
//	if (strcmp(teachPointName, "InputTableThetaAxisCenterPosition") == 0)
//		return smCustomerTeachPoint->InputTableThetaAxisCenterPosition;
//	if (strcmp(teachPointName, "InputTableThetaAxisLoadUnloadPosition") == 0)
//		return smCustomerTeachPoint->InputTableThetaAxisLoadUnloadPosition;
//	if (strcmp(teachPointName, "InputVisionZAxisUpPosition") == 0)
//		return smCustomerTeachPoint->InputVisionZAxisUpPosition;
//	if (strcmp(teachPointName, "InputVisionZAxisVisionFocusPosition") == 0)
//		return smCustomerTeachPoint->InputVisionZAxisVisionFocusPosition;

//	if (strcmp(teachPointName, "InputVisionZAxisVisionSafetyReverseLimitPosition") == 0)
//		return smCustomerTeachPoint->InputVisionZAxisVisionSafetyReverseLimitPosition;

//	if (strcmp(teachPointName, "ElevatorFirstSlotPosition") == 0)
//		return smCustomerTeachPoint->ElevatorFirstSlotPosition;
//	if (strcmp(teachPointName, "TransferArmInsertFrameOrTileStandbyPosition") == 0)
//		return smCustomerTeachPoint->TransferArmInsertFrameOrTileStandbyPosition;
//	if (strcmp(teachPointName, "TransferArmInsertFrameOrTilePosition") == 0)
//		return smCustomerTeachPoint->TransferArmInsertFrameOrTilePosition;
//	if (strcmp(teachPointName, "TransferArmElevatorStandbyPosition") == 0)
//		return smCustomerTeachPoint->TransferArmElevatorStandbyPosition;
//	if (strcmp(teachPointName, "TransferArmLoadUnloadPosition") == 0)
//		return smCustomerTeachPoint->TransferArmLoadUnloadPosition;
//	if (strcmp(teachPointName, "ShareMemoryCheckNumber") == 0)
//		return smCustomerTeachPoint->ShareMemoryCheckNumber;
//	if (strcmp(teachPointName, "UnitSupportDownPosition") == 0)
//		return smCustomerTeachPoint->UnitSupportDownPosition;
//	if (strcmp(teachPointName, "UnitSupportUpPosition") == 0)
//		return smCustomerTeachPoint->UnitSupportUpPosition;
//
//	if (strcmp(teachPointName, "InputTableXAxisGrayScalePosition") == 0)
//		return smCustomerTeachPoint->InputTableXAxisGrayScalePosition;
//	if (strcmp(teachPointName, "InputTableYAxisGrayScalePosition") == 0)
//		return smCustomerTeachPoint->InputTableYAxisGrayScalePosition;
//	if (strcmp(teachPointName, "InputVisionZAxisGrayScalePosition") == 0)
//		return smCustomerTeachPoint->InputVisionZAxisGrayScalePosition;
//	if (strcmp(teachPointName, "InputTableXAxisDotGridsPosition") == 0)
//		return smCustomerTeachPoint->InputTableXAxisDotGridsPosition;
//	if (strcmp(teachPointName, "InputTableYAxisDotGridsPosition") == 0)
//		return smCustomerTeachPoint->InputTableYAxisDotGridsPosition;
//	if (strcmp(teachPointName, "InputVisionZAxisDotGridsPosition") == 0)
//		return smCustomerTeachPoint->InputVisionZAxisDotGridsPosition;
//	//if(strcmp(teachPointName, "TransferArmFrameOrTileEnteringCassettePosition") == 0)
//	//	return smCustomerTeachPoint->TransferArmFrameOrTileEnteringCassettePosition;
//	if (strcmp(teachPointName, "Elevator6InchesWaferFrameFirstSlotLoadPosition") == 0)
//		return smCustomerTeachPoint->Elevator6InchesWaferFrameFirstSlotLoadPosition;
//	if (strcmp(teachPointName, "TransferArm6InchesWaferFrameInsertFrameStandbyPosition") == 0)
//		return smCustomerTeachPoint->TransferArm6InchesWaferFrameInsertFrameStandbyPosition;
//	if (strcmp(teachPointName, "TransferArm6InchesWaferFrameInsertFramePosition") == 0)
//		return smCustomerTeachPoint->TransferArm6InchesWaferFrameInsertFramePosition;
//	if (strcmp(teachPointName, "TransferArm6InchesWaferFrameLoadUnloadPosition") == 0)
//		return smCustomerTeachPoint->TransferArm6InchesWaferFrameLoadUnloadPosition;
//

//	if (strcmp(teachPointName, "InputTableXAxisForwardLimitPosition") == 0)
//		return smCustomerTeachPoint->InputTableXAxisForwardLimitPosition;
//	if (strcmp(teachPointName, "InputTableXAxisReverseLimitPosition") == 0)
//		return smCustomerTeachPoint->InputTableXAxisReverseLimitPosition;
//	if (strcmp(teachPointName, "InputTableYAxisForwardLimitPosition") == 0)
//		return smCustomerTeachPoint->InputTableYAxisForwardLimitPosition;
//	if (strcmp(teachPointName, "InputTableYAxisReverseLimitPosition") == 0)
//		return smCustomerTeachPoint->InputTableYAxisReverseLimitPosition;
//	if (strcmp(teachPointName, "InputTableThetaAxisForwardLimitPosition") == 0)
//		return smCustomerTeachPoint->InputTableThetaAxisForwardLimitPosition;
//	if (strcmp(teachPointName, "InputTableThetaAxisReverseLimitPosition") == 0)
//		return smCustomerTeachPoint->InputTableThetaAxisReverseLimitPosition;
//	if (strcmp(teachPointName, "InputVisionZAxisForwardLimitPosition") == 0)
//		return smCustomerTeachPoint->InputVisionZAxisForwardLimitPosition;
//	if (strcmp(teachPointName, "InputVisionZAxisReverseLimitPosition") == 0)
//		return smCustomerTeachPoint->InputVisionZAxisReverseLimitPosition;
//	if (strcmp(teachPointName, "ElevatorForwardLimitPosition") == 0)
//		return smCustomerTeachPoint->ElevatorForwardLimitPosition;
//	if (strcmp(teachPointName, "ElevatorReverseLimitPosition") == 0)
//		return smCustomerTeachPoint->ElevatorReverseLimitPosition;
//	if (strcmp(teachPointName, "TransferArmForwardLimitPosition") == 0)
//		return smCustomerTeachPoint->TransferArmForwardLimitPosition;
//	if (strcmp(teachPointName, "TransferArmReverseLimitPosition") == 0)
//		return smCustomerTeachPoint->TransferArmReverseLimitPosition;
//	if (strcmp(teachPointName, "UnitSupportForwardLimitPosition") == 0)
//		return smCustomerTeachPoint->UnitSupportForwardLimitPosition;
//	if (strcmp(teachPointName, "UnitSupportReverseLimitPosition") == 0)
//		return smCustomerTeachPoint->UnitSupportReverseLimitPosition;

//#pragma endregion
	throw EXCEPTION_WRITE_FAULT;
}

void SetShareMemoryTeachPointLong(LPSTR teachPointName, signed long teachPointValue)
{
	*m_mapTeachPointSignedLong.at(teachPointName) = teachPointValue;
	return;
//#pragma region Input XY Table
//	if (strcmp(teachPointName, "InputTableXAxisCenterPosition") == 0)
//	{
//		smCustomerTeachPoint->InputTableXAxisCenterPosition = teachPointValue;
//		return;
//	}
//	if (strcmp(teachPointName, "InputTableXAxisLoadUnloadPosition") == 0)
//	{
//		smCustomerTeachPoint->InputTableXAxisLoadUnloadPosition = teachPointValue;
//		return;
//	}
//	if (strcmp(teachPointName, "InputTableYAxisCenterPosition") == 0)
//	{
//		smCustomerTeachPoint->InputTableYAxisCenterPosition = teachPointValue;
//		return;
//	}
//	if (strcmp(teachPointName, "InputTableYAxisLoadUnloadPosition") == 0)
//	{
//		smCustomerTeachPoint->InputTableYAxisLoadUnloadPosition = teachPointValue;
//		return;
//	}
//	if (strcmp(teachPointName, "InputTableThetaAxisCenterPosition") == 0)
//	{
//		smCustomerTeachPoint->InputTableThetaAxisCenterPosition = teachPointValue;
//		return;
//	}
//	if (strcmp(teachPointName, "InputTableThetaAxisLoadUnloadPosition") == 0)
//	{
//		smCustomerTeachPoint->InputTableThetaAxisLoadUnloadPosition = teachPointValue;
//		return;
//	}
//	if (strcmp(teachPointName, "InputVisionZAxisUpPosition") == 0)
//	{
//		smCustomerTeachPoint->InputVisionZAxisUpPosition = teachPointValue;
//		return;
//	}
//	if (strcmp(teachPointName, "InputVisionZAxisVisionFocusPosition") == 0)
//	{
//		smCustomerTeachPoint->InputVisionZAxisVisionFocusPosition = teachPointValue;
//		return;
//	}

//	if (strcmp(teachPointName, "InputVisionZAxisVisionSafetyReverseLimitPosition") == 0)
//	{
//		smCustomerTeachPoint->InputVisionZAxisVisionSafetyReverseLimitPosition = teachPointValue;
//		return;
//	}

//	if (strcmp(teachPointName, "ElevatorFirstSlotPosition") == 0)
//	{
//		smCustomerTeachPoint->ElevatorFirstSlotPosition = teachPointValue;
//		return;
//	}
//	if (strcmp(teachPointName, "TransferArmInsertFrameOrTileStandbyPosition") == 0)
//	{
//		smCustomerTeachPoint->TransferArmInsertFrameOrTileStandbyPosition = teachPointValue;
//		return;
//	}
//	if (strcmp(teachPointName, "TransferArmInsertFrameOrTilePosition") == 0)
//	{
//		smCustomerTeachPoint->TransferArmInsertFrameOrTilePosition = teachPointValue;
//		return;
//	}
//	if (strcmp(teachPointName, "TransferArmElevatorStandbyPosition") == 0)
//	{
//		smCustomerTeachPoint->TransferArmElevatorStandbyPosition = teachPointValue;
//		return;
//	}
//	if (strcmp(teachPointName, "TransferArmLoadUnloadPosition") == 0)
//	{
//		smCustomerTeachPoint->TransferArmLoadUnloadPosition = teachPointValue;
//		return;
//	}
//	if (strcmp(teachPointName, "ShareMemoryCheckNumber") == 0)
//	{
//		smCustomerTeachPoint->ShareMemoryCheckNumber = teachPointValue;
//		return;
//	}
//	if (strcmp(teachPointName, "UnitSupportDownPosition") == 0)
//	{
//		smCustomerTeachPoint->UnitSupportDownPosition = teachPointValue;
//		return;
//	}
//	if (strcmp(teachPointName, "UnitSupportUpPosition") == 0)
//	{
//		smCustomerTeachPoint->UnitSupportUpPosition = teachPointValue;
//		return;
//	}
//
//	if (strcmp(teachPointName, "InputTableXAxisGrayScalePosition") == 0)
//	{
//		smCustomerTeachPoint->InputTableXAxisGrayScalePosition = teachPointValue;
//		return;
//	}
//	if (strcmp(teachPointName, "InputTableYAxisGrayScalePosition") == 0)
//	{
//		smCustomerTeachPoint->InputTableYAxisGrayScalePosition = teachPointValue;
//		return;
//	}
//	if (strcmp(teachPointName, "InputVisionZAxisGrayScalePosition") == 0)
//	{
//		smCustomerTeachPoint->InputVisionZAxisGrayScalePosition = teachPointValue;
//		return;
//	}
//	if (strcmp(teachPointName, "InputTableXAxisDotGridsPosition") == 0)
//	{
//		smCustomerTeachPoint->InputTableXAxisDotGridsPosition = teachPointValue;
//		return;
//	}
//	if (strcmp(teachPointName, "InputTableYAxisDotGridsPosition") == 0)
//	{
//		smCustomerTeachPoint->InputTableYAxisDotGridsPosition = teachPointValue;
//		return;
//	}
//	if (strcmp(teachPointName, "InputVisionZAxisDotGridsPosition") == 0)
//	{
//		smCustomerTeachPoint->InputVisionZAxisDotGridsPosition = teachPointValue;
//		return;
//	}
//	//if(strcmp(teachPointName, "TransferArmFrameOrTileEnteringCassettePosition") == 0)
//	//{
//	//	smCustomerTeachPoint->TransferArmFrameOrTileEnteringCassettePosition = teachPointValue;
//	//	return;
//	//}
//	if (strcmp(teachPointName, "Elevator6InchesWaferFrameFirstSlotLoadPosition") == 0)
//	{
//		smCustomerTeachPoint->Elevator6InchesWaferFrameFirstSlotLoadPosition = teachPointValue;
//		return;
//	}
//	if (strcmp(teachPointName, "TransferArm6InchesWaferFrameInsertFrameStandbyPosition") == 0)
//	{
//		smCustomerTeachPoint->TransferArm6InchesWaferFrameInsertFrameStandbyPosition = teachPointValue;
//		return;
//	}
//	if (strcmp(teachPointName, "TransferArm6InchesWaferFrameInsertFramePosition") == 0)
//	{
//		smCustomerTeachPoint->TransferArm6InchesWaferFrameInsertFramePosition = teachPointValue;
//		return;
//	}
//	if (strcmp(teachPointName, "TransferArm6InchesWaferFrameLoadUnloadPosition") == 0)
//	{
//		smCustomerTeachPoint->TransferArm6InchesWaferFrameLoadUnloadPosition = teachPointValue;
//		return;
//	}
//

//	if (strcmp(teachPointName, "InputTableXAxisForwardLimitPosition") == 0)
//	{
//		smCustomerTeachPoint->InputTableXAxisForwardLimitPosition = teachPointValue;
//		return;
//	}
//	if (strcmp(teachPointName, "InputTableXAxisReverseLimitPosition") == 0)
//	{
//		smCustomerTeachPoint->InputTableXAxisReverseLimitPosition = teachPointValue;
//		return;
//	}
//	if (strcmp(teachPointName, "InputTableYAxisForwardLimitPosition") == 0)
//	{
//		smCustomerTeachPoint->InputTableYAxisForwardLimitPosition = teachPointValue;
//		return;
//	}
//	if (strcmp(teachPointName, "InputTableYAxisReverseLimitPosition") == 0)
//	{
//		smCustomerTeachPoint->InputTableYAxisReverseLimitPosition = teachPointValue;
//		return;
//	}
//	if (strcmp(teachPointName, "InputTableThetaAxisForwardLimitPosition") == 0)
//	{
//		smCustomerTeachPoint->InputTableThetaAxisForwardLimitPosition = teachPointValue;
//		return;
//	}
//	if (strcmp(teachPointName, "InputTableThetaAxisReverseLimitPosition") == 0)
//	{
//		smCustomerTeachPoint->InputTableThetaAxisReverseLimitPosition = teachPointValue;
//		return;
//	}
//	if (strcmp(teachPointName, "InputVisionZAxisForwardLimitPosition") == 0)
//	{
//		smCustomerTeachPoint->InputVisionZAxisForwardLimitPosition = teachPointValue;
//		return;
//	}
//	if (strcmp(teachPointName, "InputVisionZAxisReverseLimitPosition") == 0)
//	{
//		smCustomerTeachPoint->InputVisionZAxisReverseLimitPosition = teachPointValue;
//		return;
//	}
//	if (strcmp(teachPointName, "ElevatorForwardLimitPosition") == 0)
//	{
//		smCustomerTeachPoint->ElevatorForwardLimitPosition = teachPointValue;
//		return;
//	}
//	if (strcmp(teachPointName, "ElevatorReverseLimitPosition") == 0)
//	{
//		smCustomerTeachPoint->ElevatorReverseLimitPosition = teachPointValue;
//		return;
//	}
//	if (strcmp(teachPointName, "TransferArmForwardLimitPosition") == 0)
//	{
//		smCustomerTeachPoint->TransferArmForwardLimitPosition = teachPointValue;
//		return;
//	}
//	if (strcmp(teachPointName, "TransferArmReverseLimitPosition") == 0)
//	{
//		smCustomerTeachPoint->TransferArmReverseLimitPosition = teachPointValue;
//		return;
//	}
//	if (strcmp(teachPointName, "UnitSupportForwardLimitPosition") == 0)
//	{
//		smCustomerTeachPoint->UnitSupportForwardLimitPosition = teachPointValue;
//		return;
//	}
//	if (strcmp(teachPointName, "UnitSupportReverseLimitPosition") == 0)
//	{
//		smCustomerTeachPoint->UnitSupportReverseLimitPosition = teachPointValue;
//		return;
//	}

//#pragma endregion
	throw EXCEPTION_WRITE_FAULT;
}

int GetShareMemoryProductionBool(LPSTR parameterName)
{
	return *m_mapProductionBool.at(parameterName);
	throw EXCEPTION_WRITE_FAULT;
}

void SetShareMemoryProductionBool(LPSTR parameterName, bool enable)
{
	*m_mapProductionBool.at(parameterName) = enable;
	return;
	throw EXCEPTION_WRITE_FAULT;
	//if (strcmp(parameterName, "FailVerification") == 0)
	//{
	//	smCustomerProduction->FailVerification = enable;
	//	return;
	//}
	//if (strcmp(parameterName, "DisableVerifyFirstPosition") == 0)
	//{
	//	smCustomerProduction->DisableVerifyFirstPosition = enable;
	//	return;
	//}
}

int GetShareMemoryProductionInt(LPSTR parameterName)
{
	return *m_mapProductionInt.at(parameterName);
//#pragma region Input XY Table
//	if (strcmp(parameterName, "nCurrentCassetteSlot") == 0)
//		return smCustomerProduction->nCurrentCassetteSlot;
//	if (strcmp(parameterName, "nCurrentTileOrFrameNumber") == 0)
//		return smCustomerProduction->nCurrentTileOrFrameNumber;
//	if (strcmp(parameterName, "nEdgeDieCoordinateX") == 0)
//		return smCustomerProduction->nEdgeDieCoordinateX;
//	if (strcmp(parameterName, "nEdgeDieCoordinateY") == 0)
//		return smCustomerProduction->nEdgeDieCoordinateY;
//	if (strcmp(parameterName, "nFiducialNo") == 0)
//		return smCustomerProduction->nFiducialNo;
//#pragma endregion
	throw EXCEPTION_WRITE_FAULT;
}

void SetShareMemoryProductionInt(LPSTR parameterName, int parameterValue)
{
	*m_mapProductionInt.at(parameterName) = parameterValue;
	return;
//#pragma region Input XY Table
//	if (strcmp(parameterName, "nCurrentCassetteSlot") == 0)
//	{
//		smCustomerProduction->nCurrentCassetteSlot = parameterValue;
//		return;
//	}
//	if (strcmp(parameterName, "nCurrentTileOrFrameNumber") == 0)
//	{
//		smCustomerProduction->nCurrentTileOrFrameNumber = parameterValue;
//		return;
//	}
//	if (strcmp(parameterName, "nEdgeDieCoordinateX") == 0)
//	{
//		smCustomerProduction->nEdgeDieCoordinateX = parameterValue;
//		return;
//	}
//	if (strcmp(parameterName, "nEdgeDieCoordinateY") == 0)
//	{
//		smCustomerProduction->nEdgeDieCoordinateY = parameterValue;
//		return;
//	}
//	if (strcmp(parameterName, "nFiducialNo") == 0)
//	{
//		smCustomerProduction->nFiducialNo = parameterValue;
//		return;
//	}
//#pragma endregion
	//else
	throw EXCEPTION_WRITE_FAULT;
}
void GetShareMemoryProductionString(LPSTR parameterName, char *stringWord)
{
	//strcpy_s(stringWord, sizeof(m_mapProductionString.at(parameterName)), m_mapProductionString.at(parameterName));

	//return;
	//throw EXCEPTION_WRITE_FAULT;

	if (strcmp(parameterName, "InputLotID") == 0)
	{
		strcpy_s(stringWord, sizeof(smCustomerProduction->InputLotID) + 93, smCustomerProduction->InputLotID);
		return;
	}
	else if (strcmp(parameterName, "OutputLotID") == 0)
	{
		strcpy_s(stringWord, sizeof(smCustomerProduction->OutputLotID) + 93, smCustomerProduction->OutputLotID);
		return;
	}
	else if (strcmp(parameterName, "CurrentInputLotID") == 0)
	{
		strcpy_s(stringWord, sizeof(smCustomerProduction->CurrentInputLotID) + 93, smCustomerProduction->CurrentInputLotID);
		return;
	}
	else if (strcmp(parameterName, "CurrentS1LotID") == 0)
	{
		strcpy_s(stringWord, sizeof(smCustomerProduction->CurrentS1LotID) + 93, smCustomerProduction->CurrentS1LotID);
		return;
	}
	else if (strcmp(parameterName, "CurrentS3LotID") == 0)
	{
		strcpy_s(stringWord, sizeof(smCustomerProduction->CurrentS3LotID) + 93, smCustomerProduction->CurrentS3LotID);
		return;
	}
	else if (strcmp(parameterName, "CurrentOutputLotID") == 0)
	{
		strcpy_s(stringWord, sizeof(smCustomerProduction->CurrentOutputLotID) + 93, smCustomerProduction->CurrentOutputLotID);
		return;
	}
	else if (strcmp(parameterName, "PreviousInputLotID") == 0)
	{
		strcpy_s(stringWord, sizeof(smCustomerProduction->PreviousInputLotID) + 93, smCustomerProduction->PreviousInputLotID);
		return;
	}
	else
		throw EXCEPTION_WRITE_FAULT;
}
void SetShareMemoryProductionString(LPSTR parameterName, LPSTR message)
{
	//int result = sizeof(message);
	//char buffer[20];
	//_itoa_s(result, buffer, 20, 2);
	//LPCSTR p = buffer;
	////MessageBoxA(0, p, "A", 0);

	//strcpy_s(m_mapProductionString.at(parameterName), sizeof(message), message);
	//return;

	//throw EXCEPTION_WRITE_FAULT;

	if (strcmp(parameterName, "InputLotID") == 0)
	{
		strcpy_s(smCustomerProduction->InputLotID, sizeof(message) + 93, message);
		return;
	}
	else if (strcmp(parameterName, "OutputLotID") == 0)
	{
		strcpy_s(smCustomerProduction->OutputLotID, sizeof(message) + 93, message);
		return;
	}
	else if (strcmp(parameterName, "CurrentInputLotID") == 0)
	{
		strcpy_s(smCustomerProduction->CurrentInputLotID, sizeof(message) + 93, message);
		return;
	}
	else if (strcmp(parameterName, "CurrentS1LotID") == 0)
	{
		strcpy_s(smCustomerProduction->CurrentS1LotID, sizeof(message) + 93, message);
		return;
	}
	else if (strcmp(parameterName, "CurrentS3LotID") == 0)
	{
		strcpy_s(smCustomerProduction->CurrentS3LotID, sizeof(message) + 93, message);
		return;
	}
	else if (strcmp(parameterName, "CurrentOutputLotID") == 0)
	{
		strcpy_s(smCustomerProduction->CurrentOutputLotID, sizeof(message) + 93, message);
		return;
	}
	else if (strcmp(parameterName, "PreviosInputLotID") == 0)
	{
		strcpy_s(smCustomerProduction->PreviousInputLotID, sizeof(message) + 93, message);
		return;
	}
	else
		throw EXCEPTION_WRITE_FAULT;
}
signed long GetShareMemoryProductionLong(LPSTR parameterName)
{
	return *m_mapProductionSignedLong.at(parameterName);

	throw EXCEPTION_WRITE_FAULT;
}

void SetShareMemoryProductionLong(LPSTR parameterName, signed long parameterValue)
{
	*m_mapProductionSignedLong.at(parameterName) = parameterValue;
	return;

	throw EXCEPTION_WRITE_FAULT;
}

int GetShareMemoryProductionArray(LPSTR parameterName, int arrayNo, LPSTR resultName)
{
	char chVariable[256];
	memset(chVariable, 0, sizeof(chVariable));
	if (strcmp(parameterName, "PickAndPlacePickUpHeadStationResult") == 0)
	{
		sprintf_s(chVariable, sizeof(chVariable), "%s%u%s", parameterName, arrayNo, resultName);
		return *m_mapProductionStationResultInt.at(chVariable);
	}
	if (strcmp(parameterName, "InputTableResult") == 0)
	{
		sprintf_s(chVariable, sizeof(chVariable), "%s%u%s", parameterName, arrayNo, resultName);
		return *m_mapProductionStationResultInt.at(chVariable);
	}
	if (strcmp(parameterName, "OutputTableResult") == 0)
	{
		sprintf_s(chVariable, sizeof(chVariable), "%s%u%s", parameterName, arrayNo, resultName);
		return *m_mapProductionStationResultInt.at(chVariable);
	}
	sprintf_s(chVariable, sizeof(chVariable), "%s%u", parameterName, arrayNo);
	return *m_mapProductionArrayInt.at(chVariable);
	//if (strcmp(parameterName, "nTime") == 0)
	//{
	//	return smCustomerProduction->nTime[arrayNo];
	//}
	//if (strcmp(parameterName, "nArrayCassetteSlotToRun") == 0)
	//{
	//	return smCustomerProduction->nArrayCassetteSlotToRun[arrayNo];
	//}
	//else
		throw EXCEPTION_WRITE_FAULT;
}

void SetShareMemoryProductionArray(LPSTR parameterName, int arrayNo, LPSTR resultName, int parameterValue)
{
	char chVariable[256];
	memset(chVariable, 0, sizeof(chVariable));
	if (strcmp(parameterName, "PickAndPlacePickUpHeadStationResult") == 0)
	{
		sprintf_s(chVariable, sizeof(chVariable), "%s%u%s", parameterName, arrayNo, resultName);
		*m_mapProductionStationResultInt.at(chVariable) = parameterValue;
		return;
	}
	if (strcmp(parameterName, "InputTableResult") == 0)
	{
		sprintf_s(chVariable, sizeof(chVariable), "%s%u%s", parameterName, arrayNo, resultName);
		*m_mapProductionStationResultInt.at(chVariable) = parameterValue;
		return;
	}
	if (strcmp(parameterName, "OutputTableResult") == 0)
	{
		sprintf_s(chVariable, sizeof(chVariable), "%s%u%s", parameterName, arrayNo, resultName);
		*m_mapProductionStationResultInt.at(chVariable) = parameterValue;
		return;
	}
	sprintf_s(chVariable, sizeof(chVariable), "%s%u", parameterName, arrayNo);
	*m_mapProductionArrayInt.at(chVariable) = parameterValue;
	return;
	//if (strcmp(parameterName, "nTime") == 0)
	//{
	//	smCustomerProduction->nTime[arrayNo] = parameterValue;
	//	return;
	//}
	//if (strcmp(parameterName, "nArrayCassetteSlotToRun") == 0)
	//{
	//	smCustomerProduction->nArrayCassetteSlotToRun[arrayNo] = parameterValue;
	//	return;
	//}
	//else
		throw EXCEPTION_WRITE_FAULT;
}

double GetShareMemoryProductionDoubleArray(LPSTR parameterName, int arrayNo, LPSTR resultName)
{
	char chVariable[256];
	memset(chVariable, 0, sizeof(chVariable));
	if (strcmp(parameterName, "PickAndPlaceLookUpTableData1") == 0)
	{
		sprintf_s(chVariable, sizeof(chVariable), "%s%u%s", parameterName, arrayNo, resultName);
		return *m_mapProductionArrayDouble.at(chVariable);
		
	}
	sprintf_s(chVariable, sizeof(chVariable), "%s%u", parameterName, arrayNo);
	return *m_mapProductionArrayDouble.at(chVariable);
	//if (strcmp(parameterName, "nTime") == 0)okok
	//{
	//	return smCustomerProduction->nTime[arrayNo];
	//}
	//if (strcmp(parameterName, "nArrayCassetteSlotToRun") == 0)
	//{
	//	return smCustomerProduction->nArrayCassetteSlotToRun[arrayNo];
	//}
	//else
	throw EXCEPTION_WRITE_FAULT;
}

void SetShareMemoryProductionDoubleArray(LPSTR parameterName, int arrayNo, LPSTR resultName, double parameterValue)
{
	char chVariable[256];
	memset(chVariable, 0, sizeof(chVariable));
	if (strcmp(parameterName, "PickAndPlaceLookUpTableData1") == 0)
	{
		sprintf_s(chVariable, sizeof(chVariable), "%s%u%s", parameterName, arrayNo, resultName);
		*m_mapProductionArrayDouble.at(chVariable) = parameterValue;
		return;
	}
	if (strcmp(parameterName, "PickAndPlaceLookUpTableData2") == 0)
	{
		sprintf_s(chVariable, sizeof(chVariable), "%s%u%s", parameterName, arrayNo, resultName);
		*m_mapProductionArrayDouble.at(chVariable) = parameterValue;
		return;
	}
	sprintf_s(chVariable, sizeof(chVariable), "%s%u", parameterName, arrayNo);
	*m_mapProductionArrayDouble.at(chVariable) = parameterValue;
	return;
	//if (strcmp(parameterName, "nTime") == 0)
	//{
	//	smCustomerProduction->nTime[arrayNo] = parameterValue;
	//	return;
	//}
	//if (strcmp(parameterName, "nArrayCassetteSlotToRun") == 0)
	//{
	//	smCustomerProduction->nArrayCassetteSlotToRun[arrayNo] = parameterValue;
	//	return;
	//}
	//else
	throw EXCEPTION_WRITE_FAULT;
}


int GetShareMemoryProductionStationResult(int stationNo, LPSTR resultName)
{
	char chVariable[256];
	memset(chVariable, 0, sizeof(chVariable));
	//sprintf_s(chVariable, sizeof(chVariable), "%s%u%s", stationName, stationNo, resultName);
	sprintf_s(chVariable, sizeof(chVariable), "TurretStationResult%u%s", stationNo, resultName);
	return *m_mapProductionStationResultInt.at(chVariable);

	throw EXCEPTION_WRITE_FAULT;
}

void SetShareMemoryProductionStationResult(int stationNo, LPSTR resultName, int resultValue)
{
	char chVariable[256];
	memset(chVariable, 0, sizeof(chVariable));
	//sprintf_s(chVariable, sizeof(chVariable), "%s%u%s", stationName, stationNo, resultName);
	sprintf_s(chVariable, sizeof(chVariable), "TurretStationResult%u%s", stationNo, resultName);
	*m_mapProductionStationResultInt.at(chVariable) = resultValue;
	return;

	throw EXCEPTION_WRITE_FAULT;
}

//char GetShareMemoryProductionPatternRecognizationString(LPSTR patternRecognizationName, int patternRecognizationNo, LPSTR unitInformationName, int unitInformationNo, LPSTR arrayName, int arrayNo)
void GetShareMemoryProductionPatternResultString(int patternNo, int resultNo, LPSTR parameterName, LPSTR resultName, char *resultValue, int resultLength)
{
	char chVariable[256];
	memset(chVariable, 0, sizeof(chVariable));
	//sprintf_s(chVariable, sizeof(chVariable), "%s%u%s%u%s%u", patternRecognizationName, patternRecognizationNo, unitInformationName, unitInformationNo, arrayName, arrayNo);
	sprintf_s(chVariable, sizeof(chVariable), "patternRecognization%u%s%u%s", patternNo, parameterName, resultNo, resultName);
	//return *m_mapProductionPatternRecognizationString.at(chVariable);
	strcpy_s(resultValue, sizeof(m_mapProductionPatternRecognizationString.at(chVariable)), m_mapProductionPatternRecognizationString.at(chVariable));

	throw EXCEPTION_WRITE_FAULT;
}

//void SetShareMemoryProductionPatternRecognizationString(LPSTR patternRecognizationName, int patternRecognizationNo, LPSTR unitInformationName, int unitInformationNo, LPSTR arrayName, int arrayNo, LPSTR value)
void SetShareMemoryProductionPatternResultString(int patternNo, int resultNo, LPSTR parameterName, LPSTR resultName, LPSTR resultValue, int resultLength)
{
	char chVariable[256];
	memset(chVariable, 0, sizeof(chVariable));
	//sprintf_s(chVariable, sizeof(chVariable), "%s%u%s%u%s%u", patternRecognizationName, patternRecognizationNo, unitInformationName, unitInformationNo, arrayName, arrayNo);
	sprintf_s(chVariable, sizeof(chVariable), "patternRecognization%u%s%u%s", patternNo, parameterName, resultNo, resultName);
	//*m_mapProductionPatternRecognizationString.at(chVariable) = value;
	strcpy_s(m_mapProductionPatternRecognizationString.at(chVariable), sizeof(resultValue), resultValue);
	return;

	throw EXCEPTION_WRITE_FAULT;
}

// Pattern Recognization -> Unit Information
//int GetShareMemoryProductionPatternRecognizationInt(LPSTR patternRecognizationName, int patternRecognizationNo, LPSTR unitInformationName, int unitInformationNo, LPSTR elementName)
int GetShareMemoryProductionPatternResultInt(int patternNo, int resultNo, LPSTR parameterName, LPSTR resultName, int resultValue)
{
	char chVariable[256];
	memset(chVariable, 0, sizeof(chVariable));
	//sprintf_s(chVariable, sizeof(chVariable), "%s%u%s%u%s", patternRecognizationName, patternRecognizationNo, unitInformationName, unitInformationNo, elementName);
	sprintf_s(chVariable, sizeof(chVariable), "patternRecognization%u%s%u%s", patternNo, parameterName, resultNo, resultName);
	return *m_mapProductionPatternRecognizationInt.at(chVariable);

	throw EXCEPTION_WRITE_FAULT;
}

//void SetShareMemoryProductionPatternRecognizationInt(LPSTR patternRecognizationName, int patternRecognizationNo, LPSTR unitInformationName, int unitInformationNo, LPSTR elementName, int value)
void SetShareMemoryProductionPatternResultInt(int patternNo, int resultNo, LPSTR parameterName, LPSTR resultName, int resultValue)
{
	char chVariable[256];
	memset(chVariable, 0, sizeof(chVariable));
	sprintf_s(chVariable, sizeof(chVariable), "patternRecognization%u%s%u%s", patternNo, parameterName, resultNo, resultName);
	*m_mapProductionPatternRecognizationInt.at(chVariable) = resultValue;
	return;

	throw EXCEPTION_WRITE_FAULT;
}
int GetShareMemoryProductionArrayBool(LPSTR parameterName, int arrayNo)
{
	char chVariable[256];
	memset(chVariable, 0, sizeof(chVariable));
	sprintf_s(chVariable, sizeof(chVariable), "%s%u", parameterName, arrayNo);
	return *m_mapProductionArrayBool.at(chVariable);

	throw EXCEPTION_WRITE_FAULT;
}

void SetShareMemoryProductionArrayBool(LPSTR parameterName, int arrayNo, bool enable)
{
	char chVariable[256];
	memset(chVariable, 0, sizeof(chVariable));
	sprintf_s(chVariable, sizeof(chVariable), "%s%u", parameterName, arrayNo);
	*m_mapProductionArrayBool.at(chVariable) = enable;
	return;
	
	throw EXCEPTION_WRITE_FAULT;
}
double GetShareMemoryProductionDouble(LPSTR parameterName)
{
	return *m_mapProductionDouble.at(parameterName);

	throw EXCEPTION_WRITE_FAULT;
}

void SetShareMemoryProductionDouble(LPSTR parameterName, double value)
{
	*m_mapProductionDouble.at(parameterName) = value;
	return;

	throw EXCEPTION_WRITE_FAULT;
}
int GetShareMemoryModuleStatusBool(LPSTR moduleStatusName)
{
	return *m_mapModuleStatusBool.at(moduleStatusName);

}

void SetShareMemoryModuleStatusBool(LPSTR moduleStatusName, bool enable)
{
	*m_mapModuleStatusBool.at(moduleStatusName) = enable;
	return;
}

int GetShareMemoryCustomizeBool(LPSTR customizeName)
{
	return *m_mapCustomizeBool.at(customizeName);

	throw EXCEPTION_WRITE_FAULT;
}

void SetShareMemoryCustomizeBool(char* customizeName, bool enable)
{
	*m_mapCustomizeBool.at(customizeName) = enable;
	return;

	throw EXCEPTION_WRITE_FAULT;

}

int GetShareMemoryIOArrayInt(LPSTR IOName, int arrayNo)
{
	char chVariable[256];
	memset(chVariable, 0, sizeof(chVariable));
	sprintf_s(chVariable, sizeof(chVariable), "%s%u",IOName, arrayNo);
	return (int)*m_mapIOArrayUnsignedLong.at(chVariable);
	throw EXCEPTION_WRITE_FAULT;

}

void SetShareMemoryIOArrayInt(LPSTR IOName, int arrayNo, int IOValue)
{
	char chVariable[256];
	memset(chVariable, 0, sizeof(chVariable));
	sprintf_s(chVariable, sizeof(chVariable), "%s%u", IOName, arrayNo);
	*m_mapIOArrayUnsignedLong.at(chVariable) = (unsigned long) IOValue;
	return;

}

unsigned long GetShareMemoryIOArrayUnsignedLong(LPSTR IOName, int arrayNo)
{
	char chVariable[256];
	memset(chVariable, 0, sizeof(chVariable));
	sprintf_s(chVariable, sizeof(chVariable), "%s%u", IOName, arrayNo);
	return *m_mapIOArrayUnsignedLong.at(chVariable);
	throw EXCEPTION_WRITE_FAULT;
}

void SetShareMemoryIOArrayUnsignedLong(LPSTR IOName, int arrayNo, unsigned long IOValue)
{
	char chVariable[256];
	memset(chVariable, 0, sizeof(chVariable));
	sprintf_s(chVariable, sizeof(chVariable), "%s%u", IOName, arrayNo);
	*m_mapIOArrayUnsignedLong.at(chVariable) = IOValue;
	return;
	throw EXCEPTION_WRITE_FAULT;
}

int GetShareMemoryEvent(LPSTR eventName)
{
	return (*m_mapEvent.at(eventName)).Set;
	throw EXCEPTION_WRITE_FAULT;

	throw EXCEPTION_WRITE_FAULT;
}

void SetShareMemoryEvent(LPSTR eventName, bool state)
{
	(*m_mapEvent.at(eventName)).Set = state;
	return;
	throw EXCEPTION_WRITE_FAULT;
	throw EXCEPTION_WRITE_FAULT;
}

int GetShareMemoryGeneralInt(LPSTR generalName)
{
	if (strcmp(generalName, "nMotorMovePosition") == 0)
		return *m_mapGeneralSignedlong.at(generalName);
	return *m_mapGeneralInt.at(generalName);
	throw EXCEPTION_WRITE_FAULT;
	throw EXCEPTION_WRITE_FAULT;
}

void SetShareMemoryGeneralInt(LPSTR generalName, int value)
{
	if (strcmp(generalName, "nMotorMovePosition") == 0)
	{
		*m_mapGeneralSignedlong.at(generalName) = value;
		return;
	}
	*m_mapGeneralInt.at(generalName) = value;
	return;

}

double GetShareMemoryGeneralDouble(LPSTR generalName)
{
	return *m_mapGeneralDouble.at(generalName);
	
	throw EXCEPTION_WRITE_FAULT;
}

void SetShareMemoryGeneralDouble(LPSTR generalName, double value)
{
	*m_mapGeneralDouble.at(generalName) = value;
	return;
	throw EXCEPTION_WRITE_FAULT;
}

void GetShareMemoryGeneralString(LPSTR generalName, char *stringWord, int len)
{
	if (strcmp(generalName, "MessageStatus") == 0)
	{
		while (smCustomerEvent->SEQ_GUI_SEND_MSG_DONE.Set == false)
		{
			if (smCustomerEvent->ExitRTX.Set == true)
				break;
			RtSleepFt(&m_lnPeriod_1ms);
		}
		smCustomerEvent->GUI_SEQ_RECEIVE_MSG_DONE.Set = false;
		strcpy_s(stringWord, sizeof(smCustomerGeneral->MessageStatus), smCustomerGeneral->MessageStatus);
		memset(smCustomerGeneral->MessageStatus, 0, sizeof(smCustomerGeneral->MessageStatus));
		smCustomerEvent->GUI_SEQ_RECEIVE_MSG_DONE.Set = true;
		return;
	}
	else
		throw EXCEPTION_WRITE_FAULT;
}

void SetShareMemoryGeneralString(LPSTR generalName, LPSTR message)
{
	if (strcmp(generalName, "MessageStatus") == 0)
	{
		//strcpy(smCustomerGeneral->MessageStatus, message);
		strcpy_s(smCustomerGeneral->MessageStatus, sizeof(message), message);
		return;
	}
	else
		throw EXCEPTION_WRITE_FAULT;
}

//void TimerHandler(PVOID    context)
//{
//    // TO DO:  your timer handler code here
//}

LPSTR TestPassAndReturnString(LPSTR generalName)
{
	char msg[] = "Test\n";
	ULONG ulSize = strlen(msg) + sizeof(char);
	char* pszReturn = NULL;

	//pszReturn = (char*)::CoTaskMemAlloc(ulSize);
	strcpy_s(pszReturn, sizeof(msg), msg);
	return pszReturn;
	//if(strcmp(generalName, "MessageStatus") == 0)
	//	return &smGeneral->MessageStatus[0];
	//else
	//	throw EXCEPTION_WRITE_FAULT;
}